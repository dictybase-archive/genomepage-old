-- 
-- Created by SQL::Translator::Producer::Oracle
-- Created on Wed Mar 30 15:23:48 2011
-- 
--
-- Table: ACQUISITION
--;

CREATE SEQUENCE sq_ACQUISITION_ACQUISITION_ID;

CREATE TABLE ACQUISITION (
  ACQUISITION_ID number(11) NOT NULL,
  ASSAY_ID number(10) NOT NULL,
  PROTOCOL_ID number(10) DEFAULT NULL,
  CHANNEL_ID number(10) DEFAULT NULL,
  ACQUISITIONDATE date DEFAULT SYSDATE,
  NAME varchar2(4000) DEFAULT NULL,
  URI clob DEFAULT NULL,
  PRIMARY KEY (ACQUISITION_ID),
  CONSTRAINT u_ACQUISITION_U_ACQUISITION UNIQUE (NAME)
);

--
-- Table: ACQUISITIONPROP
--;

CREATE SEQUENCE sq_ACQUISITIONPROP_ACQUISITION;

CREATE TABLE ACQUISITIONPROP (
  ACQUISITIONPROP_ID number(11) NOT NULL,
  ACQUISITION_ID number(10) NOT NULL,
  TYPE_ID number(10) NOT NULL,
  VALUE clob DEFAULT NULL,
  RANK number(10) DEFAULT '1' NOT NULL,
  PRIMARY KEY (ACQUISITIONPROP_ID),
  CONSTRAINT u_ACQUISITIONPROP_U_ACQUISITIO UNIQUE (ACQUISITION_ID, TYPE_ID, RANK)
);

--
-- Table: ACQUISITION_RELATIONSHIP
--;

CREATE SEQUENCE sq_ACQUISITION_RELATIONSHIP_AC;

CREATE TABLE ACQUISITION_RELATIONSHIP (
  ACQUISITION_RELATIONSHIP_ID number(11) NOT NULL,
  SUBJECT_ID number(10) NOT NULL,
  TYPE_ID number(10) NOT NULL,
  OBJECT_ID number(10) NOT NULL,
  VALUE clob DEFAULT NULL,
  RANK number(10) DEFAULT '1' NOT NULL,
  PRIMARY KEY (ACQUISITION_RELATIONSHIP_ID),
  CONSTRAINT u_ACQUISITION_RELATIONSHIP_U_A UNIQUE (SUBJECT_ID, OBJECT_ID, TYPE_ID, RANK)
);

--
-- Table: ANALYSIS
--;

CREATE SEQUENCE sq_ANALYSIS_ANALYSIS_ID;

CREATE TABLE ANALYSIS (
  ANALYSIS_ID number(11) NOT NULL,
  NAME varchar2(255),
  DESCRIPTION clob,
  PROGRAM varchar2(255) NOT NULL,
  PROGRAMVERSION varchar2(255) NOT NULL,
  ALGORITHM varchar2(255),
  SOURCENAME varchar2(255),
  SOURCEVERSION varchar2(255),
  SOURCEURI clob,
  TIMEEXECUTED date DEFAULT 'SYSDATE ' NOT NULL,
  PRIMARY KEY (ANALYSIS_ID),
  CONSTRAINT u_ANALYSIS_U_ANALYSIS UNIQUE (PROGRAM, PROGRAMVERSION, SOURCENAME)
);

--
-- Table: ANALYSISFEATURE
--;

CREATE SEQUENCE sq_ANALYSISFEATURE_ANALYSISFEA;

CREATE TABLE ANALYSISFEATURE (
  ANALYSISFEATURE_ID number(11) NOT NULL,
  FEATURE_ID number(10) NOT NULL,
  ANALYSIS_ID number(10) NOT NULL,
  RAWSCORE number(20),
  NORMSCORE number(20),
  SIGNIFICANCE number(20),
  IDENTITY number(20),
  PRIMARY KEY (ANALYSISFEATURE_ID),
  CONSTRAINT u_ANALYSISFEATURE_U_ANALYSISFE UNIQUE (FEATURE_ID, ANALYSIS_ID)
);

--
-- Table: ANALYSISPROP
--;

CREATE SEQUENCE sq_ANALYSISPROP_ANALYSISPROP_I;

CREATE TABLE ANALYSISPROP (
  ANALYSISPROP_ID number(11) NOT NULL,
  ANALYSIS_ID number(10) NOT NULL,
  TYPE_ID number(10) NOT NULL,
  VALUE varchar2(4000),
  PRIMARY KEY (ANALYSISPROP_ID),
  CONSTRAINT u_ANALYSISPROP_U_ANALYSISPROP UNIQUE (ANALYSIS_ID, TYPE_ID, VALUE)
);

--
-- Table: ARRAYDESIGN
--;

CREATE SEQUENCE sq_ARRAYDESIGN_ARRAYDESIGN_ID;

CREATE TABLE ARRAYDESIGN (
  ARRAYDESIGN_ID number(11) NOT NULL,
  MANUFACTURER_ID number(10) NOT NULL,
  PLATFORMTYPE_ID number(10) NOT NULL,
  SUBSTRATETYPE_ID number(10) DEFAULT NULL,
  PROTOCOL_ID number(10) DEFAULT NULL,
  DBXREF_ID number(10) DEFAULT NULL,
  NAME varchar2(4000) NOT NULL,
  VERSION clob DEFAULT NULL,
  DESCRIPTION clob DEFAULT NULL,
  ARRAY_DIMENSIONS clob DEFAULT NULL,
  ELEMENT_DIMENSIONS clob DEFAULT NULL,
  NUM_OF_ELEMENTS number(10) DEFAULT NULL,
  NUM_ARRAY_COLUMNS number(10) DEFAULT NULL,
  NUM_ARRAY_ROWS number(10) DEFAULT NULL,
  NUM_GRID_COLUMNS number(10) DEFAULT NULL,
  NUM_GRID_ROWS number(10) DEFAULT NULL,
  NUM_SUB_COLUMNS number(10) DEFAULT NULL,
  NUM_SUB_ROWS number(10) DEFAULT NULL,
  PRIMARY KEY (ARRAYDESIGN_ID),
  CONSTRAINT u_ARRAYDESIGN_U_ARRAYDESIGN UNIQUE (NAME)
);

--
-- Table: ARRAYDESIGNPROP
--;

CREATE SEQUENCE sq_ARRAYDESIGNPROP_ARRAYDESIGN;

CREATE TABLE ARRAYDESIGNPROP (
  ARRAYDESIGNPROP_ID number(11) NOT NULL,
  ARRAYDESIGN_ID number(10) NOT NULL,
  TYPE_ID number(10) NOT NULL,
  VALUE clob DEFAULT NULL,
  RANK number(10) DEFAULT '1' NOT NULL,
  PRIMARY KEY (ARRAYDESIGNPROP_ID),
  CONSTRAINT u_ARRAYDESIGNPROP_U_ARRAYDESIG UNIQUE (ARRAYDESIGN_ID, TYPE_ID, RANK)
);

--
-- Table: ASSAY
--;

CREATE SEQUENCE sq_ASSAY_ASSAY_ID;

CREATE TABLE ASSAY (
  ASSAY_ID number(11) NOT NULL,
  ARRAYDESIGN_ID number(10) NOT NULL,
  PROTOCOL_ID number(10) DEFAULT NULL,
  ASSAYDATE date DEFAULT SYSDATE,
  ARRAYIDENTIFIER clob DEFAULT NULL,
  ARRAYBATCHIDENTIFIER clob DEFAULT NULL,
  OPERATOR_ID number(10) NOT NULL,
  DBXREF_ID number(10) DEFAULT NULL,
  NAME varchar2(4000) DEFAULT NULL,
  DESCRIPTION clob DEFAULT NULL,
  PRIMARY KEY (ASSAY_ID),
  CONSTRAINT u_ASSAY_U_ASSAY UNIQUE (NAME)
);

--
-- Table: ASSAYPROP
--;

CREATE SEQUENCE sq_ASSAYPROP_ASSAYPROP_ID;

CREATE TABLE ASSAYPROP (
  ASSAYPROP_ID number(11) NOT NULL,
  ASSAY_ID number(10) NOT NULL,
  TYPE_ID number(10) NOT NULL,
  VALUE clob DEFAULT NULL,
  RANK number(10) DEFAULT '1' NOT NULL,
  PRIMARY KEY (ASSAYPROP_ID),
  CONSTRAINT u_ASSAYPROP_U_ASSAYPROP UNIQUE (ASSAY_ID, TYPE_ID, RANK)
);

--
-- Table: ASSAY_BIOMATERIAL
--;

CREATE SEQUENCE sq_ASSAY_BIOMATERIAL_ASSAY_BIO;

CREATE TABLE ASSAY_BIOMATERIAL (
  ASSAY_BIOMATERIAL_ID number(11) NOT NULL,
  ASSAY_ID number(10) NOT NULL,
  BIOMATERIAL_ID number(10) NOT NULL,
  CHANNEL_ID number(10) DEFAULT NULL,
  PRIMARY KEY (ASSAY_BIOMATERIAL_ID),
  CONSTRAINT u_ASSAY_BIOMATERIAL_U_ASSAY_BI UNIQUE (ASSAY_ID, BIOMATERIAL_ID, CHANNEL_ID)
);

--
-- Table: ASSAY_PROJECT
--;

CREATE SEQUENCE sq_ASSAY_PROJECT_ASSAY_PROJECT;

CREATE TABLE ASSAY_PROJECT (
  ASSAY_PROJECT_ID number(11) NOT NULL,
  ASSAY_ID number(10) NOT NULL,
  PROJECT_ID number(10) NOT NULL,
  PRIMARY KEY (ASSAY_PROJECT_ID),
  CONSTRAINT u_ASSAY_PROJECT_U_ASSAY_PROJEC UNIQUE (ASSAY_ID, PROJECT_ID)
);

--
-- Table: AUTHOR
--;

CREATE SEQUENCE sq_AUTHOR_AUTHOR_ID;

CREATE TABLE AUTHOR (
  AUTHOR_ID number(11) NOT NULL,
  CONTACT_ID number(10) DEFAULT NULL,
  SURNAME varchar2(100) NOT NULL,
  GIVENNAMES varchar2(100),
  SUFFIX varchar2(100),
  PRIMARY KEY (AUTHOR_ID),
  CONSTRAINT u_AUTHOR_U_AUTHOR UNIQUE (SURNAME, GIVENNAMES, SUFFIX)
);

--
-- Table: BIOMATERIAL
--;

CREATE SEQUENCE sq_BIOMATERIAL_BIOMATERIAL_ID;

CREATE TABLE BIOMATERIAL (
  BIOMATERIAL_ID number(11) NOT NULL,
  TAXON_ID number(10) DEFAULT NULL,
  BIOSOURCEPROVIDER_ID number(10) DEFAULT NULL,
  DBXREF_ID number(10) DEFAULT NULL,
  NAME varchar2(4000) DEFAULT NULL,
  DESCRIPTION clob DEFAULT NULL,
  PRIMARY KEY (BIOMATERIAL_ID),
  CONSTRAINT u_BIOMATERIAL_U_BIOMATERIAL UNIQUE (NAME)
);

--
-- Table: BIOMATERIALPROP
--;

CREATE SEQUENCE sq_BIOMATERIALPROP_BIOMATERIAL;

CREATE TABLE BIOMATERIALPROP (
  BIOMATERIALPROP_ID number(11) NOT NULL,
  BIOMATERIAL_ID number(10) NOT NULL,
  TYPE_ID number(10) NOT NULL,
  VALUE clob DEFAULT NULL,
  RANK number(10) NOT NULL,
  PRIMARY KEY (BIOMATERIALPROP_ID),
  CONSTRAINT u_BIOMATERIALPROP_U_BIOMATERIA UNIQUE (BIOMATERIAL_ID, TYPE_ID, RANK)
);

--
-- Table: BIOMATERIAL_RELATIONSHIP
--;

CREATE SEQUENCE sq_BIOMATERIAL_RELATIONSHIP_BI;

CREATE TABLE BIOMATERIAL_RELATIONSHIP (
  BIOMATERIAL_RELATIONSHIP_ID number(11) NOT NULL,
  SUBJECT_ID number(10) NOT NULL,
  TYPE_ID number(10) NOT NULL,
  OBJECT_ID number(10) NOT NULL,
  PRIMARY KEY (BIOMATERIAL_RELATIONSHIP_ID),
  CONSTRAINT u_BIOMATERIAL_RELATIONSHIP_U_B UNIQUE (SUBJECT_ID, OBJECT_ID, TYPE_ID)
);

--
-- Table: BIOMATERIAL_TREATMENT
--;

CREATE SEQUENCE sq_BIOMATERIAL_TREATMENT_BIOMA;

CREATE TABLE BIOMATERIAL_TREATMENT (
  BIOMATERIAL_TREATMENT_ID number(11) NOT NULL,
  BIOMATERIAL_ID number(10) NOT NULL,
  TREATMENT_ID number(10) NOT NULL,
  UNITTYPE_ID number(10) DEFAULT NULL,
  VALUE number(15) DEFAULT NULL,
  RANK number(10) DEFAULT '1' NOT NULL,
  PRIMARY KEY (BIOMATERIAL_TREATMENT_ID),
  CONSTRAINT u_BIOMATERIAL_TREATMENT_U_BIOM UNIQUE (BIOMATERIAL_ID, TREATMENT_ID)
);

--
-- Table: CHADO_LOGS
--;

CREATE SEQUENCE sq_CHADO_LOGS_LOG_NO;

CREATE TABLE CHADO_LOGS (
  LOG_NO number(38) NOT NULL,
  TABLE_NAME varchar2(200) NOT NULL,
  OPERATION varchar2(20) NOT NULL,
  OLD_VALUE clob NOT NULL,
  NEW_VALUE clob,
  CREATED_BY varchar2(12) DEFAULT 'SUBSTR(USER,1,12) ' NOT NULL,
  DATE_CREATED date DEFAULT 'SYSDATE ' NOT NULL,
  PRIMARY KEY (LOG_NO)
);

--
-- Table: CHANNEL
--;

CREATE SEQUENCE sq_CHANNEL_CHANNEL_ID;

CREATE TABLE CHANNEL (
  CHANNEL_ID number(11) NOT NULL,
  NAME varchar2(4000) NOT NULL,
  DEFINITION clob NOT NULL,
  PRIMARY KEY (CHANNEL_ID),
  CONSTRAINT u_CHANNEL_U_CHANNEL UNIQUE (NAME)
);

--
-- Table: CONTACT
--;

CREATE SEQUENCE sq_CONTACT_CONTACT_ID;

CREATE TABLE CONTACT (
  CONTACT_ID number(11) NOT NULL,
  NAME varchar2(30) NOT NULL,
  DESCRIPTION varchar2(255) DEFAULT NULL,
  PRIMARY KEY (CONTACT_ID),
  CONSTRAINT u_CONTACT_U_CONTACT UNIQUE (NAME)
);

--
-- Table: CONTROL
--;

CREATE SEQUENCE sq_CONTROL_CONTROL_ID;

CREATE TABLE CONTROL (
  CONTROL_ID number(11) NOT NULL,
  TYPE_ID number(10) NOT NULL,
  ASSAY_ID number(10) NOT NULL,
  TABLEINFO_ID number(10) NOT NULL,
  ROW_ID number(10) NOT NULL,
  NAME clob DEFAULT NULL,
  VALUE clob DEFAULT NULL,
  RANK number(10) DEFAULT '1' NOT NULL,
  PRIMARY KEY (CONTROL_ID)
);

--
-- Table: CV
--;

CREATE SEQUENCE sq_CV_CV_ID;

CREATE TABLE CV (
  CV_ID number(11) NOT NULL,
  NAME varchar2(255) NOT NULL,
  DEFINITION clob,
  PRIMARY KEY (CV_ID),
  CONSTRAINT u_CV_U_CV UNIQUE (NAME)
);

--
-- Table: CVTERM
--;

CREATE SEQUENCE sq_CVTERM_CVTERM_ID;

CREATE TABLE CVTERM (
  CVTERM_ID number(11) NOT NULL,
  CV_ID number(10) NOT NULL,
  NAME varchar2(1024) NOT NULL,
  DEFINITION clob,
  DBXREF_ID number(10),
  IS_OBSOLETE number(38) DEFAULT '1' NOT NULL,
  IS_RELATIONSHIPTYPE number(38) DEFAULT '1' NOT NULL,
  PRIMARY KEY (CVTERM_ID),
  CONSTRAINT u_CVTERM_U_CVTERM_DBXREF_ID UNIQUE (DBXREF_ID)
);

--
-- Table: CVTERMPATH
--;

CREATE SEQUENCE sq_CVTERMPATH_CVTERMPATH_ID;

CREATE TABLE CVTERMPATH (
  CVTERMPATH_ID number(11) NOT NULL,
  TYPE_ID number(10),
  SUBJECT_ID number(10) NOT NULL,
  OBJECT_ID number(10) NOT NULL,
  CV_ID number(10) NOT NULL,
  PATHDISTANCE number(10),
  PRIMARY KEY (CVTERMPATH_ID),
  CONSTRAINT u_CVTERMPATH_U_CVTERMPATH UNIQUE (SUBJECT_ID, OBJECT_ID, TYPE_ID, PATHDISTANCE)
);

--
-- Table: CVTERMPROP
--;

CREATE SEQUENCE sq_CVTERMPROP_CVTERMPROP_ID;

CREATE TABLE CVTERMPROP (
  CVTERMPROP_ID number(38) NOT NULL,
  CVTERM_ID number(38) NOT NULL,
  TYPE_ID number(38) NOT NULL,
  VALUE varchar2(1024) NOT NULL,
  RANK number(38) DEFAULT '1' NOT NULL,
  PRIMARY KEY (CVTERMPROP_ID),
  CONSTRAINT u_CVTERMPROP_U_CVTERM_ID UNIQUE (CVTERM_ID, TYPE_ID, VALUE, RANK)
);

--
-- Table: CVTERMSYNONYM
--;

CREATE SEQUENCE sq_CVTERMSYNONYM_CVTERMSYNONYM;

CREATE TABLE CVTERMSYNONYM (
  CVTERMSYNONYM_ID number(11) NOT NULL,
  CVTERM_ID number(10) NOT NULL,
  SYNONYM_ varchar2(1024) NOT NULL,
  TYPE_ID number(38),
  PRIMARY KEY (CVTERMSYNONYM_ID),
  CONSTRAINT u_CVTERMSYNONYM_U_CVTERMSYNONY UNIQUE (CVTERM_ID, SYNONYM_)
);

--
-- Table: CVTERM_DBXREF
--;

CREATE SEQUENCE sq_CVTERM_DBXREF_CVTERM_DBXREF;

CREATE TABLE CVTERM_DBXREF (
  CVTERM_DBXREF_ID number(11) NOT NULL,
  CVTERM_ID number(10) NOT NULL,
  DBXREF_ID number(10) NOT NULL,
  IS_FOR_DEFINITION number(38) DEFAULT '1' NOT NULL,
  PRIMARY KEY (CVTERM_DBXREF_ID),
  CONSTRAINT u_CVTERM_DBXREF_U_CVTERM_DBXRE UNIQUE (CVTERM_ID, DBXREF_ID)
);

--
-- Table: CVTERM_RELATIONSHIP
--;

CREATE SEQUENCE sq_CVTERM_RELATIONSHIP_CVTERM_;

CREATE TABLE CVTERM_RELATIONSHIP (
  CVTERM_RELATIONSHIP_ID number(11) NOT NULL,
  TYPE_ID number(10) NOT NULL,
  SUBJECT_ID number(10) NOT NULL,
  OBJECT_ID number(10) NOT NULL,
  PRIMARY KEY (CVTERM_RELATIONSHIP_ID),
  CONSTRAINT u_CVTERM_RELATIONSHIP_U_CVTERM UNIQUE (SUBJECT_ID, OBJECT_ID, TYPE_ID)
);

--
-- Table: DB
--;

CREATE SEQUENCE sq_DB_DB_ID;

CREATE TABLE DB (
  DB_ID number(11) NOT NULL,
  NAME varchar2(255) NOT NULL,
  CONTACT_ID number(10),
  DESCRIPTION varchar2(255) DEFAULT NULL,
  URLPREFIX varchar2(255) DEFAULT NULL,
  URL varchar2(255) DEFAULT NULL,
  PRIMARY KEY (DB_ID),
  CONSTRAINT u_DB_U_DB UNIQUE (NAME)
);

--
-- Table: DBXREF
--;

CREATE SEQUENCE sq_DBXREF_DBXREF_ID;

CREATE TABLE DBXREF (
  DBXREF_ID number(11) NOT NULL,
  DB_ID number(10) NOT NULL,
  ACCESSION varchar2(255) NOT NULL,
  VERSION varchar2(255) DEFAULT '' ' ' NOT NULL,
  DESCRIPTION clob,
  PRIMARY KEY (DBXREF_ID),
  CONSTRAINT u_DBXREF_U_DBXREF UNIQUE (DB_ID, ACCESSION, VERSION)
);

--
-- Table: DBXREFPROP
--;

CREATE SEQUENCE sq_DBXREFPROP_DBXREFPROP_ID;

CREATE TABLE DBXREFPROP (
  DBXREFPROP_ID number(11) NOT NULL,
  DBXREF_ID number(10) NOT NULL,
  TYPE_ID number(10) NOT NULL,
  VALUE clob DEFAULT NULL,
  RANK number(10) DEFAULT '1' NOT NULL,
  PRIMARY KEY (DBXREFPROP_ID),
  CONSTRAINT u_DBXREFPROP_U_DBXREFPROP UNIQUE (DBXREF_ID, TYPE_ID, RANK)
);

--
-- Table: EIMAGE
--;

CREATE SEQUENCE sq_EIMAGE_EIMAGE_ID;

CREATE TABLE EIMAGE (
  EIMAGE_ID number(11) NOT NULL,
  EIMAGE_DATA clob,
  EIMAGE_TYPE varchar2(255) NOT NULL,
  IMAGE_URI varchar2(255),
  PRIMARY KEY (EIMAGE_ID)
);

--
-- Table: ELEMENT
--;

CREATE SEQUENCE sq_ELEMENT_ELEMENT_ID;

CREATE TABLE ELEMENT (
  ELEMENT_ID number(11) NOT NULL,
  FEATURE_ID number(10) DEFAULT NULL,
  ARRAYDESIGN_ID number(10) NOT NULL,
  TYPE_ID number(10) DEFAULT NULL,
  DBXREF_ID number(10) DEFAULT NULL,
  SUBCLASS_VIEW varchar2(27) NOT NULL,
  TINYINT1 number(10) DEFAULT NULL,
  SMALLINT1 number(10) DEFAULT NULL,
  CHAR1 varchar2(5) DEFAULT NULL,
  CHAR2 varchar2(5) DEFAULT NULL,
  CHAR3 varchar2(5) DEFAULT NULL,
  CHAR4 varchar2(5) DEFAULT NULL,
  CHAR5 varchar2(5) DEFAULT NULL,
  CHAR6 varchar2(5) DEFAULT NULL,
  CHAR7 varchar2(5) DEFAULT NULL,
  TINYSTRING1 varchar2(50) DEFAULT NULL,
  TINYSTRING2 varchar2(50) DEFAULT NULL,
  SMALLSTRING1 varchar2(100) DEFAULT NULL,
  SMALLSTRING2 varchar2(100) DEFAULT NULL,
  STRING1 varchar2(500) DEFAULT NULL,
  STRING2 varchar2(500) DEFAULT NULL,
  PRIMARY KEY (ELEMENT_ID),
  CONSTRAINT u_ELEMENT_U_ELEMENT UNIQUE (FEATURE_ID, ARRAYDESIGN_ID)
);

--
-- Table: ELEMENTRESULT
--;

CREATE SEQUENCE sq_ELEMENTRESULT_ELEMENTRESULT;

CREATE TABLE ELEMENTRESULT (
  ELEMENTRESULT_ID number(11) NOT NULL,
  ELEMENT_ID number(10) NOT NULL,
  QUANTIFICATION_ID number(10) NOT NULL,
  SUBCLASS_VIEW varchar2(27) NOT NULL,
  FOREGROUND number(15) DEFAULT NULL,
  BACKGROUND number(15) DEFAULT NULL,
  FOREGROUND_SD number(15) DEFAULT NULL,
  BACKGROUND_SD number(15) DEFAULT NULL,
  FLOAT1 number(15) DEFAULT NULL,
  FLOAT2 number(15) DEFAULT NULL,
  FLOAT3 number(15) DEFAULT NULL,
  FLOAT4 number(15) DEFAULT NULL,
  FLOAT5 number(15) DEFAULT NULL,
  FLOAT6 number(15) DEFAULT NULL,
  FLOAT7 number(15) DEFAULT NULL,
  FLOAT8 number(15) DEFAULT NULL,
  FLOAT9 number(15) DEFAULT NULL,
  FLOAT10 number(15) DEFAULT NULL,
  INT1 number(10) DEFAULT NULL,
  INT2 number(10) DEFAULT NULL,
  INT3 number(10) DEFAULT NULL,
  INT4 number(10) DEFAULT NULL,
  INT5 number(10) DEFAULT NULL,
  INT6 number(10) DEFAULT NULL,
  TINYINT1 number(10) DEFAULT NULL,
  TINYINT2 number(10) DEFAULT NULL,
  TINYINT3 number(10) DEFAULT NULL,
  SMALLINT1 number(10) DEFAULT NULL,
  SMALLINT2 number(10) DEFAULT NULL,
  CHAR1 varchar2(5) DEFAULT NULL,
  CHAR2 varchar2(5) DEFAULT NULL,
  CHAR3 varchar2(5) DEFAULT NULL,
  CHAR4 varchar2(5) DEFAULT NULL,
  CHAR5 varchar2(5) DEFAULT NULL,
  CHAR6 varchar2(5) DEFAULT NULL,
  TINYSTRING1 varchar2(50) DEFAULT NULL,
  TINYSTRING2 varchar2(50) DEFAULT NULL,
  TINYSTRING3 varchar2(50) DEFAULT NULL,
  SMALLSTRING1 varchar2(100) DEFAULT NULL,
  SMALLSTRING2 varchar2(100) DEFAULT NULL,
  STRING1 varchar2(500) DEFAULT NULL,
  STRING2 varchar2(500) DEFAULT NULL,
  PRIMARY KEY (ELEMENTRESULT_ID),
  CONSTRAINT u_ELEMENTRESULT_U_ELEMENTRESUL UNIQUE (ELEMENT_ID, QUANTIFICATION_ID, SUBCLASS_VIEW)
);

--
-- Table: ELEMENTRESULT_RELATIONSHIP
--;

CREATE SEQUENCE sq_ELEMENTRESULT_RELATIONSHIP_;

CREATE TABLE ELEMENTRESULT_RELATIONSHIP (
  ELEMENTRESULT_RELATIONSHIP_ID number(11) NOT NULL,
  SUBJECT_ID number(10) NOT NULL,
  TYPE_ID number(10) NOT NULL,
  OBJECT_ID number(10) NOT NULL,
  VALUE clob DEFAULT NULL,
  RANK number(10) DEFAULT '1' NOT NULL,
  PRIMARY KEY (ELEMENTRESULT_RELATIONSHIP_ID),
  CONSTRAINT u_ELEMENTRESULT_RELATIONSHIP_U UNIQUE (SUBJECT_ID, OBJECT_ID, TYPE_ID, RANK)
);

--
-- Table: ENVIRONMENT
--;

CREATE SEQUENCE sq_ENVIRONMENT_ENVIRONMENT_ID;

CREATE TABLE ENVIRONMENT (
  ENVIRONMENT_ID number(11) NOT NULL,
  UNIQUENAME varchar2(4000) NOT NULL,
  DESCRIPTION clob,
  PRIMARY KEY (ENVIRONMENT_ID),
  CONSTRAINT u_ENVIRONMENT_U_ENVIRONMENT UNIQUE (UNIQUENAME)
);

--
-- Table: ENVIRONMENT_CVTERM
--;

CREATE SEQUENCE sq_ENVIRONMENT_CVTERM_ENVIRONM;

CREATE TABLE ENVIRONMENT_CVTERM (
  ENVIRONMENT_CVTERM_ID number(11) NOT NULL,
  ENVIRONMENT_ID number(10) NOT NULL,
  CVTERM_ID number(10) NOT NULL,
  PRIMARY KEY (ENVIRONMENT_CVTERM_ID),
  CONSTRAINT u_ENVIRONMENT_CVTERM_U_ENVIRON UNIQUE (ENVIRONMENT_ID, CVTERM_ID)
);

--
-- Table: EXPRESSION
--;

CREATE SEQUENCE sq_EXPRESSION_EXPRESSION_ID;

CREATE TABLE EXPRESSION (
  EXPRESSION_ID number(11) NOT NULL,
  DESCRIPTION clob,
  PRIMARY KEY (EXPRESSION_ID)
);

--
-- Table: EXPRESSION_CVTERM
--;

CREATE SEQUENCE sq_EXPRESSION_CVTERM_EXPRESSIO;

CREATE TABLE EXPRESSION_CVTERM (
  EXPRESSION_CVTERM_ID number(11) NOT NULL,
  EXPRESSION_ID number(10) NOT NULL,
  CVTERM_ID number(10) NOT NULL,
  RANK number(10) NOT NULL,
  CVTERM_TYPE varchar2(255),
  PRIMARY KEY (EXPRESSION_CVTERM_ID),
  CONSTRAINT u_EXPRESSION_CVTERM_U_EXPRESSI UNIQUE (EXPRESSION_ID, CVTERM_ID)
);

--
-- Table: EXPRESSION_IMAGE
--;

CREATE SEQUENCE sq_EXPRESSION_IMAGE_EXPRESSION;

CREATE TABLE EXPRESSION_IMAGE (
  EXPRESSION_IMAGE_ID number(11) NOT NULL,
  EXPRESSION_ID number(10) NOT NULL,
  EIMAGE_ID number(10) NOT NULL,
  PRIMARY KEY (EXPRESSION_IMAGE_ID),
  CONSTRAINT u_EXPRESSION_IMAGE_U_EXPRESSIO UNIQUE (EXPRESSION_ID, EIMAGE_ID)
);

--
-- Table: EXPRESSION_PUB
--;

CREATE SEQUENCE sq_EXPRESSION_PUB_EXPRESSION_P;

CREATE TABLE EXPRESSION_PUB (
  EXPRESSION_PUB_ID number(11) NOT NULL,
  EXPRESSION_ID number(10) NOT NULL,
  PUB_ID number(10) NOT NULL,
  PRIMARY KEY (EXPRESSION_PUB_ID),
  CONSTRAINT u_EXPRESSION_PUB_U_EXPRESSION_ UNIQUE (EXPRESSION_ID, PUB_ID)
);

--
-- Table: FEATURE
--;

CREATE SEQUENCE sq_FEATURE_FEATURE_ID;

CREATE TABLE FEATURE (
  FEATURE_ID number(11) NOT NULL,
  DBXREF_ID number(10),
  ORGANISM_ID number(10) NOT NULL,
  NAME varchar2(255),
  UNIQUENAME varchar2(4000) NOT NULL,
  RESIDUES clob,
  SEQLEN number(10),
  MD5CHECKSUM char(32),
  TYPE_ID number(10) NOT NULL,
  IS_ANALYSIS number(38) DEFAULT '1' NOT NULL,
  TIMEACCESSIONED date DEFAULT 'SYSDATE ' NOT NULL,
  TIMELASTMODIFIED date DEFAULT 'SYSDATE ' NOT NULL,
  CREATED_BY varchar2(20) DEFAULT 'USER ' NOT NULL,
  MODIFIED_BY varchar2(20) DEFAULT 'USER ' NOT NULL,
  IS_DELETED number(38) DEFAULT '0',
  IS_OBSOLETE number(38) DEFAULT '1' NOT NULL,
  PRIMARY KEY (FEATURE_ID),
  CONSTRAINT u_FEATURE_U_FEATURE UNIQUE (ORGANISM_ID, UNIQUENAME, TYPE_ID)
);

--
-- Table: FEATURELOC
--;

CREATE SEQUENCE sq_FEATURELOC_FEATURELOC_ID;

CREATE TABLE FEATURELOC (
  FEATURELOC_ID number(11) NOT NULL,
  FEATURE_ID number(10) NOT NULL,
  SRCFEATURE_ID number(10),
  FMIN number(10),
  IS_FMIN_PARTIAL number(38) DEFAULT '1' NOT NULL,
  FMAX number(10),
  IS_FMAX_PARTIAL number(38) DEFAULT '1' NOT NULL,
  STRAND number(5),
  PHASE number(10),
  RESIDUE_INFO clob,
  LOCGROUP number(10) DEFAULT '1' NOT NULL,
  RANK number(10) DEFAULT '1' NOT NULL,
  TIMECREATED date DEFAULT 'SYSDATE ' NOT NULL,
  TIMELASTMODIFIED date DEFAULT 'SYSDATE ' NOT NULL,
  CREATED_BY varchar2(20) DEFAULT 'USER ' NOT NULL,
  MODIFIED_BY varchar2(20) DEFAULT 'USER ' NOT NULL,
  PRIMARY KEY (FEATURELOC_ID),
  CONSTRAINT u_FEATURELOC_U_FEATURELOC UNIQUE (FEATURE_ID, LOCGROUP, RANK)
);

--
-- Table: FEATUREMAP
--;

CREATE SEQUENCE sq_FEATUREMAP_FEATUREMAP_ID;

CREATE TABLE FEATUREMAP (
  FEATUREMAP_ID number(11) NOT NULL,
  NAME varchar2(255),
  DESCRIPTION clob,
  UNITTYPE_ID number(10) DEFAULT NULL,
  PRIMARY KEY (FEATUREMAP_ID),
  CONSTRAINT u_FEATUREMAP_U_FEATUREMAP UNIQUE (NAME)
);

--
-- Table: FEATUREMAP_PUB
--;

CREATE SEQUENCE sq_FEATUREMAP_PUB_FEATUREMAP_P;

CREATE TABLE FEATUREMAP_PUB (
  FEATUREMAP_PUB_ID number(11) NOT NULL,
  FEATUREMAP_ID number(10) NOT NULL,
  PUB_ID number(10) NOT NULL,
  PRIMARY KEY (FEATUREMAP_PUB_ID)
);

--
-- Table: FEATUREPOS
--;

CREATE TABLE FEATUREPOS (
  FEATUREPOS_ID number(11) NOT NULL,
  FEATUREMAP_ID number(11) NOT NULL,
  FEATURE_ID number(10) NOT NULL,
  MAP_FEATURE_ID number(10) NOT NULL,
  MAPPOS number(20) NOT NULL
);

--
-- Table: FEATUREPROP
--;

CREATE SEQUENCE sq_FEATUREPROP_FEATUREPROP_ID;

CREATE TABLE FEATUREPROP (
  FEATUREPROP_ID number(11) NOT NULL,
  FEATURE_ID number(10) NOT NULL,
  TYPE_ID number(10) NOT NULL,
  VALUE clob DEFAULT NULL,
  RANK number(10) DEFAULT '1' NOT NULL,
  TIMECREATED date DEFAULT 'SYSDATE ' NOT NULL,
  TIMELASTMODIFIED date DEFAULT 'SYSDATE ' NOT NULL,
  CREATED_BY varchar2(20) DEFAULT 'USER ' NOT NULL,
  MODIFIED_BY varchar2(20) DEFAULT 'USER ' NOT NULL,
  PRIMARY KEY (FEATUREPROP_ID),
  CONSTRAINT u_FEATUREPROP_U_FEATUREPROP UNIQUE (FEATURE_ID, TYPE_ID, RANK)
);

--
-- Table: FEATUREPROP_PUB
--;

CREATE SEQUENCE sq_FEATUREPROP_PUB_FEATUREPROP;

CREATE TABLE FEATUREPROP_PUB (
  FEATUREPROP_PUB_ID number(11) NOT NULL,
  FEATUREPROP_ID number(10) NOT NULL,
  PUB_ID number(10) NOT NULL,
  PRIMARY KEY (FEATUREPROP_PUB_ID),
  CONSTRAINT u_FEATUREPROP_PUB_U_FEATUREPRO UNIQUE (FEATUREPROP_ID, PUB_ID)
);

--
-- Table: FEATURERANGE
--;

CREATE SEQUENCE sq_FEATURERANGE_FEATURERANGE_I;

CREATE TABLE FEATURERANGE (
  FEATURERANGE_ID number(11) NOT NULL,
  FEATUREMAP_ID number(10) NOT NULL,
  FEATURE_ID number(10) NOT NULL,
  LEFTSTARTF_ID number(10) NOT NULL,
  LEFTENDF_ID number(10),
  RIGHTSTARTF_ID number(10),
  RIGHTENDF_ID number(10) NOT NULL,
  RANGESTR varchar2(255),
  PRIMARY KEY (FEATURERANGE_ID)
);

--
-- Table: FEATURE_CVTERM
--;

CREATE SEQUENCE sq_FEATURE_CVTERM_FEATURE_CVTE;

CREATE TABLE FEATURE_CVTERM (
  FEATURE_CVTERM_ID number(11) NOT NULL,
  FEATURE_ID number(10) NOT NULL,
  CVTERM_ID number(10) NOT NULL,
  PUB_ID number(10) NOT NULL,
  IS_NOT number(38) DEFAULT '1' NOT NULL,
  TIMECREATED date DEFAULT SYSDATE,
  TIMELASTMODIFIED date DEFAULT SYSDATE,
  CREATED_BY varchar2(20) DEFAULT 'USER',
  MODIFIED_BY varchar2(20) DEFAULT 'USER',
  PRIMARY KEY (FEATURE_CVTERM_ID),
  CONSTRAINT u_FEATURE_CVTERM_U_FEATURE_CVT UNIQUE (FEATURE_ID, CVTERM_ID, PUB_ID)
);

--
-- Table: FEATURE_CVTERMPROP
--;

CREATE SEQUENCE sq_FEATURE_CVTERMPROP_FEATURE_;

CREATE TABLE FEATURE_CVTERMPROP (
  FEATURE_CVTERMPROP_ID number(11) NOT NULL,
  FEATURE_CVTERM_ID number(10) NOT NULL,
  TYPE_ID number(10) NOT NULL,
  VALUE clob DEFAULT NULL,
  RANK number(10) DEFAULT '1' NOT NULL,
  PRIMARY KEY (FEATURE_CVTERMPROP_ID),
  CONSTRAINT u_FEATURE_CVTERMPROP_U_FEATURE UNIQUE (FEATURE_CVTERM_ID, TYPE_ID, RANK)
);

--
-- Table: FEATURE_CVTERM_DBXREF
--;

CREATE SEQUENCE sq_FEATURE_CVTERM_DBXREF_FEATU;

CREATE TABLE FEATURE_CVTERM_DBXREF (
  FEATURE_CVTERM_DBXREF_ID number(38) NOT NULL,
  FEATURE_CVTERM_ID number(38) NOT NULL,
  DBXREF_ID number(38) NOT NULL,
  PRIMARY KEY (FEATURE_CVTERM_DBXREF_ID),
  CONSTRAINT u_FEATURE_CVTERM_DBXREF_U_FEAT UNIQUE (FEATURE_CVTERM_ID, DBXREF_ID)
);

--
-- Table: FEATURE_CVTERM_PUB
--;

CREATE SEQUENCE sq_FEATURE_CVTERM_PUB_FEATURE_;

CREATE TABLE FEATURE_CVTERM_PUB (
  FEATURE_CVTERM_PUB_ID number(38) NOT NULL,
  FEATURE_CVTERM_ID number(38) NOT NULL,
  PUB_ID number(38) NOT NULL,
  PRIMARY KEY (FEATURE_CVTERM_PUB_ID),
  CONSTRAINT u_FEATURE_CVTERM_PUB_U_FEATURE UNIQUE (FEATURE_CVTERM_ID, PUB_ID)
);

--
-- Table: FEATURE_DBXREF
--;

CREATE SEQUENCE sq_FEATURE_DBXREF_FEATURE_DBXR;

CREATE TABLE FEATURE_DBXREF (
  FEATURE_DBXREF_ID number(11) NOT NULL,
  FEATURE_ID number(10) NOT NULL,
  DBXREF_ID number(10) NOT NULL,
  IS_CURRENT number(38) DEFAULT '1' NOT NULL,
  PRIMARY KEY (FEATURE_DBXREF_ID),
  CONSTRAINT u_FEATURE_DBXREF_U_FEATURE_DBX UNIQUE (FEATURE_ID, DBXREF_ID)
);

--
-- Table: FEATURE_EXPRESSION
--;

CREATE SEQUENCE sq_FEATURE_EXPRESSION_FEATURE_;

CREATE TABLE FEATURE_EXPRESSION (
  FEATURE_EXPRESSION_ID number(11) NOT NULL,
  EXPRESSION_ID number(10) NOT NULL,
  FEATURE_ID number(10) NOT NULL,
  PRIMARY KEY (FEATURE_EXPRESSION_ID),
  CONSTRAINT u_FEATURE_EXPRESSION_U_FEATURE UNIQUE (EXPRESSION_ID, FEATURE_ID)
);

--
-- Table: FEATURE_GENOTYPE
--;

CREATE SEQUENCE sq_FEATURE_GENOTYPE_FEATURE_GE;

CREATE TABLE FEATURE_GENOTYPE (
  FEATURE_GENOTYPE_ID number(11) NOT NULL,
  FEATURE_ID number(10) NOT NULL,
  GENOTYPE_ID number(10) NOT NULL,
  CHROMOSOME_ID number(10),
  RANK number(10),
  CGROUP number(10),
  CVTERM_ID number(10),
  PRIMARY KEY (FEATURE_GENOTYPE_ID),
  CONSTRAINT u_FEATURE_GENOTYPE_U_FEATURE_G UNIQUE (FEATURE_ID, GENOTYPE_ID, CVTERM_ID)
);

--
-- Table: FEATURE_PHENOTYPE
--;

CREATE SEQUENCE sq_FEATURE_PHENOTYPE_FEATURE_P;

CREATE TABLE FEATURE_PHENOTYPE (
  FEATURE_PHENOTYPE_ID number(11) NOT NULL,
  FEATURE_ID number(10) NOT NULL,
  PHENOTYPE_ID number(10) NOT NULL,
  TYPE_ID number(10) NOT NULL,
  TIMECREATED date DEFAULT SYSDATE,
  TIMELASTMODIFIED date DEFAULT SYSDATE,
  CREATED_BY varchar2(20) DEFAULT 'USER',
  MODIFIED_BY varchar2(20) DEFAULT 'USER',
  PRIMARY KEY (FEATURE_PHENOTYPE_ID),
  CONSTRAINT u_FEATURE_PHENOTYPE_U_FEATURE_ UNIQUE (FEATURE_ID, PHENOTYPE_ID, TYPE_ID)
);

--
-- Table: FEATURE_PUB
--;

CREATE SEQUENCE sq_FEATURE_PUB_FEATURE_PUB_ID;

CREATE TABLE FEATURE_PUB (
  FEATURE_PUB_ID number(11) NOT NULL,
  FEATURE_ID number(10) NOT NULL,
  PUB_ID number(10) NOT NULL,
  PRIMARY KEY (FEATURE_PUB_ID),
  CONSTRAINT u_FEATURE_PUB_U_FEATURE_PUB UNIQUE (FEATURE_ID, PUB_ID)
);

--
-- Table: FEATURE_RELATIONSHIP
--;

CREATE SEQUENCE sq_FEATURE_RELATIONSHIP_FEATUR;

CREATE TABLE FEATURE_RELATIONSHIP (
  FEATURE_RELATIONSHIP_ID number(11) NOT NULL,
  SUBJECT_ID number(10) NOT NULL,
  OBJECT_ID number(10) NOT NULL,
  TYPE_ID number(10) NOT NULL,
  VALUE clob DEFAULT NULL,
  RANK number(10) DEFAULT '1' NOT NULL,
  PRIMARY KEY (FEATURE_RELATIONSHIP_ID),
  CONSTRAINT u_FEATURE_RELATIONSHIP_U_FEATU UNIQUE (SUBJECT_ID, OBJECT_ID, TYPE_ID, RANK)
);

--
-- Table: FEATURE_RELATIONSHIPPROP
--;

CREATE SEQUENCE sq_FEATURE_RELATIONSHIPPROP_FE;

CREATE TABLE FEATURE_RELATIONSHIPPROP (
  FEATURE_RELATIONSHIPPROP_ID number(11) NOT NULL,
  FEATURE_RELATIONSHIP_ID number(10) NOT NULL,
  TYPE_ID number(10) NOT NULL,
  VALUE clob DEFAULT NULL,
  RANK number(10) DEFAULT '1' NOT NULL,
  PRIMARY KEY (FEATURE_RELATIONSHIPPROP_ID),
  CONSTRAINT u_FEATURE_RELATIONSHIPPROP_U_F UNIQUE (FEATURE_RELATIONSHIP_ID, TYPE_ID, RANK)
);

--
-- Table: FEATURE_RELATIONSHIPPROP_PUB
--;

CREATE SEQUENCE sq_FEATURE_RELATIONSHIPPROP_PU;

CREATE TABLE FEATURE_RELATIONSHIPPROP_PUB (
  FEATURE_RELATIONSHIPPROP_PUB_I number(11) NOT NULL,
  FEATURE_RELATIONSHIPPROP_ID number(10) NOT NULL,
  PUB_ID number(10) NOT NULL,
  PRIMARY KEY (FEATURE_RELATIONSHIPPROP_PUB_I),
  CONSTRAINT u_FEATURE_RELATIONSHIPPROP_PUB UNIQUE (FEATURE_RELATIONSHIPPROP_ID, PUB_ID)
);

--
-- Table: FEATURE_RELATIONSHIP_PUB
--;

CREATE SEQUENCE sq_FEATURE_RELATIONSHIP_PUB_FE;

CREATE TABLE FEATURE_RELATIONSHIP_PUB (
  FEATURE_RELATIONSHIP_PUB_ID number(11) NOT NULL,
  FEATURE_RELATIONSHIP_ID number(10) NOT NULL,
  PUB_ID number(10) NOT NULL,
  PRIMARY KEY (FEATURE_RELATIONSHIP_PUB_ID),
  CONSTRAINT u_FEATURE_RELATIONSHIP_PUB_U_F UNIQUE (FEATURE_RELATIONSHIP_ID, PUB_ID)
);

--
-- Table: FEATURE_SYNONYM
--;

CREATE SEQUENCE sq_FEATURE_SYNONYM_FEATURE_SYN;

CREATE TABLE FEATURE_SYNONYM (
  FEATURE_SYNONYM_ID number(11) NOT NULL,
  SYNONYM_ID number(10) NOT NULL,
  FEATURE_ID number(10) NOT NULL,
  PUB_ID number(10) NOT NULL,
  IS_CURRENT number(38) DEFAULT '1' NOT NULL,
  IS_INTERNAL number(38) DEFAULT '1' NOT NULL,
  PRIMARY KEY (FEATURE_SYNONYM_ID),
  CONSTRAINT u_FEATURE_SYNONYM_U_FEATURE_SY UNIQUE (SYNONYM_ID, FEATURE_ID, PUB_ID)
);

--
-- Table: GENOTYPE
--;

CREATE SEQUENCE sq_GENOTYPE_GENOTYPE_ID;

CREATE TABLE GENOTYPE (
  GENOTYPE_ID number(11) NOT NULL,
  UNIQUENAME varchar2(4000) NOT NULL,
  DESCRIPTION varchar2(255),
  PRIMARY KEY (GENOTYPE_ID),
  CONSTRAINT u_GENOTYPE_U_GENOTYPE UNIQUE (UNIQUENAME)
);

--
-- Table: LOCAL_LOAD_BLASTHIT
--;

CREATE TABLE LOCAL_LOAD_BLASTHIT (
  ORGANISM_ID number(10),
  TYPE_ID number(10),
  FMIN number(10),
  FMAX number(10),
  STRAND number(5),
  OBJECT_ID number(10),
  FR_TYPE_ID number(10),
  SRCFEATURE_NAME varchar2(5)
);

--
-- Table: LOCAL_LOAD_DBXREFS
--;

CREATE TABLE LOCAL_LOAD_DBXREFS (
  FEATURE_ID number(10) NOT NULL,
  EXTERNAL_ID varchar2(255) NOT NULL,
  EXTERNAL_DB varchar2(255) NOT NULL
);

--
-- Table: MAGEDOCUMENTATION
--;

CREATE SEQUENCE sq_MAGEDOCUMENTATION_MAGEDOCUM;

CREATE TABLE MAGEDOCUMENTATION (
  MAGEDOCUMENTATION_ID number(11) NOT NULL,
  MAGEML_ID number(10) NOT NULL,
  TABLEINFO_ID number(10) NOT NULL,
  ROW_ID number(10) NOT NULL,
  MAGEIDENTIFIER clob NOT NULL,
  PRIMARY KEY (MAGEDOCUMENTATION_ID)
);

--
-- Table: MAGEML
--;

CREATE SEQUENCE sq_MAGEML_MAGEML_ID;

CREATE TABLE MAGEML (
  MAGEML_ID number(11) NOT NULL,
  MAGE_PACKAGE clob NOT NULL,
  MAGE_ML clob NOT NULL,
  PRIMARY KEY (MAGEML_ID)
);

--
-- Table: MV_GENE_DESCRIPTION
--;

CREATE TABLE MV_GENE_DESCRIPTION (
  FEATUREPROP_ID number(11) NOT NULL,
  FEATURE_ID number(10) NOT NULL,
  NAME varchar2(255),
  DESCRIPTION clob
);

--
-- Table: ORGANISM
--;

CREATE SEQUENCE sq_ORGANISM_ORGANISM_ID;

CREATE TABLE ORGANISM (
  ORGANISM_ID number(11) NOT NULL,
  ABBREVIATION varchar2(255) DEFAULT NULL,
  GENUS varchar2(255) NOT NULL,
  SPECIES varchar2(255) NOT NULL,
  COMMON_NAME varchar2(255) DEFAULT NULL,
  COMMENT_ clob DEFAULT NULL,
  PRIMARY KEY (ORGANISM_ID),
  CONSTRAINT u_ORGANISM_U_ORGANISM UNIQUE (GENUS, SPECIES)
);

--
-- Table: ORGANISMPROP
--;

CREATE SEQUENCE sq_ORGANISMPROP_ORGANISMPROP_I;

CREATE TABLE ORGANISMPROP (
  ORGANISMPROP_ID number(11) NOT NULL,
  ORGANISM_ID number(10) NOT NULL,
  TYPE_ID number(10) NOT NULL,
  VALUE clob DEFAULT NULL,
  RANK number(10) DEFAULT '1' NOT NULL,
  PRIMARY KEY (ORGANISMPROP_ID),
  CONSTRAINT u_ORGANISMPROP_U_ORGANISMPROP UNIQUE (ORGANISM_ID, TYPE_ID, RANK)
);

--
-- Table: ORGANISM_DBXREF
--;

CREATE SEQUENCE sq_ORGANISM_DBXREF_ORGANISM_DB;

CREATE TABLE ORGANISM_DBXREF (
  ORGANISM_DBXREF_ID number(11) NOT NULL,
  ORGANISM_ID number(10) NOT NULL,
  DBXREF_ID number(10) NOT NULL,
  PRIMARY KEY (ORGANISM_DBXREF_ID),
  CONSTRAINT u_ORGANISM_DBXREF_U_ORGANISM_D UNIQUE (ORGANISM_ID, DBXREF_ID)
);

--
-- Table: PHENDESC
--;

CREATE SEQUENCE sq_PHENDESC_PHENDESC_ID;

CREATE TABLE PHENDESC (
  PHENDESC_ID number(11) NOT NULL,
  GENOTYPE_ID number(10) NOT NULL,
  ENVIRONMENT_ID number(10) NOT NULL,
  DESCRIPTION clob NOT NULL,
  PUB_ID number(10) NOT NULL,
  PRIMARY KEY (PHENDESC_ID),
  CONSTRAINT u_PHENDESC_U_PHENDESC UNIQUE (GENOTYPE_ID, ENVIRONMENT_ID, PUB_ID)
);

--
-- Table: PHENOTYPE
--;

CREATE SEQUENCE sq_PHENOTYPE_PHENOTYPE_ID;

CREATE TABLE PHENOTYPE (
  PHENOTYPE_ID number(11) NOT NULL,
  UNIQUENAME varchar2(4000),
  OBSERVABLE_ID number(10),
  ATTR_ID number(10),
  VALUE clob,
  CVALUE_ID number(10),
  ASSAY_ID number(10),
  TIMECREATED date DEFAULT SYSDATE,
  TIMELASTMODIFIED date DEFAULT SYSDATE,
  CREATED_BY varchar2(20) DEFAULT 'USER',
  MODIFIED_BY varchar2(20) DEFAULT 'USER',
  PRIMARY KEY (PHENOTYPE_ID),
  CONSTRAINT u_PHENOTYPE_U_PHENOTYPE UNIQUE (UNIQUENAME)
);

--
-- Table: PHENOTYPE_COMPARISON
--;

CREATE SEQUENCE sq_PHENOTYPE_COMPARISON_PHENOT;

CREATE TABLE PHENOTYPE_COMPARISON (
  PHENOTYPE_COMPARISON_ID number(11) NOT NULL,
  GENOTYPE1_ID number(10) NOT NULL,
  ENVIRONMENT1_ID number(10) NOT NULL,
  GENOTYPE2_ID number(10) NOT NULL,
  ENVIRONMENT2_ID number(10) NOT NULL,
  PHENOTYPE1_ID number(10) NOT NULL,
  PHENOTYPE2_ID number(10),
  TYPE_ID number(10) NOT NULL,
  PUB_ID number(10) NOT NULL,
  PRIMARY KEY (PHENOTYPE_COMPARISON_ID),
  CONSTRAINT u_PHENOTYPE_COMPARISON_U_PHENO UNIQUE (GENOTYPE1_ID, ENVIRONMENT1_ID, GENOTYPE2_ID, ENVIRONMENT2_ID, PHENOTYPE1_ID, TYPE_ID, PUB_ID)
);

--
-- Table: PHENOTYPE_CVTERM
--;

CREATE SEQUENCE sq_PHENOTYPE_CVTERM_PHENOTYPE_;

CREATE TABLE PHENOTYPE_CVTERM (
  PHENOTYPE_CVTERM_ID number(11) NOT NULL,
  PHENOTYPE_ID number(10) NOT NULL,
  CVTERM_ID number(10) NOT NULL,
  PRIMARY KEY (PHENOTYPE_CVTERM_ID),
  CONSTRAINT u_PHENOTYPE_CVTERM_U_PHENOTYPE UNIQUE (PHENOTYPE_ID, CVTERM_ID)
);

--
-- Table: PHENSTATEMENT
--;

CREATE SEQUENCE sq_PHENSTATEMENT_PHENSTATEMENT;

CREATE TABLE PHENSTATEMENT (
  PHENSTATEMENT_ID number(11) NOT NULL,
  GENOTYPE_ID number(10) NOT NULL,
  ENVIRONMENT_ID number(10),
  PHENOTYPE_ID number(10) NOT NULL,
  TYPE_ID number(10),
  PUB_ID number(10),
  PRIMARY KEY (PHENSTATEMENT_ID),
  CONSTRAINT u_PHENSTATEMENT_U_PHENSTATEMEN UNIQUE (GENOTYPE_ID, PHENOTYPE_ID, ENVIRONMENT_ID, TYPE_ID, PUB_ID)
);

--
-- Table: PROJECT
--;

CREATE SEQUENCE sq_PROJECT_PROJECT_ID;

CREATE TABLE PROJECT (
  PROJECT_ID number(11) NOT NULL,
  NAME varchar2(255) NOT NULL,
  DESCRIPTION varchar2(255) NOT NULL,
  PRIMARY KEY (PROJECT_ID),
  CONSTRAINT u_PROJECT_U_PROJECT UNIQUE (NAME)
);

--
-- Table: PROTOCOL
--;

CREATE SEQUENCE sq_PROTOCOL_PROTOCOL_ID;

CREATE TABLE PROTOCOL (
  PROTOCOL_ID number(11) NOT NULL,
  TYPE_ID number(10) NOT NULL,
  PUB_ID number(10) DEFAULT NULL,
  DBXREF_ID number(10) DEFAULT NULL,
  NAME varchar2(4000) NOT NULL,
  URI clob DEFAULT NULL,
  PROTOCOLDESCRIPTION clob DEFAULT NULL,
  HARDWAREDESCRIPTION clob DEFAULT NULL,
  SOFTWAREDESCRIPTION clob DEFAULT NULL,
  PRIMARY KEY (PROTOCOL_ID),
  CONSTRAINT u_PROTOCOL_U_PROTOCOL UNIQUE (NAME)
);

--
-- Table: PROTOCOLPARAM
--;

CREATE SEQUENCE sq_PROTOCOLPARAM_PROTOCOLPARAM;

CREATE TABLE PROTOCOLPARAM (
  PROTOCOLPARAM_ID number(11) NOT NULL,
  PROTOCOL_ID number(10) NOT NULL,
  NAME clob NOT NULL,
  DATATYPE_ID number(10) DEFAULT NULL,
  UNITTYPE_ID number(10) DEFAULT NULL,
  VALUE clob DEFAULT NULL,
  RANK number(10) DEFAULT '1' NOT NULL,
  PRIMARY KEY (PROTOCOLPARAM_ID)
);

--
-- Table: PUB
--;

CREATE SEQUENCE sq_PUB_PUB_ID;

CREATE TABLE PUB (
  PUB_ID number(11) NOT NULL,
  TITLE clob,
  VOLUMETITLE clob,
  VOLUME varchar2(255),
  SERIES_NAME varchar2(255),
  ISSUE varchar2(255),
  PYEAR varchar2(255),
  PAGES varchar2(255),
  MINIREF varchar2(255),
  UNIQUENAME varchar2(4000) NOT NULL,
  TYPE_ID number(10) NOT NULL,
  IS_OBSOLETE number(38) DEFAULT '1',
  PUBLISHER varchar2(255),
  PUBPLACE varchar2(255),
  PRIMARY KEY (PUB_ID),
  CONSTRAINT u_PUB_U_PUB UNIQUE (UNIQUENAME, TYPE_ID)
);

--
-- Table: PUBPROP
--;

CREATE SEQUENCE sq_PUBPROP_PUBPROP_ID;

CREATE TABLE PUBPROP (
  PUBPROP_ID number(11) NOT NULL,
  PUB_ID number(10) NOT NULL,
  TYPE_ID number(10) NOT NULL,
  VALUE varchar2(4000) NOT NULL,
  RANK number(10),
  PRIMARY KEY (PUBPROP_ID),
  CONSTRAINT u_PUBPROP_U_PUBPROP UNIQUE (PUB_ID, TYPE_ID, VALUE)
);

--
-- Table: PUB_AUTHOR
--;

CREATE SEQUENCE sq_PUB_AUTHOR_PUB_AUTHOR_ID;

CREATE TABLE PUB_AUTHOR (
  PUB_AUTHOR_ID number(11) NOT NULL,
  AUTHOR_ID number(10) NOT NULL,
  PUB_ID number(10) NOT NULL,
  RANK number(10) NOT NULL,
  EDITOR number(38) DEFAULT '1',
  PRIMARY KEY (PUB_AUTHOR_ID),
  CONSTRAINT u_PUB_AUTHOR_U_PUB_AUTHOR UNIQUE (AUTHOR_ID, PUB_ID)
);

--
-- Table: PUB_DBXREF
--;

CREATE SEQUENCE sq_PUB_DBXREF_PUB_DBXREF_ID;

CREATE TABLE PUB_DBXREF (
  PUB_DBXREF_ID number(11) NOT NULL,
  PUB_ID number(10) NOT NULL,
  DBXREF_ID number(10) NOT NULL,
  PRIMARY KEY (PUB_DBXREF_ID),
  CONSTRAINT u_PUB_DBXREF_U_PUB_DBXREF UNIQUE (PUB_ID, DBXREF_ID)
);

--
-- Table: PUB_RELATIONSHIP
--;

CREATE SEQUENCE sq_PUB_RELATIONSHIP_PUB_RELATI;

CREATE TABLE PUB_RELATIONSHIP (
  PUB_RELATIONSHIP_ID number(11) NOT NULL,
  SUBJECT_ID number(10) NOT NULL,
  OBJECT_ID number(10) NOT NULL,
  TYPE_ID number(10) NOT NULL,
  PRIMARY KEY (PUB_RELATIONSHIP_ID),
  CONSTRAINT u_PUB_RELATIONSHIP_U_PUB_RELAT UNIQUE (SUBJECT_ID, OBJECT_ID, TYPE_ID)
);

--
-- Table: QUANTIFICATION
--;

CREATE SEQUENCE sq_QUANTIFICATION_QUANTIFICATI;

CREATE TABLE QUANTIFICATION (
  QUANTIFICATION_ID number(11) NOT NULL,
  ACQUISITION_ID number(10) NOT NULL,
  OPERATOR_ID number(10) DEFAULT NULL,
  PROTOCOL_ID number(10) DEFAULT NULL,
  ANALYSIS_ID number(10) NOT NULL,
  QUANTIFICATIONDATE date DEFAULT SYSDATE,
  NAME varchar2(4000) DEFAULT NULL,
  URI clob DEFAULT NULL,
  PRIMARY KEY (QUANTIFICATION_ID),
  CONSTRAINT u_QUANTIFICATION_U_QUANTIFICAT UNIQUE (NAME, ANALYSIS_ID)
);

--
-- Table: QUANTIFICATIONPROP
--;

CREATE SEQUENCE sq_QUANTIFICATIONPROP_QUANTIFI;

CREATE TABLE QUANTIFICATIONPROP (
  QUANTIFICATIONPROP_ID number(11) NOT NULL,
  QUANTIFICATION_ID number(10) NOT NULL,
  TYPE_ID number(10) NOT NULL,
  VALUE clob DEFAULT NULL,
  RANK number(10) DEFAULT '1' NOT NULL,
  PRIMARY KEY (QUANTIFICATIONPROP_ID),
  CONSTRAINT u_QUANTIFICATIONPROP_U_QUANTIF UNIQUE (QUANTIFICATION_ID, TYPE_ID, RANK)
);

--
-- Table: QUANTIFICATION_RELATIONSHIP
--;

CREATE SEQUENCE sq_QUANTIFICATION_RELATIONSHIP;

CREATE TABLE QUANTIFICATION_RELATIONSHIP (
  QUANTIFICATION_RELATIONSHIP_ID number(11) NOT NULL,
  SUBJECT_ID number(10) NOT NULL,
  TYPE_ID number(10) NOT NULL,
  OBJECT_ID number(10) NOT NULL,
  PRIMARY KEY (QUANTIFICATION_RELATIONSHIP_ID),
  CONSTRAINT u_QUANTIFICATION_RELATIONSHIP_ UNIQUE (SUBJECT_ID, OBJECT_ID, TYPE_ID)
);

--
-- Table: STUDY
--;

CREATE SEQUENCE sq_STUDY_STUDY_ID;

CREATE TABLE STUDY (
  STUDY_ID number(11) NOT NULL,
  CONTACT_ID number(10) NOT NULL,
  PUB_ID number(10) DEFAULT NULL,
  DBXREF_ID number(10) DEFAULT NULL,
  NAME varchar2(4000) NOT NULL,
  DESCRIPTION clob DEFAULT NULL,
  PRIMARY KEY (STUDY_ID),
  CONSTRAINT u_STUDY_U_STUDY UNIQUE (NAME)
);

--
-- Table: STUDYDESIGN
--;

CREATE SEQUENCE sq_STUDYDESIGN_STUDYDESIGN_ID;

CREATE TABLE STUDYDESIGN (
  STUDYDESIGN_ID number(11) NOT NULL,
  STUDY_ID number(10) NOT NULL,
  DESCRIPTION clob DEFAULT NULL,
  PRIMARY KEY (STUDYDESIGN_ID)
);

--
-- Table: STUDYDESIGNPROP
--;

CREATE SEQUENCE sq_STUDYDESIGNPROP_STUDYDESIGN;

CREATE TABLE STUDYDESIGNPROP (
  STUDYDESIGNPROP_ID number(11) NOT NULL,
  STUDYDESIGN_ID number(10) NOT NULL,
  TYPE_ID number(10) NOT NULL,
  VALUE clob DEFAULT NULL,
  RANK number(10) DEFAULT '1' NOT NULL,
  PRIMARY KEY (STUDYDESIGNPROP_ID),
  CONSTRAINT u_STUDYDESIGNPROP_U_STUDYDESIG UNIQUE (STUDYDESIGN_ID, TYPE_ID, RANK)
);

--
-- Table: STUDYFACTOR
--;

CREATE SEQUENCE sq_STUDYFACTOR_STUDYFACTOR_ID;

CREATE TABLE STUDYFACTOR (
  STUDYFACTOR_ID number(11) NOT NULL,
  STUDYDESIGN_ID number(10) NOT NULL,
  TYPE_ID number(10) DEFAULT NULL,
  NAME clob NOT NULL,
  DESCRIPTION clob DEFAULT NULL,
  PRIMARY KEY (STUDYFACTOR_ID)
);

--
-- Table: STUDYFACTORVALUE
--;

CREATE SEQUENCE sq_STUDYFACTORVALUE_STUDYFACTO;

CREATE TABLE STUDYFACTORVALUE (
  STUDYFACTORVALUE_ID number(11) NOT NULL,
  STUDYFACTOR_ID number(10) NOT NULL,
  ASSAY_ID number(10) NOT NULL,
  FACTORVALUE clob DEFAULT NULL,
  NAME clob DEFAULT NULL,
  RANK number(10) DEFAULT '1' NOT NULL,
  PRIMARY KEY (STUDYFACTORVALUE_ID)
);

--
-- Table: STUDY_ASSAY
--;

CREATE SEQUENCE sq_STUDY_ASSAY_STUDY_ASSAY_ID;

CREATE TABLE STUDY_ASSAY (
  STUDY_ASSAY_ID number(11) NOT NULL,
  STUDY_ID number(10) NOT NULL,
  ASSAY_ID number(10) NOT NULL,
  PRIMARY KEY (STUDY_ASSAY_ID),
  CONSTRAINT u_STUDY_ASSAY_U_STUDY_ASSAY UNIQUE (STUDY_ID, ASSAY_ID)
);

--
-- Table: SYNONYM_
--;

CREATE SEQUENCE sq_SYNONYM__SYNONYM_ID;

CREATE TABLE SYNONYM_ (
  SYNONYM_ID number(11) NOT NULL,
  NAME varchar2(255) NOT NULL,
  TYPE_ID number(10) NOT NULL,
  SYNONYM_SGML varchar2(255) NOT NULL,
  PRIMARY KEY (SYNONYM_ID),
  CONSTRAINT u_SYNONYM__U_SYNONYM UNIQUE (NAME, TYPE_ID)
);

--
-- Table: TABLEINFO
--;

CREATE SEQUENCE sq_TABLEINFO_TABLEINFO_ID;

CREATE TABLE TABLEINFO (
  TABLEINFO_ID number(11) NOT NULL,
  NAME varchar2(30) NOT NULL,
  PRIMARY_KEY_COLUMN varchar2(30) DEFAULT NULL,
  IS_VIEW number(10) DEFAULT '1' NOT NULL,
  VIEW_ON_TABLE_ID number(10) DEFAULT NULL,
  SUPERCLASS_TABLE_ID number(10) DEFAULT NULL,
  IS_UPDATEABLE number(10) DEFAULT '1' NOT NULL,
  MODIFICATION_DATE date DEFAULT 'SYSDATE ' NOT NULL,
  PRIMARY KEY (TABLEINFO_ID),
  CONSTRAINT u_TABLEINFO_U_TABLEINFO UNIQUE (NAME)
);

--
-- Table: TREATMENT
--;

CREATE SEQUENCE sq_TREATMENT_TREATMENT_ID;

CREATE TABLE TREATMENT (
  TREATMENT_ID number(11) NOT NULL,
  RANK number(10) DEFAULT '1' NOT NULL,
  BIOMATERIAL_ID number(10) NOT NULL,
  TYPE_ID number(10) NOT NULL,
  PROTOCOL_ID number(10) DEFAULT NULL,
  NAME clob DEFAULT NULL,
  PRIMARY KEY (TREATMENT_ID)
);

CREATE VIEW V_VERIFIED_GENE_FEATURES AS
(
       SELECT F."FEATURE_ID",F."DBXREF_ID",F."ORGANISM_ID",F."NAME",F."UNIQUENAME",F."RESIDUES",F."SEQLEN",F."MD5CHECKSUM",F."TYPE_ID",F."IS_ANALYSIS",F."TIMEACCESSIONED",F."TIMELASTMODIFIED",F."CREATED_BY",F."MODIFIED_BY",F."IS_DELETED"
         FROM V_NOTDELETED_FEATURE F, CVTERM C, FEATURE_DBXREF FX, DBXREF X, DB D
        WHERE F.TYPE_ID = C.CVTERM_ID
          AND F.FEATURE_ID = FX.FEATURE_ID
          AND X.DBXREF_ID = FX.DBXREF_ID
          AND D.DB_ID = X.DB_ID
	  AND C.NAME = 'mRNA'
          AND D.NAME = 'GFF_source'
	  AND X.ACCESSION = 'dictyBase Curator'
 );

CREATE VIEW V_GENE_PREDICTION_FEATURES AS
(
       SELECT F."FEATURE_ID",F."DBXREF_ID",F."ORGANISM_ID",F."NAME",F."UNIQUENAME",F."RESIDUES",F."SEQLEN",F."MD5CHECKSUM",F."TYPE_ID",F."IS_ANALYSIS",F."TIMEACCESSIONED",F."TIMELASTMODIFIED",F."CREATED_BY",F."MODIFIED_BY",F."IS_DELETED"
         FROM V_NOTDELETED_FEATURE F, CVTERM C, FEATURE_DBXREF FX, DBXREF X, DB D
        WHERE F.TYPE_ID = C.CVTERM_ID
          AND F.FEATURE_ID = FX.FEATURE_ID
          AND X.DBXREF_ID = FX.DBXREF_ID
          AND D.DB_ID = X.DB_ID
          AND C.NAME = 'mRNA'
          AND D.NAME = 'GFF_source'
          AND X.ACCESSION = 'Sequencing Center'
);

CREATE VIEW V_GENE_FEATURES AS
(
       SELECT F."FEATURE_ID",F."DBXREF_ID",F."ORGANISM_ID",F."NAME",F."UNIQUENAME",F."RESIDUES",F."SEQLEN",F."MD5CHECKSUM",F."TYPE_ID",F."IS_ANALYSIS",F."TIMEACCESSIONED",F."TIMELASTMODIFIED",F."CREATED_BY",F."MODIFIED_BY",F."IS_DELETED"
         FROM V_NOTDELETED_FEATURE F, CVTERM C
        WHERE F.TYPE_ID = C.CVTERM_ID
          AND C.NAME = 'gene'
 );

CREATE VIEW V_CHROMOSOME_FEATURES AS
(
       SELECT F.* FROM V_NOTDELETED_FEATURE F
   INNER JOIN CVTERM C
	       ON F.TYPE_ID = C.CVTERM_ID
	     WHERE C.NAME = 'chromosome'
 );

CREATE VIEW V_CONTIG_FEATURES AS
(
       SELECT F.* FROM V_NOTDELETED_FEATURE F
   INNER JOIN CVTERM C
	       ON F.TYPE_ID = C.CVTERM_ID
	     WHERE C.NAME = 'contig'
 );

CREATE VIEW V_GAP_FEATURES AS
(
       SELECT F.* FROM V_NOTDELETED_FEATURE F
   INNER JOIN CVTERM C
	       ON F.TYPE_ID = C.CVTERM_ID
	     WHERE C.NAME = 'gap'
 );

CREATE VIEW V_CDNA_FEATURES AS
(
       SELECT F.* FROM V_NOTDELETED_FEATURE F
   INNER JOIN CVTERM C
	       ON F.TYPE_ID = C.CVTERM_ID
	     WHERE C.NAME = 'cDNA_clone'
 );

CREATE VIEW V_GENOMIC_FRAGMENT_FEATURES AS
(
       SELECT F.* FROM V_NOTDELETED_FEATURE F
   INNER JOIN CVTERM C
	       ON F.TYPE_ID = C.CVTERM_ID
	     WHERE C.NAME = 'databank_entry'
 );

CREATE VIEW V_GENBANK_FEATURES AS
(
           SELECT F."FEATURE_ID",F."DBXREF_ID",F."ORGANISM_ID",F."NAME",F."UNIQUENAME",F."RESIDUES",F."SEQLEN",F."MD5CHECKSUM",F."TYPE_ID",F."IS_ANALYSIS",F."TIMEACCESSIONED",F."TIMELASTMODIFIED",F."CREATED_BY",F."MODIFIED_BY",F."IS_DELETED"
             FROM V_NOTDELETED_FEATURE F, CVTERM C
	     WHERE F.TYPE_ID = C.CVTERM_ID
               AND C.NAME IN ( 'cDNA_clone', 'databank_entry' )
 );

CREATE VIEW V_EST_FEATURES AS
(
       SELECT F.* FROM V_NOTDELETED_FEATURE F
   INNER JOIN CVTERM C
	       ON F.TYPE_ID = C.CVTERM_ID
	     WHERE C.NAME = 'EST'
 );

CREATE VIEW V_MRNA_FEATURES AS
(
       SELECT F.* FROM V_NOTDELETED_FEATURE F
   INNER JOIN CVTERM C
	       ON F.TYPE_ID = C.CVTERM_ID
	     WHERE C.NAME = 'mRNA'
 );

CREATE VIEW V_BLASTHIT_FEATURES AS
(
       SELECT F.* FROM V_NOTDELETED_FEATURE F
   INNER JOIN CVTERM C
	       ON F.TYPE_ID = C.CVTERM_ID
	     WHERE C.NAME = 'nucleotide_match'
 );

CREATE VIEW V_GENE_PREDICTION_FEATURES_OLD AS
(
       SELECT F.* FROM V_NOTDELETED_FEATURE F
   INNER JOIN CVTERM C
	       ON F.TYPE_ID = C.CVTERM_ID
    INNER JOIN FEATURE_DBXREF FX
            ON F.FEATURE_ID = FX.FEATURE_ID
	INNER JOIN DBXREF X
	        ON X.DBXREF_ID = FX.DBXREF_ID
    INNER JOIN DB D
            ON D.DB_ID = X.DB_ID
	     WHERE C.NAME = 'mRNA'
           AND D.NAME = 'GFF_source'
		   AND X.ACCESSION = 'Sequencing Center'
 );

CREATE VIEW V_GENE_FEATURES_OLD AS
(
       SELECT F.* FROM V_NOTDELETED_FEATURE F
   INNER JOIN CVTERM C
	       ON F.TYPE_ID = C.CVTERM_ID
	     WHERE C.NAME = 'gene'
 );

CREATE VIEW V_VERIFIED_GENE_FEATURES_OLD AS
(
       SELECT F.* FROM V_NOTDELETED_FEATURE F
   INNER JOIN CVTERM C
	       ON F.TYPE_ID = C.CVTERM_ID
    INNER JOIN FEATURE_DBXREF FX
            ON F.FEATURE_ID = FX.FEATURE_ID
	INNER JOIN DBXREF X
	        ON X.DBXREF_ID = FX.DBXREF_ID
    INNER JOIN DB D
            ON D.DB_ID = X.DB_ID
	     WHERE C.NAME = 'mRNA'
           AND D.NAME = 'GFF_source'
		   AND X.ACCESSION = 'dictyBase Curator'
 );

CREATE VIEW V_GENBANK_FEATURES_OLD AS
(
       SELECT F.* FROM V_NOTDELETED_FEATURE F
   INNER JOIN CVTERM C
	       ON F.TYPE_ID = C.CVTERM_ID
	     WHERE C.NAME IN ( 'cDNA_clone', 'databank_entry' )
 );

CREATE VIEW V_PRIMARY_FEATURE AS
select gb.feature_id, gb.dbxref_id, gb.organism_id, gb.name, gb.uniquename, null as residues, gb.seqlen, gb.md5checksum, gb.type_id, gb.is_analysis, gb.timeaccessioned, gb.timelastmodified, gb.created_by, gb.modified_by, gb.is_deleted
      from v_genbank_features gb
inner join feature_relationship fr
        on gb.feature_id = fr.subject_id
inner join v_gene_features g
        on g.feature_id = fr.object_id
     where not exists(
              select 'a'
			    from v_gene_prediction_features pf
          inner join feature_relationship fr2
                  on pf.feature_id = fr2.subject_id
			  where fr2.object_id = g.feature_id
  )
   and not exists (
              SELECT 'A'
			    from v_verified_gene_features vf
          inner join feature_relationship fr2
                  on vf.feature_id = fr2.subject_id
			  where fr2.object_id = g.feature_id
   )
and not exists (
   select 'a' from V_GENBANK_FEATURES gb2
             inner join feature_relationship fr3
                  on GB2.feature_id = fr3.subject_id
			  where fr3.object_id = g.feature_id
   and GB2.feature_ID > GB.FEATURE_ID
)
   and not exists (
      select 'a'
        from v_genbank_features gb2
  inner join feature_relationship fr2
        on gb2.feature_id = fr2.subject_id
    where fr2.object_id = g.feature_id
      and gb2.feature_id > gb.feature_id
)
union all
select gb.feature_id, gb.dbxref_id, gb.organism_id, gb.name, gb.uniquename, null as residues, gb.seqlen, gb.md5checksum, gb.type_id, gb.is_analysis, gb.timeaccessioned, gb.timelastmodified, gb.created_by, gb.modified_by, gb.is_deleted
      from v_gene_prediction_features gb
inner join feature_relationship fr
        on gb.feature_id = fr.subject_id
inner join v_gene_features g
        on g.feature_id = fr.object_id
     where not exists (
              SELECT 'A'
			    from v_verified_gene_features vf
          inner join feature_relationship fr2
                  on vf.feature_id = fr2.subject_id
			  where fr2.object_id = g.feature_id
   )
 union all
select feature_id, dbxref_id, organism_id, name, uniquename, null as residues, seqlen, md5checksum, type_id, is_analysis, timeaccessioned, timelastmodified, created_by, modified_by, is_deleted
      from v_verified_gene_features;

CREATE VIEW V_GENE_DICTYBASEID AS
SELECT G.FEATURE_ID AS GENE_FEATURE_ID, G.NAME AS GENE_NAME, PF.FEATURE_ID AS PRIMARY_FEATURE_ID, D.ACCESSION AS PRIMARY_FEATURE_DICTYBASEID
      FROM V_GENE_FEATURES G
INNER JOIN FEATURE_RELATIONSHIP FR
        ON FR.OBJECT_ID = G.FEATURE_ID
INNER JOIN CVTERM FRTYPE
        ON FRTYPE.CVTERM_ID = FR.TYPE_ID
       AND FRTYPE.NAME = 'part_of'
INNER JOIN V_PRIMARY_FEATURE PF
        ON PF.FEATURE_ID = FR.SUBJECT_ID
INNER JOIN DBXREF D
        ON PF.DBXREF_ID = D.DBXREF_ID;

CREATE VIEW V_POLYPEPTIDE_FEATURES AS
(
  SELECT F."FEATURE_ID",F."DBXREF_ID",F."ORGANISM_ID",F."NAME",F."UNIQUENAME",F."RESIDUES",F."SEQLEN",F."MD5CHECKSUM",F."TYPE_ID",F."IS_ANALYSIS",F."TIMEACCESSIONED",F."TIMELASTMODIFIED",F."CREATED_BY",F."MODIFIED_BY",F."IS_DELETED"
  FROM V_NOTDELETED_FEATURE F, CVTERM C
  WHERE F.TYPE_ID = C.CVTERM_ID
  AND C.NAME = 'polypeptide'
);

CREATE VIEW V_DOMAIN_FEATURES AS
(
    SELECT domain.feature_id, db.name db, domain.uniquename id, domain.name name
    FROM v_notdeleted_feature domain
    INNER JOIN dbxref on domain.dbxref_id = dbxref.dbxref_id
    INNER JOIN db on dbxref.db_id = db.db_id
    INNER JOIN cvterm on domain.type_id = cvterm.cvterm_id
    where cvterm.name = 'polypeptide_domain'
);

CREATE VIEW V_POLYPEPTIDE_DOMAINS AS
(
    SELECT protein.uniquename polypeptide_id, domain.db db, domain.id id,
           domain.name name, floc.fmin s_start, floc.fmax d_end, analysis.significance d_score,
            featureprop.value status, floc.timelastmodified modified
    FROM v_domain_features domain
    INNER JOIN feature_relationship frel ON domain.feature_id = frel.object_id
    INNER JOIN featureloc floc ON frel.subject_id = floc.feature_id
    INNER JOIN v_polypeptide_features protein ON floc.srcfeature_id = protein.feature_id
    LEFT OUTER JOIN analysisfeature analysis ON domain.feature_id = analysis.feature_id
    LEFT OUTER JOIN featureprop ON domain.feature_id = featureprop.feature_id
);

CREATE VIEW GFFATTS AS
SELECT NULL, NULL, NULL FROM DUAL;

CREATE VIEW V_DELETED_FEATURE AS
(
        SELECT F."FEATURE_ID",F."DBXREF_ID",F."ORGANISM_ID",F."NAME",F."UNIQUENAME",F."RESIDUES",F."SEQLEN",F."MD5CHECKSUM",F."TYPE_ID",F."IS_ANALYSIS",F."TIMEACCESSIONED",F."TIMELASTMODIFIED",F."CREATED_BY",F."MODIFIED_BY",F."IS_DELETED" FROM FEATURE F
        WHERE IS_DELETED = 1
 );

CREATE VIEW V_NOTDELETED_FEATURE AS
(
   SELECT "FEATURE_ID","DBXREF_ID","ORGANISM_ID","NAME","UNIQUENAME","RESIDUES","SEQLEN","MD5CHECKSUM","TYPE_ID","IS_ANALYSIS","TIMEACCESSIONED","TIMELASTMODIFIED","CREATED_BY","MODIFIED_BY","IS_DELETED" FROM FEATURE WHERE IS_DELETED = 0
);

CREATE VIEW V_ALL_GENE_FEATURES AS
(
       SELECT F.* FROM FEATURE F
   INNER JOIN CVTERM C
	       ON F.TYPE_ID = C.CVTERM_ID
	     WHERE C.NAME = 'gene'
 );

CREATE VIEW V_CVTERM_PARENT_CHILD AS
(
    SELECT CV.CV_ID, CV.NAME AS CV_NAME, CVT.CVTERM_ID AS PARENT_ID, CVT.NAME AS PARENT_NAME,  CHILD.NAME AS CHILD_NAME, CHILD.CVTERM_ID AS CHILD_ID
      FROM CVTERM CVT
INNER JOIN CVTERM_RELATIONSHIP CVTR
        ON CVTR.OBJECT_ID = CVT.CVTERM_ID
INNER JOIN CVTERM RELCVT
        ON CVTR.TYPE_ID =RELCVT.CVTERM_ID
       AND RELCVT.NAME = 'IS_A'
INNER JOIN CVTERM CHILD
        ON CHILD.CVTERM_ID = CVTR.SUBJECT_ID
INNER JOIN CV
       ON CV.CV_ID = CVT.CV_ID
);

ALTER TABLE ACQUISITION ADD CONSTRAINT ACQUISITION_CHANNEL_ID_fk FOREIGN KEY (CHANNEL_ID) REFERENCES CHANNEL (CHANNEL_ID) ON DELETE SET NULL;

ALTER TABLE ACQUISITION ADD CONSTRAINT ACQUISITION_PROTOCOL_ID_fk FOREIGN KEY (PROTOCOL_ID) REFERENCES PROTOCOL (PROTOCOL_ID) ON DELETE SET NULL;

ALTER TABLE ACQUISITION ADD CONSTRAINT ACQUISITION_ASSAY_ID_fk FOREIGN KEY (ASSAY_ID) REFERENCES ASSAY (ASSAY_ID) ON DELETE CASCADE;

ALTER TABLE ACQUISITIONPROP ADD CONSTRAINT ACQUISITIONPROP_ACQUISITION_ID FOREIGN KEY (ACQUISITION_ID) REFERENCES ACQUISITION (ACQUISITION_ID) ON DELETE CASCADE;

ALTER TABLE ACQUISITIONPROP ADD CONSTRAINT ACQUISITIONPROP_TYPE_ID_fk FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE ACQUISITION_RELATIONSHIP ADD CONSTRAINT ACQUISITION_RELATIONSHIP_TYPE_ FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE ACQUISITION_RELATIONSHIP ADD CONSTRAINT ACQUISITION_RELATIONSHIP_SUBJE FOREIGN KEY (SUBJECT_ID) REFERENCES ACQUISITION (ACQUISITION_ID) ON DELETE CASCADE;

ALTER TABLE ACQUISITION_RELATIONSHIP ADD CONSTRAINT ACQUISITION_RELATIONSHIP_OBJEC FOREIGN KEY (OBJECT_ID) REFERENCES ACQUISITION (ACQUISITION_ID) ON DELETE CASCADE;

ALTER TABLE ANALYSISFEATURE ADD CONSTRAINT ANALYSISFEATURE_ANALYSIS_ID_fk FOREIGN KEY (ANALYSIS_ID) REFERENCES ANALYSIS (ANALYSIS_ID) ON DELETE CASCADE;

ALTER TABLE ANALYSISFEATURE ADD CONSTRAINT ANALYSISFEATURE_FEATURE_ID_fk FOREIGN KEY (FEATURE_ID) REFERENCES FEATURE (FEATURE_ID) ON DELETE CASCADE;

ALTER TABLE ANALYSISPROP ADD CONSTRAINT ANALYSISPROP_TYPE_ID_fk FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE ANALYSISPROP ADD CONSTRAINT ANALYSISPROP_ANALYSIS_ID_fk FOREIGN KEY (ANALYSIS_ID) REFERENCES ANALYSIS (ANALYSIS_ID) ON DELETE CASCADE;

ALTER TABLE ARRAYDESIGN ADD CONSTRAINT ARRAYDESIGN_PROTOCOL_ID_fk FOREIGN KEY (PROTOCOL_ID) REFERENCES PROTOCOL (PROTOCOL_ID) ON DELETE SET NULL;

ALTER TABLE ARRAYDESIGN ADD CONSTRAINT ARRAYDESIGN_SUBSTRATETYPE_ID_f FOREIGN KEY (SUBSTRATETYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE SET NULL;

ALTER TABLE ARRAYDESIGN ADD CONSTRAINT ARRAYDESIGN_PLATFORMTYPE_ID_fk FOREIGN KEY (PLATFORMTYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE ARRAYDESIGN ADD CONSTRAINT ARRAYDESIGN_DBXREF_ID_fk FOREIGN KEY (DBXREF_ID) REFERENCES DBXREF (DBXREF_ID) ON DELETE SET NULL;

ALTER TABLE ARRAYDESIGN ADD CONSTRAINT ARRAYDESIGN_MANUFACTURER_ID_fk FOREIGN KEY (MANUFACTURER_ID) REFERENCES CONTACT (CONTACT_ID) ON DELETE CASCADE;

ALTER TABLE ARRAYDESIGNPROP ADD CONSTRAINT ARRAYDESIGNPROP_TYPE_ID_fk FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE ARRAYDESIGNPROP ADD CONSTRAINT ARRAYDESIGNPROP_ARRAYDESIGN_ID FOREIGN KEY (ARRAYDESIGN_ID) REFERENCES ARRAYDESIGN (ARRAYDESIGN_ID) ON DELETE CASCADE;

ALTER TABLE ASSAY ADD CONSTRAINT ASSAY_DBXREF_ID_fk FOREIGN KEY (DBXREF_ID) REFERENCES DBXREF (DBXREF_ID) ON DELETE SET NULL;

ALTER TABLE ASSAY ADD CONSTRAINT ASSAY_ARRAYDESIGN_ID_fk FOREIGN KEY (ARRAYDESIGN_ID) REFERENCES ARRAYDESIGN (ARRAYDESIGN_ID) ON DELETE CASCADE;

ALTER TABLE ASSAY ADD CONSTRAINT ASSAY_PROTOCOL_ID_fk FOREIGN KEY (PROTOCOL_ID) REFERENCES PROTOCOL (PROTOCOL_ID) ON DELETE SET NULL;

ALTER TABLE ASSAY ADD CONSTRAINT ASSAY_OPERATOR_ID_fk FOREIGN KEY (OPERATOR_ID) REFERENCES CONTACT (CONTACT_ID) ON DELETE CASCADE;

ALTER TABLE ASSAYPROP ADD CONSTRAINT ASSAYPROP_ASSAY_ID_fk FOREIGN KEY (ASSAY_ID) REFERENCES ASSAY (ASSAY_ID) ON DELETE CASCADE;

ALTER TABLE ASSAYPROP ADD CONSTRAINT ASSAYPROP_TYPE_ID_fk FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE ASSAY_BIOMATERIAL ADD CONSTRAINT ASSAY_BIOMATERIAL_BIOMATERIAL_ FOREIGN KEY (BIOMATERIAL_ID) REFERENCES BIOMATERIAL (BIOMATERIAL_ID) ON DELETE CASCADE;

ALTER TABLE ASSAY_BIOMATERIAL ADD CONSTRAINT ASSAY_BIOMATERIAL_CHANNEL_ID_f FOREIGN KEY (CHANNEL_ID) REFERENCES CHANNEL (CHANNEL_ID) ON DELETE SET NULL;

ALTER TABLE ASSAY_BIOMATERIAL ADD CONSTRAINT ASSAY_BIOMATERIAL_ASSAY_ID_fk FOREIGN KEY (ASSAY_ID) REFERENCES ASSAY (ASSAY_ID) ON DELETE CASCADE;

ALTER TABLE ASSAY_PROJECT ADD CONSTRAINT ASSAY_PROJECT_PROJECT_ID_fk FOREIGN KEY (PROJECT_ID) REFERENCES PROJECT (PROJECT_ID) ON DELETE NO ACTION;

ALTER TABLE ASSAY_PROJECT ADD CONSTRAINT ASSAY_PROJECT_ASSAY_ID_fk FOREIGN KEY (ASSAY_ID) REFERENCES ASSAY (ASSAY_ID) ON DELETE NO ACTION;

ALTER TABLE AUTHOR ADD CONSTRAINT AUTHOR_CONTACT_ID_fk FOREIGN KEY (CONTACT_ID) REFERENCES CONTACT (CONTACT_ID) ON DELETE NO ACTION;

ALTER TABLE BIOMATERIAL ADD CONSTRAINT BIOMATERIAL_BIOSOURCEPROVIDER_ FOREIGN KEY (BIOSOURCEPROVIDER_ID) REFERENCES CONTACT (CONTACT_ID) ON DELETE SET NULL;

ALTER TABLE BIOMATERIAL ADD CONSTRAINT BIOMATERIAL_DBXREF_ID_fk FOREIGN KEY (DBXREF_ID) REFERENCES DBXREF (DBXREF_ID) ON DELETE SET NULL;

ALTER TABLE BIOMATERIAL ADD CONSTRAINT BIOMATERIAL_TAXON_ID_fk FOREIGN KEY (TAXON_ID) REFERENCES ORGANISM (ORGANISM_ID) ON DELETE SET NULL;

ALTER TABLE BIOMATERIALPROP ADD CONSTRAINT BIOMATERIALPROP_BIOMATERIAL_ID FOREIGN KEY (BIOMATERIAL_ID) REFERENCES BIOMATERIAL (BIOMATERIAL_ID) ON DELETE CASCADE;

ALTER TABLE BIOMATERIALPROP ADD CONSTRAINT BIOMATERIALPROP_TYPE_ID_fk FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE BIOMATERIAL_RELATIONSHIP ADD CONSTRAINT BIOMATERIAL_RELATIONSHIP_SUBJE FOREIGN KEY (SUBJECT_ID) REFERENCES BIOMATERIAL (BIOMATERIAL_ID) ON DELETE NO ACTION;

ALTER TABLE BIOMATERIAL_RELATIONSHIP ADD CONSTRAINT BIOMATERIAL_RELATIONSHIP_OBJEC FOREIGN KEY (OBJECT_ID) REFERENCES BIOMATERIAL (BIOMATERIAL_ID) ON DELETE NO ACTION;

ALTER TABLE BIOMATERIAL_RELATIONSHIP ADD CONSTRAINT BIOMATERIAL_RELATIONSHIP_TYPE_ FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE NO ACTION;

ALTER TABLE BIOMATERIAL_TREATMENT ADD CONSTRAINT BIOMATERIAL_TREATMENT_TREATMEN FOREIGN KEY (TREATMENT_ID) REFERENCES TREATMENT (TREATMENT_ID) ON DELETE CASCADE;

ALTER TABLE BIOMATERIAL_TREATMENT ADD CONSTRAINT BIOMATERIAL_TREATMENT_BIOMATER FOREIGN KEY (BIOMATERIAL_ID) REFERENCES BIOMATERIAL (BIOMATERIAL_ID) ON DELETE CASCADE;

ALTER TABLE BIOMATERIAL_TREATMENT ADD CONSTRAINT BIOMATERIAL_TREATMENT_UNITTYPE FOREIGN KEY (UNITTYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE SET NULL;

ALTER TABLE CONTROL ADD CONSTRAINT CONTROL_TYPE_ID_fk FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE CONTROL ADD CONSTRAINT CONTROL_ASSAY_ID_fk FOREIGN KEY (ASSAY_ID) REFERENCES ASSAY (ASSAY_ID) ON DELETE CASCADE;

ALTER TABLE CONTROL ADD CONSTRAINT CONTROL_TABLEINFO_ID_fk FOREIGN KEY (TABLEINFO_ID) REFERENCES TABLEINFO (TABLEINFO_ID) ON DELETE CASCADE;

ALTER TABLE CVTERM ADD CONSTRAINT CVTERM_CV_ID_fk FOREIGN KEY (CV_ID) REFERENCES CV (CV_ID) ON DELETE CASCADE;

ALTER TABLE CVTERM ADD CONSTRAINT CVTERM_DBXREF_ID_fk FOREIGN KEY (DBXREF_ID) REFERENCES DBXREF (DBXREF_ID) ON DELETE SET NULL;

ALTER TABLE CVTERMPATH ADD CONSTRAINT CVTERMPATH_TYPE_ID_fk FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE SET NULL;

ALTER TABLE CVTERMPATH ADD CONSTRAINT CVTERMPATH_OBJECT_ID_fk FOREIGN KEY (OBJECT_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE CVTERMPATH ADD CONSTRAINT CVTERMPATH_CV_ID_fk FOREIGN KEY (CV_ID) REFERENCES CV (CV_ID) ON DELETE CASCADE;

ALTER TABLE CVTERMPATH ADD CONSTRAINT CVTERMPATH_SUBJECT_ID_fk FOREIGN KEY (SUBJECT_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE CVTERMPROP ADD CONSTRAINT CVTERMPROP_TYPE_ID_fk FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE CVTERMPROP ADD CONSTRAINT CVTERMPROP_CVTERM_ID_fk FOREIGN KEY (CVTERM_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE CVTERMSYNONYM ADD CONSTRAINT CVTERMSYNONYM_CVTERM_ID_fk FOREIGN KEY (CVTERM_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE CVTERMSYNONYM ADD CONSTRAINT CVTERMSYNONYM_TYPE_ID_fk FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE CVTERM_DBXREF ADD CONSTRAINT CVTERM_DBXREF_CVTERM_ID_fk FOREIGN KEY (CVTERM_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE CVTERM_DBXREF ADD CONSTRAINT CVTERM_DBXREF_DBXREF_ID_fk FOREIGN KEY (DBXREF_ID) REFERENCES DBXREF (DBXREF_ID) ON DELETE CASCADE;

ALTER TABLE CVTERM_RELATIONSHIP ADD CONSTRAINT CVTERM_RELATIONSHIP_TYPE_ID_fk FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE CVTERM_RELATIONSHIP ADD CONSTRAINT CVTERM_RELATIONSHIP_SUBJECT_ID FOREIGN KEY (SUBJECT_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE CVTERM_RELATIONSHIP ADD CONSTRAINT CVTERM_RELATIONSHIP_OBJECT_ID_ FOREIGN KEY (OBJECT_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE DBXREF ADD CONSTRAINT DBXREF_DB_ID_fk FOREIGN KEY (DB_ID) REFERENCES DB (DB_ID) ON DELETE CASCADE;

ALTER TABLE DBXREFPROP ADD CONSTRAINT DBXREFPROP_TYPE_ID_fk FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE NO ACTION;

ALTER TABLE DBXREFPROP ADD CONSTRAINT DBXREFPROP_DBXREF_ID_fk FOREIGN KEY (DBXREF_ID) REFERENCES DBXREF (DBXREF_ID) ON DELETE NO ACTION;

ALTER TABLE ELEMENT ADD CONSTRAINT ELEMENT_FEATURE_ID_fk FOREIGN KEY (FEATURE_ID) REFERENCES FEATURE (FEATURE_ID) ON DELETE SET NULL;

ALTER TABLE ELEMENT ADD CONSTRAINT ELEMENT_TYPE_ID_fk FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE SET NULL;

ALTER TABLE ELEMENT ADD CONSTRAINT ELEMENT_DBXREF_ID_fk FOREIGN KEY (DBXREF_ID) REFERENCES DBXREF (DBXREF_ID) ON DELETE SET NULL;

ALTER TABLE ELEMENT ADD CONSTRAINT ELEMENT_ARRAYDESIGN_ID_fk FOREIGN KEY (ARRAYDESIGN_ID) REFERENCES ARRAYDESIGN (ARRAYDESIGN_ID) ON DELETE CASCADE;

ALTER TABLE ELEMENTRESULT ADD CONSTRAINT ELEMENTRESULT_QUANTIFICATION_I FOREIGN KEY (QUANTIFICATION_ID) REFERENCES QUANTIFICATION (QUANTIFICATION_ID) ON DELETE CASCADE;

ALTER TABLE ELEMENTRESULT ADD CONSTRAINT ELEMENTRESULT_ELEMENT_ID_fk FOREIGN KEY (ELEMENT_ID) REFERENCES ELEMENT (ELEMENT_ID) ON DELETE CASCADE;

ALTER TABLE ELEMENTRESULT_RELATIONSHIP ADD CONSTRAINT ELEMENTRESULT_RELATIONSHIP_OBJ FOREIGN KEY (OBJECT_ID) REFERENCES ELEMENTRESULT (ELEMENTRESULT_ID) ON DELETE NO ACTION;

ALTER TABLE ELEMENTRESULT_RELATIONSHIP ADD CONSTRAINT ELEMENTRESULT_RELATIONSHIP_TYP FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE NO ACTION;

ALTER TABLE ELEMENTRESULT_RELATIONSHIP ADD CONSTRAINT ELEMENTRESULT_RELATIONSHIP_SUB FOREIGN KEY (SUBJECT_ID) REFERENCES ELEMENTRESULT (ELEMENTRESULT_ID) ON DELETE NO ACTION;

ALTER TABLE ENVIRONMENT_CVTERM ADD CONSTRAINT ENVIRONMENT_CVTERM_CVTERM_ID_f FOREIGN KEY (CVTERM_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE ENVIRONMENT_CVTERM ADD CONSTRAINT ENVIRONMENT_CVTERM_ENVIRONMENT FOREIGN KEY (ENVIRONMENT_ID) REFERENCES ENVIRONMENT (ENVIRONMENT_ID) ON DELETE CASCADE;

ALTER TABLE EXPRESSION_CVTERM ADD CONSTRAINT EXPRESSION_CVTERM_CVTERM_ID_fk FOREIGN KEY (CVTERM_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE EXPRESSION_CVTERM ADD CONSTRAINT EXPRESSION_CVTERM_EXPRESSION_I FOREIGN KEY (EXPRESSION_ID) REFERENCES EXPRESSION (EXPRESSION_ID) ON DELETE CASCADE;

ALTER TABLE EXPRESSION_IMAGE ADD CONSTRAINT EXPRESSION_IMAGE_EIMAGE_ID_fk FOREIGN KEY (EIMAGE_ID) REFERENCES EIMAGE (EIMAGE_ID) ON DELETE CASCADE;

ALTER TABLE EXPRESSION_IMAGE ADD CONSTRAINT EXPRESSION_IMAGE_EXPRESSION_ID FOREIGN KEY (EXPRESSION_ID) REFERENCES EXPRESSION (EXPRESSION_ID) ON DELETE CASCADE;

ALTER TABLE EXPRESSION_PUB ADD CONSTRAINT EXPRESSION_PUB_PUB_ID_fk FOREIGN KEY (PUB_ID) REFERENCES PUB (PUB_ID) ON DELETE CASCADE;

ALTER TABLE EXPRESSION_PUB ADD CONSTRAINT EXPRESSION_PUB_EXPRESSION_ID_f FOREIGN KEY (EXPRESSION_ID) REFERENCES EXPRESSION (EXPRESSION_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE ADD CONSTRAINT FEATURE_DBXREF_ID_fk FOREIGN KEY (DBXREF_ID) REFERENCES DBXREF (DBXREF_ID) ON DELETE SET NULL;

ALTER TABLE FEATURE ADD CONSTRAINT FEATURE_TYPE_ID_fk FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE ADD CONSTRAINT FEATURE_ORGANISM_ID_fk FOREIGN KEY (ORGANISM_ID) REFERENCES ORGANISM (ORGANISM_ID) ON DELETE CASCADE;

ALTER TABLE FEATURELOC ADD CONSTRAINT FEATURELOC_SRCFEATURE_ID_fk FOREIGN KEY (SRCFEATURE_ID) REFERENCES FEATURE (FEATURE_ID) ON DELETE SET NULL;

ALTER TABLE FEATURELOC ADD CONSTRAINT FEATURELOC_FEATURE_ID_fk FOREIGN KEY (FEATURE_ID) REFERENCES FEATURE (FEATURE_ID) ON DELETE CASCADE;

ALTER TABLE FEATUREMAP ADD CONSTRAINT FEATUREMAP_UNITTYPE_ID_fk FOREIGN KEY (UNITTYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE SET NULL;

ALTER TABLE FEATUREMAP_PUB ADD CONSTRAINT FEATUREMAP_PUB_FEATUREMAP_ID_f FOREIGN KEY (FEATUREMAP_ID) REFERENCES FEATUREMAP (FEATUREMAP_ID) ON DELETE CASCADE;

ALTER TABLE FEATUREMAP_PUB ADD CONSTRAINT FEATUREMAP_PUB_PUB_ID_fk FOREIGN KEY (PUB_ID) REFERENCES PUB (PUB_ID) ON DELETE CASCADE;

ALTER TABLE FEATUREPOS ADD CONSTRAINT FEATUREPOS_MAP_FEATURE_ID_fk FOREIGN KEY (MAP_FEATURE_ID) REFERENCES FEATURE (FEATURE_ID) ON DELETE CASCADE;

ALTER TABLE FEATUREPOS ADD CONSTRAINT FEATUREPOS_FEATURE_ID_fk FOREIGN KEY (FEATURE_ID) REFERENCES FEATURE (FEATURE_ID) ON DELETE CASCADE;

ALTER TABLE FEATUREPOS ADD CONSTRAINT FEATUREPOS_FEATUREMAP_ID_fk FOREIGN KEY (FEATUREMAP_ID) REFERENCES FEATUREMAP (FEATUREMAP_ID) ON DELETE CASCADE;

ALTER TABLE FEATUREPROP ADD CONSTRAINT FEATUREPROP_FEATURE_ID_fk FOREIGN KEY (FEATURE_ID) REFERENCES FEATURE (FEATURE_ID) ON DELETE CASCADE;

ALTER TABLE FEATUREPROP ADD CONSTRAINT FEATUREPROP_TYPE_ID_fk FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE FEATUREPROP_PUB ADD CONSTRAINT FEATUREPROP_PUB_PUB_ID_fk FOREIGN KEY (PUB_ID) REFERENCES PUB (PUB_ID) ON DELETE CASCADE;

ALTER TABLE FEATUREPROP_PUB ADD CONSTRAINT FEATUREPROP_PUB_FEATUREPROP_ID FOREIGN KEY (FEATUREPROP_ID) REFERENCES FEATUREPROP (FEATUREPROP_ID) ON DELETE CASCADE;

ALTER TABLE FEATURERANGE ADD CONSTRAINT FEATURERANGE_RIGHTENDF_ID_fk FOREIGN KEY (RIGHTENDF_ID) REFERENCES FEATURE (FEATURE_ID) ON DELETE CASCADE;

ALTER TABLE FEATURERANGE ADD CONSTRAINT FEATURERANGE_LEFTENDF_ID_fk FOREIGN KEY (LEFTENDF_ID) REFERENCES FEATURE (FEATURE_ID) ON DELETE SET NULL;

ALTER TABLE FEATURERANGE ADD CONSTRAINT FEATURERANGE_RIGHTSTARTF_ID_fk FOREIGN KEY (RIGHTSTARTF_ID) REFERENCES FEATURE (FEATURE_ID) ON DELETE SET NULL;

ALTER TABLE FEATURERANGE ADD CONSTRAINT FEATURERANGE_FEATURE_ID_fk FOREIGN KEY (FEATURE_ID) REFERENCES FEATURE (FEATURE_ID) ON DELETE CASCADE;

ALTER TABLE FEATURERANGE ADD CONSTRAINT FEATURERANGE_FEATUREMAP_ID_fk FOREIGN KEY (FEATUREMAP_ID) REFERENCES FEATUREMAP (FEATUREMAP_ID) ON DELETE CASCADE;

ALTER TABLE FEATURERANGE ADD CONSTRAINT FEATURERANGE_LEFTSTARTF_ID_fk FOREIGN KEY (LEFTSTARTF_ID) REFERENCES FEATURE (FEATURE_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE_CVTERM ADD CONSTRAINT FEATURE_CVTERM_FEATURE_ID_fk FOREIGN KEY (FEATURE_ID) REFERENCES FEATURE (FEATURE_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE_CVTERM ADD CONSTRAINT FEATURE_CVTERM_CVTERM_ID_fk FOREIGN KEY (CVTERM_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE_CVTERMPROP ADD CONSTRAINT FEATURE_CVTERMPROP_TYPE_ID_fk FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE_CVTERMPROP ADD CONSTRAINT FEATURE_CVTERMPROP_FEATURE_CVT FOREIGN KEY (FEATURE_CVTERM_ID) REFERENCES FEATURE_CVTERM (FEATURE_CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE_CVTERM_DBXREF ADD CONSTRAINT FEATURE_CVTERM_DBXREF_DBXREF_I FOREIGN KEY (DBXREF_ID) REFERENCES DBXREF (DBXREF_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE_CVTERM_DBXREF ADD CONSTRAINT FEATURE_CVTERM_DBXREF_FEATURE_ FOREIGN KEY (FEATURE_CVTERM_ID) REFERENCES FEATURE_CVTERM (FEATURE_CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE_CVTERM_PUB ADD CONSTRAINT FEATURE_CVTERM_PUB_FEATURE_CVT FOREIGN KEY (FEATURE_CVTERM_ID) REFERENCES FEATURE_CVTERM (FEATURE_CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE_DBXREF ADD CONSTRAINT FEATURE_DBXREF_FEATURE_ID_fk FOREIGN KEY (FEATURE_ID) REFERENCES FEATURE (FEATURE_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE_DBXREF ADD CONSTRAINT FEATURE_DBXREF_DBXREF_ID_fk FOREIGN KEY (DBXREF_ID) REFERENCES DBXREF (DBXREF_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE_EXPRESSION ADD CONSTRAINT FEATURE_EXPRESSION_EXPRESSION_ FOREIGN KEY (EXPRESSION_ID) REFERENCES EXPRESSION (EXPRESSION_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE_EXPRESSION ADD CONSTRAINT FEATURE_EXPRESSION_FEATURE_ID_ FOREIGN KEY (FEATURE_ID) REFERENCES FEATURE (FEATURE_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE_GENOTYPE ADD CONSTRAINT FEATURE_GENOTYPE_FEATURE_ID_fk FOREIGN KEY (FEATURE_ID) REFERENCES FEATURE (FEATURE_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE_GENOTYPE ADD CONSTRAINT FEATURE_GENOTYPE_CVTERM_ID_fk FOREIGN KEY (CVTERM_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE_GENOTYPE ADD CONSTRAINT FEATURE_GENOTYPE_GENOTYPE_ID_f FOREIGN KEY (GENOTYPE_ID) REFERENCES GENOTYPE (GENOTYPE_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE_GENOTYPE ADD CONSTRAINT FEATURE_GENOTYPE_CHROMOSOME_ID FOREIGN KEY (CHROMOSOME_ID) REFERENCES FEATURE (FEATURE_ID) ON DELETE SET NULL;

ALTER TABLE FEATURE_PHENOTYPE ADD CONSTRAINT FEATURE_PHENOTYPE_PHENOTYPE_ID FOREIGN KEY (PHENOTYPE_ID) REFERENCES PHENOTYPE (PHENOTYPE_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE_PHENOTYPE ADD CONSTRAINT FEATURE_PHENOTYPE_FEATURE_ID_f FOREIGN KEY (FEATURE_ID) REFERENCES FEATURE (FEATURE_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE_PHENOTYPE ADD CONSTRAINT FEATURE_PHENOTYPE_TYPE_ID_fk FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE_PUB ADD CONSTRAINT FEATURE_PUB_PUB_ID_fk FOREIGN KEY (PUB_ID) REFERENCES PUB (PUB_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE_PUB ADD CONSTRAINT FEATURE_PUB_FEATURE_ID_fk FOREIGN KEY (FEATURE_ID) REFERENCES FEATURE (FEATURE_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE_RELATIONSHIP ADD CONSTRAINT FEATURE_RELATIONSHIP_OBJECT_ID FOREIGN KEY (OBJECT_ID) REFERENCES FEATURE (FEATURE_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE_RELATIONSHIP ADD CONSTRAINT FEATURE_RELATIONSHIP_TYPE_ID_f FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE_RELATIONSHIP ADD CONSTRAINT FEATURE_RELATIONSHIP_SUBJECT_I FOREIGN KEY (SUBJECT_ID) REFERENCES FEATURE (FEATURE_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE_RELATIONSHIPPROP ADD CONSTRAINT FEATURE_RELATIONSHIPPROP_TYPE_ FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE_RELATIONSHIPPROP ADD CONSTRAINT FEATURE_RELATIONSHIPPROP_FEATU FOREIGN KEY (FEATURE_RELATIONSHIP_ID) REFERENCES FEATURE_RELATIONSHIP (FEATURE_RELATIONSHIP_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE_RELATIONSHIPPROP_PUB ADD CONSTRAINT FEATURE_RELATIONSHIPPROP_PUB_F FOREIGN KEY (FEATURE_RELATIONSHIPPROP_ID) REFERENCES FEATURE_RELATIONSHIPPROP (FEATURE_RELATIONSHIPPROP_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE_RELATIONSHIPPROP_PUB ADD CONSTRAINT FEATURE_RELATIONSHIPPROP_PUB_P FOREIGN KEY (PUB_ID) REFERENCES PUB (PUB_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE_RELATIONSHIP_PUB ADD CONSTRAINT FEATURE_RELATIONSHIP_PUB_FEATU FOREIGN KEY (FEATURE_RELATIONSHIP_ID) REFERENCES FEATURE_RELATIONSHIP (FEATURE_RELATIONSHIP_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE_RELATIONSHIP_PUB ADD CONSTRAINT FEATURE_RELATIONSHIP_PUB_PUB_I FOREIGN KEY (PUB_ID) REFERENCES PUB (PUB_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE_SYNONYM ADD CONSTRAINT FEATURE_SYNONYM_SYNONYM_ID_fk FOREIGN KEY (SYNONYM_ID) REFERENCES SYNONYM_ (SYNONYM_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE_SYNONYM ADD CONSTRAINT FEATURE_SYNONYM_PUB_ID_fk FOREIGN KEY (PUB_ID) REFERENCES PUB (PUB_ID) ON DELETE CASCADE;

ALTER TABLE FEATURE_SYNONYM ADD CONSTRAINT FEATURE_SYNONYM_FEATURE_ID_fk FOREIGN KEY (FEATURE_ID) REFERENCES FEATURE (FEATURE_ID) ON DELETE CASCADE;

ALTER TABLE MAGEDOCUMENTATION ADD CONSTRAINT MAGEDOCUMENTATION_TABLEINFO_ID FOREIGN KEY (TABLEINFO_ID) REFERENCES TABLEINFO (TABLEINFO_ID) ON DELETE CASCADE;

ALTER TABLE MAGEDOCUMENTATION ADD CONSTRAINT MAGEDOCUMENTATION_MAGEML_ID_fk FOREIGN KEY (MAGEML_ID) REFERENCES MAGEML (MAGEML_ID) ON DELETE CASCADE;

ALTER TABLE ORGANISMPROP ADD CONSTRAINT ORGANISMPROP_ORGANISM_ID_fk FOREIGN KEY (ORGANISM_ID) REFERENCES ORGANISM (ORGANISM_ID) ON DELETE CASCADE;

ALTER TABLE ORGANISMPROP ADD CONSTRAINT ORGANISMPROP_TYPE_ID_fk FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE ORGANISM_DBXREF ADD CONSTRAINT ORGANISM_DBXREF_DBXREF_ID_fk FOREIGN KEY (DBXREF_ID) REFERENCES DBXREF (DBXREF_ID) ON DELETE CASCADE;

ALTER TABLE ORGANISM_DBXREF ADD CONSTRAINT ORGANISM_DBXREF_ORGANISM_ID_fk FOREIGN KEY (ORGANISM_ID) REFERENCES ORGANISM (ORGANISM_ID) ON DELETE CASCADE;

ALTER TABLE PHENDESC ADD CONSTRAINT PHENDESC_GENOTYPE_ID_fk FOREIGN KEY (GENOTYPE_ID) REFERENCES GENOTYPE (GENOTYPE_ID) ON DELETE CASCADE;

ALTER TABLE PHENDESC ADD CONSTRAINT PHENDESC_ENVIRONMENT_ID_fk FOREIGN KEY (ENVIRONMENT_ID) REFERENCES ENVIRONMENT (ENVIRONMENT_ID) ON DELETE CASCADE;

ALTER TABLE PHENDESC ADD CONSTRAINT PHENDESC_PUB_ID_fk FOREIGN KEY (PUB_ID) REFERENCES PUB (PUB_ID) ON DELETE CASCADE;

ALTER TABLE PHENOTYPE ADD CONSTRAINT PHENOTYPE_ATTR_ID_fk FOREIGN KEY (ATTR_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE SET NULL;

ALTER TABLE PHENOTYPE ADD CONSTRAINT PHENOTYPE_ASSAY_ID_fk FOREIGN KEY (ASSAY_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE SET NULL;

ALTER TABLE PHENOTYPE ADD CONSTRAINT PHENOTYPE_CVALUE_ID_fk FOREIGN KEY (CVALUE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE SET NULL;

ALTER TABLE PHENOTYPE ADD CONSTRAINT PHENOTYPE_OBSERVABLE_ID_fk FOREIGN KEY (OBSERVABLE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE PHENOTYPE_COMPARISON ADD CONSTRAINT PHENOTYPE_COMPARISON_PHENOTYPE FOREIGN KEY (PHENOTYPE1_ID) REFERENCES PHENOTYPE (PHENOTYPE_ID) ON DELETE CASCADE;

ALTER TABLE PHENOTYPE_COMPARISON ADD CONSTRAINT PHENOTYPE_COMPARISON_PHENOTY01 FOREIGN KEY (PHENOTYPE2_ID) REFERENCES PHENOTYPE (PHENOTYPE_ID) ON DELETE CASCADE;

ALTER TABLE PHENOTYPE_COMPARISON ADD CONSTRAINT PHENOTYPE_COMPARISON_TYPE_ID_f FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE PHENOTYPE_COMPARISON ADD CONSTRAINT PHENOTYPE_COMPARISON_PUB_ID_fk FOREIGN KEY (PUB_ID) REFERENCES PUB (PUB_ID) ON DELETE CASCADE;

ALTER TABLE PHENOTYPE_COMPARISON ADD CONSTRAINT PHENOTYPE_COMPARISON_ENVIRONME FOREIGN KEY (ENVIRONMENT1_ID) REFERENCES ENVIRONMENT (ENVIRONMENT_ID) ON DELETE CASCADE;

ALTER TABLE PHENOTYPE_COMPARISON ADD CONSTRAINT PHENOTYPE_COMPARISON_GENOTYPE2 FOREIGN KEY (GENOTYPE2_ID) REFERENCES GENOTYPE (GENOTYPE_ID) ON DELETE CASCADE;

ALTER TABLE PHENOTYPE_COMPARISON ADD CONSTRAINT PHENOTYPE_COMPARISON_GENOTYPE1 FOREIGN KEY (GENOTYPE1_ID) REFERENCES GENOTYPE (GENOTYPE_ID) ON DELETE CASCADE;

ALTER TABLE PHENOTYPE_COMPARISON ADD CONSTRAINT PHENOTYPE_COMPARISON_ENVIRON01 FOREIGN KEY (ENVIRONMENT2_ID) REFERENCES ENVIRONMENT (ENVIRONMENT_ID) ON DELETE CASCADE;

ALTER TABLE PHENOTYPE_CVTERM ADD CONSTRAINT PHENOTYPE_CVTERM_CVTERM_ID_fk FOREIGN KEY (CVTERM_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE PHENOTYPE_CVTERM ADD CONSTRAINT PHENOTYPE_CVTERM_PHENOTYPE_ID_ FOREIGN KEY (PHENOTYPE_ID) REFERENCES PHENOTYPE (PHENOTYPE_ID) ON DELETE CASCADE;

ALTER TABLE PHENSTATEMENT ADD CONSTRAINT PHENSTATEMENT_PHENOTYPE_ID_fk FOREIGN KEY (PHENOTYPE_ID) REFERENCES PHENOTYPE (PHENOTYPE_ID) ON DELETE CASCADE;

ALTER TABLE PHENSTATEMENT ADD CONSTRAINT PHENSTATEMENT_ENVIRONMENT_ID_f FOREIGN KEY (ENVIRONMENT_ID) REFERENCES ENVIRONMENT (ENVIRONMENT_ID) ON DELETE CASCADE;

ALTER TABLE PHENSTATEMENT ADD CONSTRAINT PHENSTATEMENT_PUB_ID_fk FOREIGN KEY (PUB_ID) REFERENCES PUB (PUB_ID) ON DELETE CASCADE;

ALTER TABLE PHENSTATEMENT ADD CONSTRAINT PHENSTATEMENT_GENOTYPE_ID_fk FOREIGN KEY (GENOTYPE_ID) REFERENCES GENOTYPE (GENOTYPE_ID) ON DELETE CASCADE;

ALTER TABLE PHENSTATEMENT ADD CONSTRAINT PHENSTATEMENT_TYPE_ID_fk FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE PROTOCOL ADD CONSTRAINT PROTOCOL_DBXREF_ID_fk FOREIGN KEY (DBXREF_ID) REFERENCES DBXREF (DBXREF_ID) ON DELETE SET NULL;

ALTER TABLE PROTOCOL ADD CONSTRAINT PROTOCOL_PUB_ID_fk FOREIGN KEY (PUB_ID) REFERENCES PUB (PUB_ID) ON DELETE SET NULL;

ALTER TABLE PROTOCOL ADD CONSTRAINT PROTOCOL_TYPE_ID_fk FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE PROTOCOLPARAM ADD CONSTRAINT PROTOCOLPARAM_PROTOCOL_ID_fk FOREIGN KEY (PROTOCOL_ID) REFERENCES PROTOCOL (PROTOCOL_ID) ON DELETE CASCADE;

ALTER TABLE PROTOCOLPARAM ADD CONSTRAINT PROTOCOLPARAM_DATATYPE_ID_fk FOREIGN KEY (DATATYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE SET NULL;

ALTER TABLE PROTOCOLPARAM ADD CONSTRAINT PROTOCOLPARAM_UNITTYPE_ID_fk FOREIGN KEY (UNITTYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE SET NULL;

ALTER TABLE PUB ADD CONSTRAINT PUB_TYPE_ID_fk FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE PUBPROP ADD CONSTRAINT PUBPROP_TYPE_ID_fk FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE PUBPROP ADD CONSTRAINT PUBPROP_PUB_ID_fk FOREIGN KEY (PUB_ID) REFERENCES PUB (PUB_ID) ON DELETE CASCADE;

ALTER TABLE PUB_AUTHOR ADD CONSTRAINT PUB_AUTHOR_AUTHOR_ID_fk FOREIGN KEY (AUTHOR_ID) REFERENCES AUTHOR (AUTHOR_ID) ON DELETE CASCADE;

ALTER TABLE PUB_AUTHOR ADD CONSTRAINT PUB_AUTHOR_PUB_ID_fk FOREIGN KEY (PUB_ID) REFERENCES PUB (PUB_ID) ON DELETE CASCADE;

ALTER TABLE PUB_DBXREF ADD CONSTRAINT PUB_DBXREF_PUB_ID_fk FOREIGN KEY (PUB_ID) REFERENCES PUB (PUB_ID) ON DELETE CASCADE;

ALTER TABLE PUB_DBXREF ADD CONSTRAINT PUB_DBXREF_DBXREF_ID_fk FOREIGN KEY (DBXREF_ID) REFERENCES DBXREF (DBXREF_ID) ON DELETE CASCADE;

ALTER TABLE PUB_RELATIONSHIP ADD CONSTRAINT PUB_RELATIONSHIP_OBJECT_ID_fk FOREIGN KEY (OBJECT_ID) REFERENCES PUB (PUB_ID) ON DELETE CASCADE;

ALTER TABLE PUB_RELATIONSHIP ADD CONSTRAINT PUB_RELATIONSHIP_SUBJECT_ID_fk FOREIGN KEY (SUBJECT_ID) REFERENCES PUB (PUB_ID) ON DELETE CASCADE;

ALTER TABLE PUB_RELATIONSHIP ADD CONSTRAINT PUB_RELATIONSHIP_TYPE_ID_fk FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE QUANTIFICATION ADD CONSTRAINT QUANTIFICATION_PROTOCOL_ID_fk FOREIGN KEY (PROTOCOL_ID) REFERENCES PROTOCOL (PROTOCOL_ID) ON DELETE SET NULL;

ALTER TABLE QUANTIFICATION ADD CONSTRAINT QUANTIFICATION_ACQUISITION_ID_ FOREIGN KEY (ACQUISITION_ID) REFERENCES ACQUISITION (ACQUISITION_ID) ON DELETE CASCADE;

ALTER TABLE QUANTIFICATION ADD CONSTRAINT QUANTIFICATION_OPERATOR_ID_fk FOREIGN KEY (OPERATOR_ID) REFERENCES CONTACT (CONTACT_ID) ON DELETE SET NULL;

ALTER TABLE QUANTIFICATION ADD CONSTRAINT QUANTIFICATION_ANALYSIS_ID_fk FOREIGN KEY (ANALYSIS_ID) REFERENCES ANALYSIS (ANALYSIS_ID) ON DELETE CASCADE;

ALTER TABLE QUANTIFICATIONPROP ADD CONSTRAINT QUANTIFICATIONPROP_QUANTIFICAT FOREIGN KEY (QUANTIFICATION_ID) REFERENCES QUANTIFICATION (QUANTIFICATION_ID) ON DELETE CASCADE;

ALTER TABLE QUANTIFICATIONPROP ADD CONSTRAINT QUANTIFICATIONPROP_TYPE_ID_fk FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE QUANTIFICATION_RELATIONSHIP ADD CONSTRAINT QUANTIFICATION_RELATIONSHIP_TY FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE QUANTIFICATION_RELATIONSHIP ADD CONSTRAINT QUANTIFICATION_RELATIONSHIP_SU FOREIGN KEY (SUBJECT_ID) REFERENCES QUANTIFICATION (QUANTIFICATION_ID) ON DELETE CASCADE;

ALTER TABLE QUANTIFICATION_RELATIONSHIP ADD CONSTRAINT QUANTIFICATION_RELATIONSHIP_OB FOREIGN KEY (OBJECT_ID) REFERENCES QUANTIFICATION (QUANTIFICATION_ID) ON DELETE CASCADE;

ALTER TABLE STUDY ADD CONSTRAINT STUDY_DBXREF_ID_fk FOREIGN KEY (DBXREF_ID) REFERENCES DBXREF (DBXREF_ID) ON DELETE SET NULL;

ALTER TABLE STUDY ADD CONSTRAINT STUDY_PUB_ID_fk FOREIGN KEY (PUB_ID) REFERENCES PUB (PUB_ID) ON DELETE SET NULL;

ALTER TABLE STUDY ADD CONSTRAINT STUDY_CONTACT_ID_fk FOREIGN KEY (CONTACT_ID) REFERENCES CONTACT (CONTACT_ID) ON DELETE CASCADE;

ALTER TABLE STUDYDESIGN ADD CONSTRAINT STUDYDESIGN_STUDY_ID_fk FOREIGN KEY (STUDY_ID) REFERENCES STUDY (STUDY_ID) ON DELETE CASCADE;

ALTER TABLE STUDYDESIGNPROP ADD CONSTRAINT STUDYDESIGNPROP_TYPE_ID_fk FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE STUDYDESIGNPROP ADD CONSTRAINT STUDYDESIGNPROP_STUDYDESIGN_ID FOREIGN KEY (STUDYDESIGN_ID) REFERENCES STUDYDESIGN (STUDYDESIGN_ID) ON DELETE CASCADE;

ALTER TABLE STUDYFACTOR ADD CONSTRAINT STUDYFACTOR_STUDYDESIGN_ID_fk FOREIGN KEY (STUDYDESIGN_ID) REFERENCES STUDYDESIGN (STUDYDESIGN_ID) ON DELETE CASCADE;

ALTER TABLE STUDYFACTOR ADD CONSTRAINT STUDYFACTOR_TYPE_ID_fk FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE SET NULL;

ALTER TABLE STUDYFACTORVALUE ADD CONSTRAINT STUDYFACTORVALUE_STUDYFACTOR_I FOREIGN KEY (STUDYFACTOR_ID) REFERENCES STUDYFACTOR (STUDYFACTOR_ID) ON DELETE CASCADE;

ALTER TABLE STUDYFACTORVALUE ADD CONSTRAINT STUDYFACTORVALUE_ASSAY_ID_fk FOREIGN KEY (ASSAY_ID) REFERENCES ASSAY (ASSAY_ID) ON DELETE CASCADE;

ALTER TABLE STUDY_ASSAY ADD CONSTRAINT STUDY_ASSAY_ASSAY_ID_fk FOREIGN KEY (ASSAY_ID) REFERENCES ASSAY (ASSAY_ID) ON DELETE CASCADE;

ALTER TABLE STUDY_ASSAY ADD CONSTRAINT STUDY_ASSAY_STUDY_ID_fk FOREIGN KEY (STUDY_ID) REFERENCES STUDY (STUDY_ID) ON DELETE CASCADE;

ALTER TABLE SYNONYM_ ADD CONSTRAINT SYNONYM__TYPE_ID_fk FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE TREATMENT ADD CONSTRAINT TREATMENT_PROTOCOL_ID_fk FOREIGN KEY (PROTOCOL_ID) REFERENCES PROTOCOL (PROTOCOL_ID) ON DELETE SET NULL;

ALTER TABLE TREATMENT ADD CONSTRAINT TREATMENT_TYPE_ID_fk FOREIGN KEY (TYPE_ID) REFERENCES CVTERM (CVTERM_ID) ON DELETE CASCADE;

ALTER TABLE TREATMENT ADD CONSTRAINT TREATMENT_BIOMATERIAL_ID_fk FOREIGN KEY (BIOMATERIAL_ID) REFERENCES BIOMATERIAL (BIOMATERIAL_ID) ON DELETE CASCADE;

CREATE OR REPLACE TRIGGER ai_ACQUISITION_ACQUISITION_ID
BEFORE INSERT ON ACQUISITION
FOR EACH ROW WHEN (
 new.ACQUISITION_ID IS NULL OR new.ACQUISITION_ID = 0
)
BEGIN
 SELECT sq_ACQUISITION_ACQUISITION_ID.nextval
 INTO :new.ACQUISITION_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_ACQUISITIONPROP_ACQUISITION
BEFORE INSERT ON ACQUISITIONPROP
FOR EACH ROW WHEN (
 new.ACQUISITIONPROP_ID IS NULL OR new.ACQUISITIONPROP_ID = 0
)
BEGIN
 SELECT sq_ACQUISITIONPROP_ACQUISITION.nextval
 INTO :new.ACQUISITIONPROP_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_ACQUISITION_RELATIONSHIP_AC
BEFORE INSERT ON ACQUISITION_RELATIONSHIP
FOR EACH ROW WHEN (
 new.ACQUISITION_RELATIONSHIP_ID IS NULL OR new.ACQUISITION_RELATIONSHIP_ID = 0
)
BEGIN
 SELECT sq_ACQUISITION_RELATIONSHIP_AC.nextval
 INTO :new.ACQUISITION_RELATIONSHIP_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_ANALYSIS_ANALYSIS_ID
BEFORE INSERT ON ANALYSIS
FOR EACH ROW WHEN (
 new.ANALYSIS_ID IS NULL OR new.ANALYSIS_ID = 0
)
BEGIN
 SELECT sq_ANALYSIS_ANALYSIS_ID.nextval
 INTO :new.ANALYSIS_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_ANALYSISFEATURE_ANALYSISFEA
BEFORE INSERT ON ANALYSISFEATURE
FOR EACH ROW WHEN (
 new.ANALYSISFEATURE_ID IS NULL OR new.ANALYSISFEATURE_ID = 0
)
BEGIN
 SELECT sq_ANALYSISFEATURE_ANALYSISFEA.nextval
 INTO :new.ANALYSISFEATURE_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_ANALYSISPROP_ANALYSISPROP_I
BEFORE INSERT ON ANALYSISPROP
FOR EACH ROW WHEN (
 new.ANALYSISPROP_ID IS NULL OR new.ANALYSISPROP_ID = 0
)
BEGIN
 SELECT sq_ANALYSISPROP_ANALYSISPROP_I.nextval
 INTO :new.ANALYSISPROP_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_ARRAYDESIGN_ARRAYDESIGN_ID
BEFORE INSERT ON ARRAYDESIGN
FOR EACH ROW WHEN (
 new.ARRAYDESIGN_ID IS NULL OR new.ARRAYDESIGN_ID = 0
)
BEGIN
 SELECT sq_ARRAYDESIGN_ARRAYDESIGN_ID.nextval
 INTO :new.ARRAYDESIGN_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_ARRAYDESIGNPROP_ARRAYDESIGN
BEFORE INSERT ON ARRAYDESIGNPROP
FOR EACH ROW WHEN (
 new.ARRAYDESIGNPROP_ID IS NULL OR new.ARRAYDESIGNPROP_ID = 0
)
BEGIN
 SELECT sq_ARRAYDESIGNPROP_ARRAYDESIGN.nextval
 INTO :new.ARRAYDESIGNPROP_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_ASSAY_ASSAY_ID
BEFORE INSERT ON ASSAY
FOR EACH ROW WHEN (
 new.ASSAY_ID IS NULL OR new.ASSAY_ID = 0
)
BEGIN
 SELECT sq_ASSAY_ASSAY_ID.nextval
 INTO :new.ASSAY_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_ASSAYPROP_ASSAYPROP_ID
BEFORE INSERT ON ASSAYPROP
FOR EACH ROW WHEN (
 new.ASSAYPROP_ID IS NULL OR new.ASSAYPROP_ID = 0
)
BEGIN
 SELECT sq_ASSAYPROP_ASSAYPROP_ID.nextval
 INTO :new.ASSAYPROP_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_ASSAY_BIOMATERIAL_ASSAY_BIO
BEFORE INSERT ON ASSAY_BIOMATERIAL
FOR EACH ROW WHEN (
 new.ASSAY_BIOMATERIAL_ID IS NULL OR new.ASSAY_BIOMATERIAL_ID = 0
)
BEGIN
 SELECT sq_ASSAY_BIOMATERIAL_ASSAY_BIO.nextval
 INTO :new.ASSAY_BIOMATERIAL_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_ASSAY_PROJECT_ASSAY_PROJECT
BEFORE INSERT ON ASSAY_PROJECT
FOR EACH ROW WHEN (
 new.ASSAY_PROJECT_ID IS NULL OR new.ASSAY_PROJECT_ID = 0
)
BEGIN
 SELECT sq_ASSAY_PROJECT_ASSAY_PROJECT.nextval
 INTO :new.ASSAY_PROJECT_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_AUTHOR_AUTHOR_ID
BEFORE INSERT ON AUTHOR
FOR EACH ROW WHEN (
 new.AUTHOR_ID IS NULL OR new.AUTHOR_ID = 0
)
BEGIN
 SELECT sq_AUTHOR_AUTHOR_ID.nextval
 INTO :new.AUTHOR_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_BIOMATERIAL_BIOMATERIAL_ID
BEFORE INSERT ON BIOMATERIAL
FOR EACH ROW WHEN (
 new.BIOMATERIAL_ID IS NULL OR new.BIOMATERIAL_ID = 0
)
BEGIN
 SELECT sq_BIOMATERIAL_BIOMATERIAL_ID.nextval
 INTO :new.BIOMATERIAL_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_BIOMATERIALPROP_BIOMATERIAL
BEFORE INSERT ON BIOMATERIALPROP
FOR EACH ROW WHEN (
 new.BIOMATERIALPROP_ID IS NULL OR new.BIOMATERIALPROP_ID = 0
)
BEGIN
 SELECT sq_BIOMATERIALPROP_BIOMATERIAL.nextval
 INTO :new.BIOMATERIALPROP_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_BIOMATERIAL_RELATIONSHIP_BI
BEFORE INSERT ON BIOMATERIAL_RELATIONSHIP
FOR EACH ROW WHEN (
 new.BIOMATERIAL_RELATIONSHIP_ID IS NULL OR new.BIOMATERIAL_RELATIONSHIP_ID = 0
)
BEGIN
 SELECT sq_BIOMATERIAL_RELATIONSHIP_BI.nextval
 INTO :new.BIOMATERIAL_RELATIONSHIP_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_BIOMATERIAL_TREATMENT_BIOMA
BEFORE INSERT ON BIOMATERIAL_TREATMENT
FOR EACH ROW WHEN (
 new.BIOMATERIAL_TREATMENT_ID IS NULL OR new.BIOMATERIAL_TREATMENT_ID = 0
)
BEGIN
 SELECT sq_BIOMATERIAL_TREATMENT_BIOMA.nextval
 INTO :new.BIOMATERIAL_TREATMENT_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_CHADO_LOGS_LOG_NO
BEFORE INSERT ON CHADO_LOGS
FOR EACH ROW WHEN (
 new.LOG_NO IS NULL OR new.LOG_NO = 0
)
BEGIN
 SELECT sq_CHADO_LOGS_LOG_NO.nextval
 INTO :new.LOG_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_CHANNEL_CHANNEL_ID
BEFORE INSERT ON CHANNEL
FOR EACH ROW WHEN (
 new.CHANNEL_ID IS NULL OR new.CHANNEL_ID = 0
)
BEGIN
 SELECT sq_CHANNEL_CHANNEL_ID.nextval
 INTO :new.CHANNEL_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_CONTACT_CONTACT_ID
BEFORE INSERT ON CONTACT
FOR EACH ROW WHEN (
 new.CONTACT_ID IS NULL OR new.CONTACT_ID = 0
)
BEGIN
 SELECT sq_CONTACT_CONTACT_ID.nextval
 INTO :new.CONTACT_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_CONTROL_CONTROL_ID
BEFORE INSERT ON CONTROL
FOR EACH ROW WHEN (
 new.CONTROL_ID IS NULL OR new.CONTROL_ID = 0
)
BEGIN
 SELECT sq_CONTROL_CONTROL_ID.nextval
 INTO :new.CONTROL_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_CV_CV_ID
BEFORE INSERT ON CV
FOR EACH ROW WHEN (
 new.CV_ID IS NULL OR new.CV_ID = 0
)
BEGIN
 SELECT sq_CV_CV_ID.nextval
 INTO :new.CV_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_CVTERM_CVTERM_ID
BEFORE INSERT ON CVTERM
FOR EACH ROW WHEN (
 new.CVTERM_ID IS NULL OR new.CVTERM_ID = 0
)
BEGIN
 SELECT sq_CVTERM_CVTERM_ID.nextval
 INTO :new.CVTERM_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_CVTERMPATH_CVTERMPATH_ID
BEFORE INSERT ON CVTERMPATH
FOR EACH ROW WHEN (
 new.CVTERMPATH_ID IS NULL OR new.CVTERMPATH_ID = 0
)
BEGIN
 SELECT sq_CVTERMPATH_CVTERMPATH_ID.nextval
 INTO :new.CVTERMPATH_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_CVTERMPROP_CVTERMPROP_ID
BEFORE INSERT ON CVTERMPROP
FOR EACH ROW WHEN (
 new.CVTERMPROP_ID IS NULL OR new.CVTERMPROP_ID = 0
)
BEGIN
 SELECT sq_CVTERMPROP_CVTERMPROP_ID.nextval
 INTO :new.CVTERMPROP_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_CVTERMSYNONYM_CVTERMSYNONYM
BEFORE INSERT ON CVTERMSYNONYM
FOR EACH ROW WHEN (
 new.CVTERMSYNONYM_ID IS NULL OR new.CVTERMSYNONYM_ID = 0
)
BEGIN
 SELECT sq_CVTERMSYNONYM_CVTERMSYNONYM.nextval
 INTO :new.CVTERMSYNONYM_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_CVTERM_DBXREF_CVTERM_DBXREF
BEFORE INSERT ON CVTERM_DBXREF
FOR EACH ROW WHEN (
 new.CVTERM_DBXREF_ID IS NULL OR new.CVTERM_DBXREF_ID = 0
)
BEGIN
 SELECT sq_CVTERM_DBXREF_CVTERM_DBXREF.nextval
 INTO :new.CVTERM_DBXREF_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_CVTERM_RELATIONSHIP_CVTERM_
BEFORE INSERT ON CVTERM_RELATIONSHIP
FOR EACH ROW WHEN (
 new.CVTERM_RELATIONSHIP_ID IS NULL OR new.CVTERM_RELATIONSHIP_ID = 0
)
BEGIN
 SELECT sq_CVTERM_RELATIONSHIP_CVTERM_.nextval
 INTO :new.CVTERM_RELATIONSHIP_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_DB_DB_ID
BEFORE INSERT ON DB
FOR EACH ROW WHEN (
 new.DB_ID IS NULL OR new.DB_ID = 0
)
BEGIN
 SELECT sq_DB_DB_ID.nextval
 INTO :new.DB_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_DBXREF_DBXREF_ID
BEFORE INSERT ON DBXREF
FOR EACH ROW WHEN (
 new.DBXREF_ID IS NULL OR new.DBXREF_ID = 0
)
BEGIN
 SELECT sq_DBXREF_DBXREF_ID.nextval
 INTO :new.DBXREF_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_DBXREFPROP_DBXREFPROP_ID
BEFORE INSERT ON DBXREFPROP
FOR EACH ROW WHEN (
 new.DBXREFPROP_ID IS NULL OR new.DBXREFPROP_ID = 0
)
BEGIN
 SELECT sq_DBXREFPROP_DBXREFPROP_ID.nextval
 INTO :new.DBXREFPROP_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_EIMAGE_EIMAGE_ID
BEFORE INSERT ON EIMAGE
FOR EACH ROW WHEN (
 new.EIMAGE_ID IS NULL OR new.EIMAGE_ID = 0
)
BEGIN
 SELECT sq_EIMAGE_EIMAGE_ID.nextval
 INTO :new.EIMAGE_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_ELEMENT_ELEMENT_ID
BEFORE INSERT ON ELEMENT
FOR EACH ROW WHEN (
 new.ELEMENT_ID IS NULL OR new.ELEMENT_ID = 0
)
BEGIN
 SELECT sq_ELEMENT_ELEMENT_ID.nextval
 INTO :new.ELEMENT_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_ELEMENTRESULT_ELEMENTRESULT
BEFORE INSERT ON ELEMENTRESULT
FOR EACH ROW WHEN (
 new.ELEMENTRESULT_ID IS NULL OR new.ELEMENTRESULT_ID = 0
)
BEGIN
 SELECT sq_ELEMENTRESULT_ELEMENTRESULT.nextval
 INTO :new.ELEMENTRESULT_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_ELEMENTRESULT_RELATIONSHIP_
BEFORE INSERT ON ELEMENTRESULT_RELATIONSHIP
FOR EACH ROW WHEN (
 new.ELEMENTRESULT_RELATIONSHIP_ID IS NULL OR new.ELEMENTRESULT_RELATIONSHIP_ID = 0
)
BEGIN
 SELECT sq_ELEMENTRESULT_RELATIONSHIP_.nextval
 INTO :new.ELEMENTRESULT_RELATIONSHIP_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_ENVIRONMENT_ENVIRONMENT_ID
BEFORE INSERT ON ENVIRONMENT
FOR EACH ROW WHEN (
 new.ENVIRONMENT_ID IS NULL OR new.ENVIRONMENT_ID = 0
)
BEGIN
 SELECT sq_ENVIRONMENT_ENVIRONMENT_ID.nextval
 INTO :new.ENVIRONMENT_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_ENVIRONMENT_CVTERM_ENVIRONM
BEFORE INSERT ON ENVIRONMENT_CVTERM
FOR EACH ROW WHEN (
 new.ENVIRONMENT_CVTERM_ID IS NULL OR new.ENVIRONMENT_CVTERM_ID = 0
)
BEGIN
 SELECT sq_ENVIRONMENT_CVTERM_ENVIRONM.nextval
 INTO :new.ENVIRONMENT_CVTERM_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_EXPRESSION_EXPRESSION_ID
BEFORE INSERT ON EXPRESSION
FOR EACH ROW WHEN (
 new.EXPRESSION_ID IS NULL OR new.EXPRESSION_ID = 0
)
BEGIN
 SELECT sq_EXPRESSION_EXPRESSION_ID.nextval
 INTO :new.EXPRESSION_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_EXPRESSION_CVTERM_EXPRESSIO
BEFORE INSERT ON EXPRESSION_CVTERM
FOR EACH ROW WHEN (
 new.EXPRESSION_CVTERM_ID IS NULL OR new.EXPRESSION_CVTERM_ID = 0
)
BEGIN
 SELECT sq_EXPRESSION_CVTERM_EXPRESSIO.nextval
 INTO :new.EXPRESSION_CVTERM_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_EXPRESSION_IMAGE_EXPRESSION
BEFORE INSERT ON EXPRESSION_IMAGE
FOR EACH ROW WHEN (
 new.EXPRESSION_IMAGE_ID IS NULL OR new.EXPRESSION_IMAGE_ID = 0
)
BEGIN
 SELECT sq_EXPRESSION_IMAGE_EXPRESSION.nextval
 INTO :new.EXPRESSION_IMAGE_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_EXPRESSION_PUB_EXPRESSION_P
BEFORE INSERT ON EXPRESSION_PUB
FOR EACH ROW WHEN (
 new.EXPRESSION_PUB_ID IS NULL OR new.EXPRESSION_PUB_ID = 0
)
BEGIN
 SELECT sq_EXPRESSION_PUB_EXPRESSION_P.nextval
 INTO :new.EXPRESSION_PUB_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_FEATURE_FEATURE_ID
BEFORE INSERT ON FEATURE
FOR EACH ROW WHEN (
 new.FEATURE_ID IS NULL OR new.FEATURE_ID = 0
)
BEGIN
 SELECT sq_FEATURE_FEATURE_ID.nextval
 INTO :new.FEATURE_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_FEATURELOC_FEATURELOC_ID
BEFORE INSERT ON FEATURELOC
FOR EACH ROW WHEN (
 new.FEATURELOC_ID IS NULL OR new.FEATURELOC_ID = 0
)
BEGIN
 SELECT sq_FEATURELOC_FEATURELOC_ID.nextval
 INTO :new.FEATURELOC_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_FEATUREMAP_FEATUREMAP_ID
BEFORE INSERT ON FEATUREMAP
FOR EACH ROW WHEN (
 new.FEATUREMAP_ID IS NULL OR new.FEATUREMAP_ID = 0
)
BEGIN
 SELECT sq_FEATUREMAP_FEATUREMAP_ID.nextval
 INTO :new.FEATUREMAP_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_FEATUREMAP_PUB_FEATUREMAP_P
BEFORE INSERT ON FEATUREMAP_PUB
FOR EACH ROW WHEN (
 new.FEATUREMAP_PUB_ID IS NULL OR new.FEATUREMAP_PUB_ID = 0
)
BEGIN
 SELECT sq_FEATUREMAP_PUB_FEATUREMAP_P.nextval
 INTO :new.FEATUREMAP_PUB_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_FEATUREPROP_FEATUREPROP_ID
BEFORE INSERT ON FEATUREPROP
FOR EACH ROW WHEN (
 new.FEATUREPROP_ID IS NULL OR new.FEATUREPROP_ID = 0
)
BEGIN
 SELECT sq_FEATUREPROP_FEATUREPROP_ID.nextval
 INTO :new.FEATUREPROP_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_FEATUREPROP_PUB_FEATUREPROP
BEFORE INSERT ON FEATUREPROP_PUB
FOR EACH ROW WHEN (
 new.FEATUREPROP_PUB_ID IS NULL OR new.FEATUREPROP_PUB_ID = 0
)
BEGIN
 SELECT sq_FEATUREPROP_PUB_FEATUREPROP.nextval
 INTO :new.FEATUREPROP_PUB_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_FEATURERANGE_FEATURERANGE_I
BEFORE INSERT ON FEATURERANGE
FOR EACH ROW WHEN (
 new.FEATURERANGE_ID IS NULL OR new.FEATURERANGE_ID = 0
)
BEGIN
 SELECT sq_FEATURERANGE_FEATURERANGE_I.nextval
 INTO :new.FEATURERANGE_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_FEATURE_CVTERM_FEATURE_CVTE
BEFORE INSERT ON FEATURE_CVTERM
FOR EACH ROW WHEN (
 new.FEATURE_CVTERM_ID IS NULL OR new.FEATURE_CVTERM_ID = 0
)
BEGIN
 SELECT sq_FEATURE_CVTERM_FEATURE_CVTE.nextval
 INTO :new.FEATURE_CVTERM_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_FEATURE_CVTERMPROP_FEATURE_
BEFORE INSERT ON FEATURE_CVTERMPROP
FOR EACH ROW WHEN (
 new.FEATURE_CVTERMPROP_ID IS NULL OR new.FEATURE_CVTERMPROP_ID = 0
)
BEGIN
 SELECT sq_FEATURE_CVTERMPROP_FEATURE_.nextval
 INTO :new.FEATURE_CVTERMPROP_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_FEATURE_CVTERM_DBXREF_FEATU
BEFORE INSERT ON FEATURE_CVTERM_DBXREF
FOR EACH ROW WHEN (
 new.FEATURE_CVTERM_DBXREF_ID IS NULL OR new.FEATURE_CVTERM_DBXREF_ID = 0
)
BEGIN
 SELECT sq_FEATURE_CVTERM_DBXREF_FEATU.nextval
 INTO :new.FEATURE_CVTERM_DBXREF_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_FEATURE_CVTERM_PUB_FEATURE_
BEFORE INSERT ON FEATURE_CVTERM_PUB
FOR EACH ROW WHEN (
 new.FEATURE_CVTERM_PUB_ID IS NULL OR new.FEATURE_CVTERM_PUB_ID = 0
)
BEGIN
 SELECT sq_FEATURE_CVTERM_PUB_FEATURE_.nextval
 INTO :new.FEATURE_CVTERM_PUB_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_FEATURE_DBXREF_FEATURE_DBXR
BEFORE INSERT ON FEATURE_DBXREF
FOR EACH ROW WHEN (
 new.FEATURE_DBXREF_ID IS NULL OR new.FEATURE_DBXREF_ID = 0
)
BEGIN
 SELECT sq_FEATURE_DBXREF_FEATURE_DBXR.nextval
 INTO :new.FEATURE_DBXREF_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_FEATURE_EXPRESSION_FEATURE_
BEFORE INSERT ON FEATURE_EXPRESSION
FOR EACH ROW WHEN (
 new.FEATURE_EXPRESSION_ID IS NULL OR new.FEATURE_EXPRESSION_ID = 0
)
BEGIN
 SELECT sq_FEATURE_EXPRESSION_FEATURE_.nextval
 INTO :new.FEATURE_EXPRESSION_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_FEATURE_GENOTYPE_FEATURE_GE
BEFORE INSERT ON FEATURE_GENOTYPE
FOR EACH ROW WHEN (
 new.FEATURE_GENOTYPE_ID IS NULL OR new.FEATURE_GENOTYPE_ID = 0
)
BEGIN
 SELECT sq_FEATURE_GENOTYPE_FEATURE_GE.nextval
 INTO :new.FEATURE_GENOTYPE_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_FEATURE_PHENOTYPE_FEATURE_P
BEFORE INSERT ON FEATURE_PHENOTYPE
FOR EACH ROW WHEN (
 new.FEATURE_PHENOTYPE_ID IS NULL OR new.FEATURE_PHENOTYPE_ID = 0
)
BEGIN
 SELECT sq_FEATURE_PHENOTYPE_FEATURE_P.nextval
 INTO :new.FEATURE_PHENOTYPE_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_FEATURE_PUB_FEATURE_PUB_ID
BEFORE INSERT ON FEATURE_PUB
FOR EACH ROW WHEN (
 new.FEATURE_PUB_ID IS NULL OR new.FEATURE_PUB_ID = 0
)
BEGIN
 SELECT sq_FEATURE_PUB_FEATURE_PUB_ID.nextval
 INTO :new.FEATURE_PUB_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_FEATURE_RELATIONSHIP_FEATUR
BEFORE INSERT ON FEATURE_RELATIONSHIP
FOR EACH ROW WHEN (
 new.FEATURE_RELATIONSHIP_ID IS NULL OR new.FEATURE_RELATIONSHIP_ID = 0
)
BEGIN
 SELECT sq_FEATURE_RELATIONSHIP_FEATUR.nextval
 INTO :new.FEATURE_RELATIONSHIP_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_FEATURE_RELATIONSHIPPROP_FE
BEFORE INSERT ON FEATURE_RELATIONSHIPPROP
FOR EACH ROW WHEN (
 new.FEATURE_RELATIONSHIPPROP_ID IS NULL OR new.FEATURE_RELATIONSHIPPROP_ID = 0
)
BEGIN
 SELECT sq_FEATURE_RELATIONSHIPPROP_FE.nextval
 INTO :new.FEATURE_RELATIONSHIPPROP_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_FEATURE_RELATIONSHIPPROP_PU
BEFORE INSERT ON FEATURE_RELATIONSHIPPROP_PUB
FOR EACH ROW WHEN (
 new.FEATURE_RELATIONSHIPPROP_PUB_I IS NULL OR new.FEATURE_RELATIONSHIPPROP_PUB_I = 0
)
BEGIN
 SELECT sq_FEATURE_RELATIONSHIPPROP_PU.nextval
 INTO :new.FEATURE_RELATIONSHIPPROP_PUB_I
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_FEATURE_RELATIONSHIP_PUB_FE
BEFORE INSERT ON FEATURE_RELATIONSHIP_PUB
FOR EACH ROW WHEN (
 new.FEATURE_RELATIONSHIP_PUB_ID IS NULL OR new.FEATURE_RELATIONSHIP_PUB_ID = 0
)
BEGIN
 SELECT sq_FEATURE_RELATIONSHIP_PUB_FE.nextval
 INTO :new.FEATURE_RELATIONSHIP_PUB_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_FEATURE_SYNONYM_FEATURE_SYN
BEFORE INSERT ON FEATURE_SYNONYM
FOR EACH ROW WHEN (
 new.FEATURE_SYNONYM_ID IS NULL OR new.FEATURE_SYNONYM_ID = 0
)
BEGIN
 SELECT sq_FEATURE_SYNONYM_FEATURE_SYN.nextval
 INTO :new.FEATURE_SYNONYM_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_GENOTYPE_GENOTYPE_ID
BEFORE INSERT ON GENOTYPE
FOR EACH ROW WHEN (
 new.GENOTYPE_ID IS NULL OR new.GENOTYPE_ID = 0
)
BEGIN
 SELECT sq_GENOTYPE_GENOTYPE_ID.nextval
 INTO :new.GENOTYPE_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_MAGEDOCUMENTATION_MAGEDOCUM
BEFORE INSERT ON MAGEDOCUMENTATION
FOR EACH ROW WHEN (
 new.MAGEDOCUMENTATION_ID IS NULL OR new.MAGEDOCUMENTATION_ID = 0
)
BEGIN
 SELECT sq_MAGEDOCUMENTATION_MAGEDOCUM.nextval
 INTO :new.MAGEDOCUMENTATION_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_MAGEML_MAGEML_ID
BEFORE INSERT ON MAGEML
FOR EACH ROW WHEN (
 new.MAGEML_ID IS NULL OR new.MAGEML_ID = 0
)
BEGIN
 SELECT sq_MAGEML_MAGEML_ID.nextval
 INTO :new.MAGEML_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_ORGANISM_ORGANISM_ID
BEFORE INSERT ON ORGANISM
FOR EACH ROW WHEN (
 new.ORGANISM_ID IS NULL OR new.ORGANISM_ID = 0
)
BEGIN
 SELECT sq_ORGANISM_ORGANISM_ID.nextval
 INTO :new.ORGANISM_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_ORGANISMPROP_ORGANISMPROP_I
BEFORE INSERT ON ORGANISMPROP
FOR EACH ROW WHEN (
 new.ORGANISMPROP_ID IS NULL OR new.ORGANISMPROP_ID = 0
)
BEGIN
 SELECT sq_ORGANISMPROP_ORGANISMPROP_I.nextval
 INTO :new.ORGANISMPROP_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_ORGANISM_DBXREF_ORGANISM_DB
BEFORE INSERT ON ORGANISM_DBXREF
FOR EACH ROW WHEN (
 new.ORGANISM_DBXREF_ID IS NULL OR new.ORGANISM_DBXREF_ID = 0
)
BEGIN
 SELECT sq_ORGANISM_DBXREF_ORGANISM_DB.nextval
 INTO :new.ORGANISM_DBXREF_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_PHENDESC_PHENDESC_ID
BEFORE INSERT ON PHENDESC
FOR EACH ROW WHEN (
 new.PHENDESC_ID IS NULL OR new.PHENDESC_ID = 0
)
BEGIN
 SELECT sq_PHENDESC_PHENDESC_ID.nextval
 INTO :new.PHENDESC_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_PHENOTYPE_PHENOTYPE_ID
BEFORE INSERT ON PHENOTYPE
FOR EACH ROW WHEN (
 new.PHENOTYPE_ID IS NULL OR new.PHENOTYPE_ID = 0
)
BEGIN
 SELECT sq_PHENOTYPE_PHENOTYPE_ID.nextval
 INTO :new.PHENOTYPE_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_PHENOTYPE_COMPARISON_PHENOT
BEFORE INSERT ON PHENOTYPE_COMPARISON
FOR EACH ROW WHEN (
 new.PHENOTYPE_COMPARISON_ID IS NULL OR new.PHENOTYPE_COMPARISON_ID = 0
)
BEGIN
 SELECT sq_PHENOTYPE_COMPARISON_PHENOT.nextval
 INTO :new.PHENOTYPE_COMPARISON_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_PHENOTYPE_CVTERM_PHENOTYPE_
BEFORE INSERT ON PHENOTYPE_CVTERM
FOR EACH ROW WHEN (
 new.PHENOTYPE_CVTERM_ID IS NULL OR new.PHENOTYPE_CVTERM_ID = 0
)
BEGIN
 SELECT sq_PHENOTYPE_CVTERM_PHENOTYPE_.nextval
 INTO :new.PHENOTYPE_CVTERM_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_PHENSTATEMENT_PHENSTATEMENT
BEFORE INSERT ON PHENSTATEMENT
FOR EACH ROW WHEN (
 new.PHENSTATEMENT_ID IS NULL OR new.PHENSTATEMENT_ID = 0
)
BEGIN
 SELECT sq_PHENSTATEMENT_PHENSTATEMENT.nextval
 INTO :new.PHENSTATEMENT_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_PROJECT_PROJECT_ID
BEFORE INSERT ON PROJECT
FOR EACH ROW WHEN (
 new.PROJECT_ID IS NULL OR new.PROJECT_ID = 0
)
BEGIN
 SELECT sq_PROJECT_PROJECT_ID.nextval
 INTO :new.PROJECT_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_PROTOCOL_PROTOCOL_ID
BEFORE INSERT ON PROTOCOL
FOR EACH ROW WHEN (
 new.PROTOCOL_ID IS NULL OR new.PROTOCOL_ID = 0
)
BEGIN
 SELECT sq_PROTOCOL_PROTOCOL_ID.nextval
 INTO :new.PROTOCOL_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_PROTOCOLPARAM_PROTOCOLPARAM
BEFORE INSERT ON PROTOCOLPARAM
FOR EACH ROW WHEN (
 new.PROTOCOLPARAM_ID IS NULL OR new.PROTOCOLPARAM_ID = 0
)
BEGIN
 SELECT sq_PROTOCOLPARAM_PROTOCOLPARAM.nextval
 INTO :new.PROTOCOLPARAM_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_PUB_PUB_ID
BEFORE INSERT ON PUB
FOR EACH ROW WHEN (
 new.PUB_ID IS NULL OR new.PUB_ID = 0
)
BEGIN
 SELECT sq_PUB_PUB_ID.nextval
 INTO :new.PUB_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_PUBPROP_PUBPROP_ID
BEFORE INSERT ON PUBPROP
FOR EACH ROW WHEN (
 new.PUBPROP_ID IS NULL OR new.PUBPROP_ID = 0
)
BEGIN
 SELECT sq_PUBPROP_PUBPROP_ID.nextval
 INTO :new.PUBPROP_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_PUB_AUTHOR_PUB_AUTHOR_ID
BEFORE INSERT ON PUB_AUTHOR
FOR EACH ROW WHEN (
 new.PUB_AUTHOR_ID IS NULL OR new.PUB_AUTHOR_ID = 0
)
BEGIN
 SELECT sq_PUB_AUTHOR_PUB_AUTHOR_ID.nextval
 INTO :new.PUB_AUTHOR_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_PUB_DBXREF_PUB_DBXREF_ID
BEFORE INSERT ON PUB_DBXREF
FOR EACH ROW WHEN (
 new.PUB_DBXREF_ID IS NULL OR new.PUB_DBXREF_ID = 0
)
BEGIN
 SELECT sq_PUB_DBXREF_PUB_DBXREF_ID.nextval
 INTO :new.PUB_DBXREF_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_PUB_RELATIONSHIP_PUB_RELATI
BEFORE INSERT ON PUB_RELATIONSHIP
FOR EACH ROW WHEN (
 new.PUB_RELATIONSHIP_ID IS NULL OR new.PUB_RELATIONSHIP_ID = 0
)
BEGIN
 SELECT sq_PUB_RELATIONSHIP_PUB_RELATI.nextval
 INTO :new.PUB_RELATIONSHIP_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_QUANTIFICATION_QUANTIFICATI
BEFORE INSERT ON QUANTIFICATION
FOR EACH ROW WHEN (
 new.QUANTIFICATION_ID IS NULL OR new.QUANTIFICATION_ID = 0
)
BEGIN
 SELECT sq_QUANTIFICATION_QUANTIFICATI.nextval
 INTO :new.QUANTIFICATION_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_QUANTIFICATIONPROP_QUANTIFI
BEFORE INSERT ON QUANTIFICATIONPROP
FOR EACH ROW WHEN (
 new.QUANTIFICATIONPROP_ID IS NULL OR new.QUANTIFICATIONPROP_ID = 0
)
BEGIN
 SELECT sq_QUANTIFICATIONPROP_QUANTIFI.nextval
 INTO :new.QUANTIFICATIONPROP_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_QUANTIFICATION_RELATIONSHIP
BEFORE INSERT ON QUANTIFICATION_RELATIONSHIP
FOR EACH ROW WHEN (
 new.QUANTIFICATION_RELATIONSHIP_ID IS NULL OR new.QUANTIFICATION_RELATIONSHIP_ID = 0
)
BEGIN
 SELECT sq_QUANTIFICATION_RELATIONSHIP.nextval
 INTO :new.QUANTIFICATION_RELATIONSHIP_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_STUDY_STUDY_ID
BEFORE INSERT ON STUDY
FOR EACH ROW WHEN (
 new.STUDY_ID IS NULL OR new.STUDY_ID = 0
)
BEGIN
 SELECT sq_STUDY_STUDY_ID.nextval
 INTO :new.STUDY_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_STUDYDESIGN_STUDYDESIGN_ID
BEFORE INSERT ON STUDYDESIGN
FOR EACH ROW WHEN (
 new.STUDYDESIGN_ID IS NULL OR new.STUDYDESIGN_ID = 0
)
BEGIN
 SELECT sq_STUDYDESIGN_STUDYDESIGN_ID.nextval
 INTO :new.STUDYDESIGN_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_STUDYDESIGNPROP_STUDYDESIGN
BEFORE INSERT ON STUDYDESIGNPROP
FOR EACH ROW WHEN (
 new.STUDYDESIGNPROP_ID IS NULL OR new.STUDYDESIGNPROP_ID = 0
)
BEGIN
 SELECT sq_STUDYDESIGNPROP_STUDYDESIGN.nextval
 INTO :new.STUDYDESIGNPROP_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_STUDYFACTOR_STUDYFACTOR_ID
BEFORE INSERT ON STUDYFACTOR
FOR EACH ROW WHEN (
 new.STUDYFACTOR_ID IS NULL OR new.STUDYFACTOR_ID = 0
)
BEGIN
 SELECT sq_STUDYFACTOR_STUDYFACTOR_ID.nextval
 INTO :new.STUDYFACTOR_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_STUDYFACTORVALUE_STUDYFACTO
BEFORE INSERT ON STUDYFACTORVALUE
FOR EACH ROW WHEN (
 new.STUDYFACTORVALUE_ID IS NULL OR new.STUDYFACTORVALUE_ID = 0
)
BEGIN
 SELECT sq_STUDYFACTORVALUE_STUDYFACTO.nextval
 INTO :new.STUDYFACTORVALUE_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_STUDY_ASSAY_STUDY_ASSAY_ID
BEFORE INSERT ON STUDY_ASSAY
FOR EACH ROW WHEN (
 new.STUDY_ASSAY_ID IS NULL OR new.STUDY_ASSAY_ID = 0
)
BEGIN
 SELECT sq_STUDY_ASSAY_STUDY_ASSAY_ID.nextval
 INTO :new.STUDY_ASSAY_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_SYNONYM__SYNONYM_ID
BEFORE INSERT ON SYNONYM_
FOR EACH ROW WHEN (
 new.SYNONYM_ID IS NULL OR new.SYNONYM_ID = 0
)
BEGIN
 SELECT sq_SYNONYM__SYNONYM_ID.nextval
 INTO :new.SYNONYM_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_TABLEINFO_TABLEINFO_ID
BEFORE INSERT ON TABLEINFO
FOR EACH ROW WHEN (
 new.TABLEINFO_ID IS NULL OR new.TABLEINFO_ID = 0
)
BEGIN
 SELECT sq_TABLEINFO_TABLEINFO_ID.nextval
 INTO :new.TABLEINFO_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_TREATMENT_TREATMENT_ID
BEFORE INSERT ON TREATMENT
FOR EACH ROW WHEN (
 new.TREATMENT_ID IS NULL OR new.TREATMENT_ID = 0
)
BEGIN
 SELECT sq_TREATMENT_TREATMENT_ID.nextval
 INTO :new.TREATMENT_ID
 FROM dual;
END;
/

