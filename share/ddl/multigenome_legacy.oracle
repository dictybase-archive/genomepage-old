-- 
-- Created by SQL::Translator::Producer::Oracle
-- Created on Wed Mar 30 14:52:17 2011
-- 
--
-- Table: ABSTRACT
--;

CREATE TABLE ABSTRACT (
  REFERENCE_NO number(10) NOT NULL,
  ABSTRACT varchar2(4000) NOT NULL
);

--
-- Table: ASSOCIATE
--;

CREATE SEQUENCE sq_ASSOCIATE_COLLEAGUE_NO;

CREATE TABLE ASSOCIATE (
  COLLEAGUE_NO number(10) NOT NULL,
  ASSOCIATE_NO number(10) NOT NULL,
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PRIMARY KEY (COLLEAGUE_NO)
);

--
-- Table: AUTHOR
--;

CREATE SEQUENCE sq_AUTHOR_AUTHOR_NO;

CREATE TABLE AUTHOR (
  AUTHOR_NO number(10) NOT NULL,
  AUTHOR_NAME varchar2(40) NOT NULL,
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PRIMARY KEY (AUTHOR_NO),
  CONSTRAINT AUTHOR_NAME_UK UNIQUE (AUTHOR_NAME)
);

--
-- Table: AUTHOR_EDITOR
--;

CREATE SEQUENCE sq_AUTHOR_EDITOR_AUTHOR_NO;

CREATE TABLE AUTHOR_EDITOR (
  AUTHOR_NO number(10) NOT NULL,
  REFERENCE_NO number(10) NOT NULL,
  AUTHOR_TYPE varchar2(40) NOT NULL,
  AUTHOR_ORDER number(4) NOT NULL,
  PRIMARY KEY (AUTHOR_NO)
);

--
-- Table: BLAST_INFORMATION
--;

CREATE SEQUENCE sq_BLAST_INFORMATION_ID;

CREATE TABLE BLAST_INFORMATION (
  ID number(38) NOT NULL,
  EVALUE float(10) NOT NULL,
  SCORE number(10) NOT NULL,
  LENGTH number(10) NOT NULL,
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PRIMARY KEY (ID)
);

--
-- Table: BOOK
--;

CREATE SEQUENCE sq_BOOK_BOOK_NO;

CREATE TABLE BOOK (
  BOOK_NO number(10) NOT NULL,
  TITLE varchar2(400) NOT NULL,
  VOLUME_TITLE varchar2(400),
  ISBN varchar2(20),
  TOTAL_PAGES number(5),
  PUBLISHER varchar2(150),
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PRIMARY KEY (BOOK_NO)
);

--
-- Table: CODE
--;

CREATE SEQUENCE sq_CODE_CODE_NO;

CREATE TABLE CODE (
  CODE_NO number(10) NOT NULL,
  TAB_NAME varchar2(30) NOT NULL,
  COL_NAME varchar2(30) NOT NULL,
  CODE_VALUE varchar2(40) NOT NULL,
  DESCRIPTION varchar2(240),
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PRIMARY KEY (CODE_NO),
  CONSTRAINT CODE_TAB_COL_CODE_UK UNIQUE (TAB_NAME, COL_NAME, CODE_VALUE)
);

--
-- Table: COLLEAGUE
--;

CREATE SEQUENCE sq_COLLEAGUE_COLLEAGUE_NO;

CREATE TABLE COLLEAGUE (
  COLLEAGUE_NO number(10) NOT NULL,
  LAST_NAME varchar2(40) NOT NULL,
  FIRST_NAME varchar2(40) NOT NULL,
  SUFFIX varchar2(40),
  OTHER_NAME varchar2(40),
  PROFESSION varchar2(100),
  JOB_TITLE varchar2(100),
  INSTITUTION varchar2(100),
  ADDRESS1 varchar2(80),
  ADDRESS2 varchar2(80),
  ADDRESS3 varchar2(80),
  ADDRESS4 varchar2(80),
  ADDRESS5 varchar2(80),
  CITY varchar2(100),
  STATE varchar2(2),
  REGION varchar2(40),
  COUNTRY varchar2(40),
  POSTAL_CODE varchar2(40),
  SOURCE varchar2(40) NOT NULL,
  DATE_MODIFIED date DEFAULT SYSDATE NOT NULL,
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  IS_SUBSCRIBED varchar2(1) NOT NULL,
  PRIMARY KEY (COLLEAGUE_NO)
);

--
-- Table: COLLEAGUE_REMARK
--;

CREATE SEQUENCE sq_COLLEAGUE_REMARK_REMARK_NO;

CREATE TABLE COLLEAGUE_REMARK (
  REMARK_NO number(10) NOT NULL,
  REMARK varchar2(1500) NOT NULL,
  REMARK_TYPE varchar2(40) NOT NULL,
  REMARK_DATE date DEFAULT SYSDATE NOT NULL,
  COLLEAGUE_NO number(10) NOT NULL,
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PRIMARY KEY (REMARK_NO)
);

--
-- Table: COLL_CN
--;

CREATE SEQUENCE sq_COLL_CN_COLLEAGUE_NO;

CREATE TABLE COLL_CN (
  COLLEAGUE_NO number(10) NOT NULL,
  CURATOR_NOTE_NO number(10) NOT NULL,
  PRIMARY KEY (COLLEAGUE_NO)
);

--
-- Table: COLL_EMAIL
--;

CREATE SEQUENCE sq_COLL_EMAIL_COLLEAGUE_NO;

CREATE TABLE COLL_EMAIL (
  COLLEAGUE_NO number(10) NOT NULL,
  EMAIL_NO number(10) NOT NULL,
  PRIMARY KEY (COLLEAGUE_NO)
);

--
-- Table: COLL_KEYWORD
--;

CREATE SEQUENCE sq_COLL_KEYWORD_COLLEAGUE_NO;

CREATE TABLE COLL_KEYWORD (
  COLLEAGUE_NO number(10) NOT NULL,
  KEYWORD_NO number(10) NOT NULL,
  PRIMARY KEY (COLLEAGUE_NO)
);

--
-- Table: COLL_LOCUS
--;

CREATE SEQUENCE sq_COLL_LOCUS_COLLEAGUE_NO;

CREATE TABLE COLL_LOCUS (
  COLLEAGUE_NO number(10) NOT NULL,
  LOCUS_NO number(10) NOT NULL,
  PRIMARY KEY (COLLEAGUE_NO)
);

--
-- Table: COLL_PARA
--;

CREATE SEQUENCE sq_COLL_PARA_COLLEAGUE_NO;

CREATE TABLE COLL_PARA (
  COLLEAGUE_NO number(10) NOT NULL,
  PARAGRAPH_NO number(10) NOT NULL,
  PRIMARY KEY (COLLEAGUE_NO)
);

--
-- Table: COLL_PHONE
--;

CREATE SEQUENCE sq_COLL_PHONE_COLLEAGUE_NO;

CREATE TABLE COLL_PHONE (
  COLLEAGUE_NO number(10) NOT NULL,
  PHONE_NO number(10) NOT NULL,
  PRIMARY KEY (COLLEAGUE_NO)
);

--
-- Table: COLL_URL
--;

CREATE SEQUENCE sq_COLL_URL_COLLEAGUE_NO;

CREATE TABLE COLL_URL (
  COLLEAGUE_NO number(10) NOT NULL,
  URL_NO number(10) NOT NULL,
  PRIMARY KEY (COLLEAGUE_NO)
);

--
-- Table: COMMUNITY_ANNOTATION
--;

CREATE SEQUENCE sq_COMMUNITY_ANNOTATION_COMMUN;

CREATE TABLE COMMUNITY_ANNOTATION (
  COMMUNITY_ANNOTATION_NO number(10) NOT NULL,
  ANNOTATION_SET_NO number(10) NOT NULL,
  DICTYBASEID varchar2(40) NOT NULL,
  TOPIC varchar2(40) NOT NULL,
  SUB_TOPIC varchar2(40) NOT NULL,
  DESCRIPTION varchar2(480) NOT NULL,
  PRIMARY KEY (COMMUNITY_ANNOTATION_NO),
  CONSTRAINT COMMUNITY_ANNOTATION_UK UNIQUE (DICTYBASEID, TOPIC, SUB_TOPIC, DESCRIPTION, ANNOTATION_SET_NO)
);

--
-- Table: CURATOR_NOTE
--;

CREATE SEQUENCE sq_CURATOR_NOTE_CURATOR_NOTE_N;

CREATE TABLE CURATOR_NOTE (
  CURATOR_NOTE_NO number(10) NOT NULL,
  NOTE varchar2(960) NOT NULL,
  IS_PUBLIC varchar2(1) DEFAULT 'N' NOT NULL,
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PRIMARY KEY (CURATOR_NOTE_NO),
  CONSTRAINT CURATOR_NOTE_UK UNIQUE (NOTE)
);

--
-- Table: DBUSER
--;

CREATE SEQUENCE sq_DBUSER_USERID;

CREATE TABLE DBUSER (
  USERID varchar2(20) DEFAULT 'SUBSTR(USER,1,20) ' NOT NULL,
  FIRST_NAME varchar2(40) NOT NULL,
  LAST_NAME varchar2(40) NOT NULL,
  STATUS varchar2(40) NOT NULL,
  EMAIL varchar2(100) NOT NULL,
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  PRIMARY KEY (USERID)
);

--
-- Table: DELETE_LOG
--;

CREATE SEQUENCE sq_DELETE_LOG_DLOG_NO;

CREATE TABLE DELETE_LOG (
  DLOG_NO number(10) NOT NULL,
  TAB_NAME varchar2(30) NOT NULL,
  DELETED_ROW varchar2(4000) NOT NULL,
  DESCRIPTION varchar2(240),
  DATE_MODIFIED date DEFAULT SYSDATE NOT NULL,
  MODIFIED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PRIMARY KEY (DLOG_NO)
);

--
-- Table: DICTYBASEID
--;

CREATE SEQUENCE sq_DICTYBASEID_DICTYBASEID_NO;

CREATE TABLE DICTYBASEID (
  DICTYBASEID_NO number(10) NOT NULL,
  DICTYBASEID varchar2(10) NOT NULL,
  DICTYBASEID_TYPE varchar2(40) NOT NULL,
  TAB_NAME varchar2(30),
  PRIMARY_KEY varchar2(40),
  CURATOR_NOTE_NO number(10),
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  REPLACED_BY varchar2(10),
  PRIMARY KEY (DICTYBASEID_NO),
  CONSTRAINT DICTYBASEID_U UNIQUE (DICTYBASEID)
);

--
-- Table: EMAIL
--;

CREATE SEQUENCE sq_EMAIL_EMAIL_NO;

CREATE TABLE EMAIL (
  EMAIL_NO number(10) NOT NULL,
  EMAIL varchar2(100) NOT NULL,
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PRIMARY KEY (EMAIL_NO),
  CONSTRAINT EMAIL_EMAIL_UK UNIQUE (EMAIL)
);

--
-- Table: FEATURE_EXPRESSION_IMAGES
--;

CREATE SEQUENCE sq_FEATURE_EXPRESSION_IMAGES_D;

CREATE TABLE FEATURE_EXPRESSION_IMAGES (
  DICTYBASEID varchar2(10) NOT NULL,
  IMAGE_FILENAME varchar2(50) NOT NULL,
  LOCUS_NO number(10) NOT NULL,
  SOURCE varchar2(50) NOT NULL,
  PRIMARY KEY (DICTYBASEID)
);

--
-- Table: FEAT_CN
--;

CREATE SEQUENCE sq_FEAT_CN_FEATURE_NO;

CREATE TABLE FEAT_CN (
  FEATURE_NO number(10) NOT NULL,
  CURATOR_NOTE_NO number(10) NOT NULL,
  PRIMARY KEY (FEATURE_NO)
);

--
-- Table: FEAT_GENE_INFO
--;

CREATE SEQUENCE sq_FEAT_GENE_INFO_FEATURE_NO;

CREATE TABLE FEAT_GENE_INFO (
  FEATURE_NO number(10) NOT NULL,
  REFERENCE_NO number(10) NOT NULL,
  LITERATURE_TOPIC varchar2(40) DEFAULT 'Not yet curated' NOT NULL,
  LAST_CURATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PRIMARY KEY (FEATURE_NO)
);

--
-- Table: FEAT_PHENO
--;

CREATE SEQUENCE sq_FEAT_PHENO_FEATURE_NO;

CREATE TABLE FEAT_PHENO (
  FEATURE_NO number(10) NOT NULL,
  PHENOTYPE_NO number(10) NOT NULL,
  PHENOTYPE_TYPE varchar2(40) NOT NULL,
  SENTENCE varchar2(720),
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  PRIMARY KEY (FEATURE_NO)
);

--
-- Table: GENE_PRODUCT
--;

CREATE SEQUENCE sq_GENE_PRODUCT_GENE_PRODUCT_N;

CREATE TABLE GENE_PRODUCT (
  GENE_PRODUCT_NO number(10) NOT NULL,
  GENE_PRODUCT varchar2(480) NOT NULL,
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  IS_AUTOMATED number(38) DEFAULT '0',
  PRIMARY KEY (GENE_PRODUCT_NO),
  CONSTRAINT GENE_PRODUCT_UK UNIQUE (GENE_PRODUCT)
);

--
-- Table: GO
--;

CREATE SEQUENCE sq_GO_GOID;

CREATE TABLE GO (
  GOID number(10) NOT NULL,
  GO_TERM varchar2(240) NOT NULL,
  GO_ASPECT varchar2(40) NOT NULL,
  GO_DEFINITION varchar2(2000),
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PRIMARY KEY (GOID),
  CONSTRAINT GO_TERM_ASPECT_UK UNIQUE (GO_TERM, GO_ASPECT)
);

--
-- Table: GO_ANNOTATION_WITH_FROM
--;

CREATE SEQUENCE sq_GO_ANNOTATION_WITH_FROM_ID;

CREATE TABLE GO_ANNOTATION_WITH_FROM (
  ID number(38) NOT NULL,
  EXTERNAL_DB char(20) NOT NULL,
  EXTERNAL_ID varchar2(250) NOT NULL,
  BLAST_ID number(38),
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PRIMARY KEY (ID)
);

--
-- Table: GO_EVIDENCE
--;

CREATE SEQUENCE sq_GO_EVIDENCE_GO_EVIDENCE_NO;

CREATE TABLE GO_EVIDENCE (
  GO_EVIDENCE_NO number(10) NOT NULL,
  EVIDENCE_CODE varchar2(40) NOT NULL,
  DESCRIPTION varchar2(240) NOT NULL,
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PRIMARY KEY (GO_EVIDENCE_NO),
  CONSTRAINT u_GO_EVIDENCE_GOEV_DESCRIPTION UNIQUE (DESCRIPTION)
);

--
-- Table: GO_FEAT_GOEV
--;

CREATE SEQUENCE sq_GO_FEAT_GOEV_GOID;

CREATE TABLE GO_FEAT_GOEV (
  GOID number(10) NOT NULL,
  FEATURE_NO number(10) NOT NULL,
  GO_EVIDENCE_NO number(10) NOT NULL,
  IS_NOT varchar2(1) NOT NULL,
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PRIMARY KEY (GOID)
);

--
-- Table: GO_GOSYN
--;

CREATE SEQUENCE sq_GO_GOSYN_GOID;

CREATE TABLE GO_GOSYN (
  GOID number(10) NOT NULL,
  GO_SYNONYM_NO number(10) NOT NULL,
  PRIMARY KEY (GOID)
);

--
-- Table: GO_LOCUS_EXCLUDE
--;

CREATE SEQUENCE sq_GO_LOCUS_EXCLUDE_GOID;

CREATE TABLE GO_LOCUS_EXCLUDE (
  GOID number(10) NOT NULL,
  LOCUS_NO number(10) NOT NULL,
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PRIMARY KEY (GOID)
);

--
-- Table: GO_LOCUS_GOEV
--;

CREATE SEQUENCE sq_GO_LOCUS_GOEV_GOID;

CREATE TABLE GO_LOCUS_GOEV (
  GOID number(10) NOT NULL,
  LOCUS_NO number(10) NOT NULL,
  GO_EVIDENCE_NO number(10) NOT NULL,
  IS_NOT varchar2(1) NOT NULL,
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  WITH_FROM number(38),
  IS_CONTRIBUTES_TO varchar2(50),
  IS_COLOCALIZES_WITH varchar2(50),
  PRIMARY KEY (GOID)
);

--
-- Table: GO_PATH
--;

CREATE SEQUENCE sq_GO_PATH_GO_PATH_NO;

CREATE TABLE GO_PATH (
  GO_PATH_NO number(10) NOT NULL,
  ANCESTOR_GOID number(10) NOT NULL,
  CHILD_GOID number(10) NOT NULL,
  GENERATION number(2) NOT NULL,
  ANCESTOR_PATH varchar2(240) NOT NULL,
  RELATIONSHIP_TYPE varchar2(40),
  PRIMARY KEY (GO_PATH_NO),
  CONSTRAINT GO_PATH_UK UNIQUE (ANCESTOR_PATH, CHILD_GOID)
);

--
-- Table: GO_SYNONYM
--;

CREATE SEQUENCE sq_GO_SYNONYM_GO_SYNONYM_NO;

CREATE TABLE GO_SYNONYM (
  GO_SYNONYM_NO number(10) NOT NULL,
  GO_SYNONYM varchar2(1024) NOT NULL,
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PRIMARY KEY (GO_SYNONYM_NO),
  CONSTRAINT GO_SYNONYM_UK UNIQUE (GO_SYNONYM)
);

--
-- Table: IGNORE_GENBANK
--;

CREATE TABLE IGNORE_GENBANK (
  ACCESSION varchar2(15)
);

--
-- Table: INSERTIONAL_MUTANTS
--;

CREATE SEQUENCE sq_INSERTIONAL_MUTANTS_DICTYBA;

CREATE TABLE INSERTIONAL_MUTANTS (
  DICTYBASEID varchar2(10) NOT NULL,
  PRIMARY KEY (DICTYBASEID)
);

--
-- Table: INTERACTION
--;

CREATE SEQUENCE sq_INTERACTION_DICTYBASEID_1;

CREATE TABLE INTERACTION (
  DICTYBASEID_1 varchar2(10) NOT NULL,
  DICTYBASEID_2 varchar2(10) NOT NULL,
  INTERACTION_TYPE varchar2(40) NOT NULL,
  DESCRIPTION varchar2(240),
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PRIMARY KEY (DICTYBASEID_1)
);

--
-- Table: IN_SITU_EXPRESSION_PATTERN
--;

CREATE SEQUENCE sq_IN_SITU_EXPRESSION_PATTERN_;

CREATE TABLE IN_SITU_EXPRESSION_PATTERN (
  DICTYBASEID varchar2(10) NOT NULL,
  TYPE varchar2(20) NOT NULL,
  CDNA_ID varchar2(10) NOT NULL,
  PRIMARY KEY (DICTYBASEID)
);

--
-- Table: JOURNAL
--;

CREATE SEQUENCE sq_JOURNAL_JOURNAL_NO;

CREATE TABLE JOURNAL (
  JOURNAL_NO number(10) NOT NULL,
  FULL_NAME varchar2(200),
  ABBREVIATION varchar2(140),
  ISSN varchar2(20),
  PUBLISHER varchar2(100),
  URL_NO number(10),
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PRIMARY KEY (JOURNAL_NO)
);

--
-- Table: KEYWORD
--;

CREATE SEQUENCE sq_KEYWORD_KEYWORD_NO;

CREATE TABLE KEYWORD (
  KEYWORD_NO number(10) NOT NULL,
  KEYWORD varchar2(100) NOT NULL,
  SOURCE varchar2(40) NOT NULL,
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PRIMARY KEY (KEYWORD_NO),
  CONSTRAINT KEYWORD_UK UNIQUE (KEYWORD)
);

--
-- Table: LOCUS_CN
--;

CREATE SEQUENCE sq_LOCUS_CN_LOCUS_NO;

CREATE TABLE LOCUS_CN (
  LOCUS_NO number(10) NOT NULL,
  CURATOR_NOTE_NO number(10) NOT NULL,
  PRIMARY KEY (LOCUS_NO)
);

--
-- Table: LOCUS_GENE_INFO
--;

CREATE SEQUENCE sq_LOCUS_GENE_INFO_LOCUS_NO;

CREATE TABLE LOCUS_GENE_INFO (
  LOCUS_NO number(10) NOT NULL,
  REFERENCE_NO number(10) NOT NULL,
  LITERATURE_TOPIC varchar2(40) DEFAULT 'Not yet curated' NOT NULL,
  LAST_CURATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PRIMARY KEY (LOCUS_NO)
);

--
-- Table: LOCUS_GP
--;

CREATE SEQUENCE sq_LOCUS_GP_LOCUS_NO;

CREATE TABLE LOCUS_GP (
  LOCUS_NO number(10) NOT NULL,
  GENE_PRODUCT_NO number(10) NOT NULL,
  PRIMARY KEY (LOCUS_NO,GENE_PRODUCT_NO)
);

--
-- Table: LOCUS_PHENO
--;

CREATE TABLE LOCUS_PHENO (
  LOCUS_NO number(10) NOT NULL,
  PHENOTYPE_NO number(10) NOT NULL,
  PHENOTYPE_TYPE varchar2(500) NOT NULL,
  SENTENCE varchar2(720),
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL
);

--
-- Table: NOTE
--;

CREATE SEQUENCE sq_NOTE_NOTE_NO;

CREATE TABLE NOTE (
  NOTE_NO number(10) NOT NULL,
  NOTE varchar2(960) NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  PRIMARY KEY (NOTE_NO)
);

--
-- Table: NOTE_LINK
--;

CREATE SEQUENCE sq_NOTE_LINK_NOTE_LINK_NO;

CREATE TABLE NOTE_LINK (
  NOTE_LINK_NO number(10) NOT NULL,
  NOTE_NO number(10) NOT NULL,
  TAB_NAME varchar2(30) NOT NULL,
  PRIMARY_KEY varchar2(40) NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  PRIMARY KEY (NOTE_LINK_NO)
);

--
-- Table: OLD_NEW_FEATURE_LINK
--;

CREATE TABLE OLD_NEW_FEATURE_LINK (
  OLD_FEATURE_NO number(10) NOT NULL,
  NEW_FEATURE_NO number(11) NOT NULL
);

--
-- Table: OLD_NEW_LOCUS_LINK
--;

CREATE TABLE OLD_NEW_LOCUS_LINK (
  OLD_LOCUS_NO number(10) NOT NULL,
  NEW_FEATURE_NO number(11) NOT NULL
);

--
-- Table: PARAGRAPH
--;

CREATE SEQUENCE sq_PARAGRAPH_PARAGRAPH_NO;

CREATE TABLE PARAGRAPH (
  PARAGRAPH_NO number(10) NOT NULL,
  DATE_WRITTEN date DEFAULT SYSDATE NOT NULL,
  WRITTEN_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PARAGRAPH_TEXT clob,
  PRIMARY KEY (PARAGRAPH_NO)
);

--
-- Table: PATHWAY
--;

CREATE SEQUENCE sq_PATHWAY_PATHWAY_ID;

CREATE TABLE PATHWAY (
  PATHWAY_ID number(11) NOT NULL,
  PATHWAY_NAME varchar2(50) NOT NULL,
  COMMON_NAME varchar2(200) NOT NULL,
  PRIMARY KEY (PATHWAY_ID)
);

--
-- Table: PDB_ALIGNMENT
--;

CREATE SEQUENCE sq_PDB_ALIGNMENT_PDB_ALIGNMENT;

CREATE TABLE PDB_ALIGNMENT (
  PDB_ALIGNMENT_NO number(10) NOT NULL,
  QUERY_SEQ_NO number(10) NOT NULL,
  TARGET_SEQ_NO number(10) NOT NULL,
  METHOD varchar2(40) NOT NULL,
  MATRIX varchar2(40) NOT NULL,
  QUERY_ALIGN_START_COORD number(10) NOT NULL,
  QUERY_ALIGN_STOP_COORD number(10) NOT NULL,
  TARGET_ALIGN_START_COORD number(10) NOT NULL,
  TARGET_ALIGN_STOP_COORD number(10) NOT NULL,
  PCT_ALIGNED number(5) NOT NULL,
  PCT_IDENTICAL number(5) NOT NULL,
  PCT_SIMILAR number(5) NOT NULL,
  SCORE number(8) NOT NULL,
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PRIMARY KEY (PDB_ALIGNMENT_NO),
  CONSTRAINT PDB_ALIGNMENT_UK UNIQUE (QUERY_SEQ_NO, TARGET_SEQ_NO)
);

--
-- Table: PDB_SEQUENCE
--;

CREATE SEQUENCE sq_PDB_SEQUENCE_PDB_SEQUENCE_N;

CREATE TABLE PDB_SEQUENCE (
  PDB_SEQUENCE_NO number(10) NOT NULL,
  SEQUENCE_NAME varchar2(50) NOT NULL,
  SOURCE varchar2(40) NOT NULL,
  ORGANISM varchar2(40) NOT NULL,
  SEQUENCE_LENGTH number(10) NOT NULL,
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  NOTE varchar2(960),
  PRIMARY KEY (PDB_SEQUENCE_NO),
  CONSTRAINT PDB_SEQUENCE_NAME_UK UNIQUE (SEQUENCE_NAME)
);

--
-- Table: PHENOTYPE
--;

CREATE SEQUENCE sq_PHENOTYPE_PHENOTYPE_NO;

CREATE TABLE PHENOTYPE (
  PHENOTYPE_NO number(10) NOT NULL,
  PHENOTYPE varchar2(720) NOT NULL,
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PRIMARY KEY (PHENOTYPE_NO),
  CONSTRAINT PHENOTYPE_UK UNIQUE (PHENOTYPE)
);

--
-- Table: PHONE
--;

CREATE SEQUENCE sq_PHONE_PHONE_NO;

CREATE TABLE PHONE (
  PHONE_NO number(10) NOT NULL,
  PHONE_NUM varchar2(40) NOT NULL,
  PHONE_TYPE varchar2(40) NOT NULL,
  PHONE_LOCATION varchar2(40) NOT NULL,
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PRIMARY KEY (PHONE_NO),
  CONSTRAINT PHONE_PHONE_NUM_TYPE_LOC_UK UNIQUE (PHONE_NUM, PHONE_TYPE, PHONE_LOCATION)
);

--
-- Table: PI
--;

CREATE SEQUENCE sq_PI_COLLEAGUE_NO;

CREATE TABLE PI (
  COLLEAGUE_NO number(10) NOT NULL,
  PI_NO number(10) NOT NULL,
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PRIMARY KEY (COLLEAGUE_NO)
);

--
-- Table: PLASMID
--;

CREATE SEQUENCE sq_PLASMID_ID;

CREATE TABLE PLASMID (
  ID number(38) NOT NULL,
  NAME varchar2(200) NOT NULL,
  SYNONYMN varchar2(100),
  DESCRIPTION varchar2(4000),
  SEQUENCE clob,
  DEPOSITOR varchar2(100),
  OBTAINED_ON date,
  OBTAINED_AS varchar2(100),
  KEYWORDS varchar2(200),
  COMMENTS varchar2(4000),
  PUBMEDID varchar2(50),
  INTERNAL_DB_ID varchar2(50),
  OTHER_REFERENCES varchar2(200),
  GENBANK_ACCESSION_NUMBER varchar2(50),
  CREATED_BY varchar2(20) DEFAULT 'SUBSTR(USER,1,20) ' NOT NULL,
  DATE_CREATED date,
  DATE_MODIFIED date,
  IS_AVAILABLE char(1),
  PRIMARY KEY (ID)
);

--
-- Table: PLASMID_INVENTORY
--;

CREATE SEQUENCE sq_PLASMID_INVENTORY_ID;

CREATE TABLE PLASMID_INVENTORY (
  ID number(38) NOT NULL,
  LOCATION varchar2(300),
  STORAGE_DATE date,
  STORED_AS varchar2(300),
  COLOR varchar2(20),
  TEST_DATE date,
  VERIFICATION varchar2(500),
  OTHER_COMMENTS_AND_FEEDBACK varchar2(500),
  PLASMID_ID number(38) NOT NULL,
  STORED_BY varchar2(50) NOT NULL,
  CREATED_BY varchar2(20) DEFAULT 'SUBSTR(USER,1,20) ' NOT NULL,
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  DATE_MODIFIED date,
  PRIMARY KEY (ID)
);

--
-- Table: PUBLICATION_TYPE
--;

CREATE SEQUENCE sq_PUBLICATION_TYPE_REFERENCE_;

CREATE TABLE PUBLICATION_TYPE (
  REFERENCE_NO number(10) NOT NULL,
  PUB_TYPE varchar2(40) NOT NULL,
  PRIMARY KEY (REFERENCE_NO)
);

--
-- Table: REFERENCE
--;

CREATE SEQUENCE sq_REFERENCE_REFERENCE_NO;

CREATE TABLE REFERENCE (
  REFERENCE_NO number(10) NOT NULL,
  REF_SOURCE varchar2(40) NOT NULL,
  STATUS varchar2(40) NOT NULL,
  CITATION varchar2(1500) NOT NULL,
  YEAR number(4),
  PUBMED number(10),
  DATE_PUBLISHED varchar2(20),
  DATE_REVISED number(8),
  ISSUE varchar2(40),
  PAGE varchar2(40),
  VOLUME varchar2(40),
  TITLE varchar2(400),
  JOURNAL_NO number(10),
  BOOK_NO number(10),
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PRIMARY KEY (REFERENCE_NO),
  CONSTRAINT u_REFERENCE_REF_CITATION_UK UNIQUE (CITATION)
);

--
-- Table: REFLINK
--;

CREATE SEQUENCE sq_REFLINK_REFLINK_NO;

CREATE TABLE REFLINK (
  REFLINK_NO number(10) NOT NULL,
  REFERENCE_NO number(10) NOT NULL,
  TAB_NAME varchar2(30) NOT NULL,
  PRIMARY_KEY varchar2(500) NOT NULL,
  PRIMARY_KEY_COL varchar2(100) NOT NULL,
  COL_NAME varchar2(30),
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PRIMARY KEY (REFLINK_NO),
  CONSTRAINT REFLINK_UK UNIQUE (TAB_NAME, PRIMARY_KEY, PRIMARY_KEY_COL, REFERENCE_NO, COL_NAME)
);

--
-- Table: REF_BAD
--;

CREATE SEQUENCE sq_REF_BAD_PUBMED;

CREATE TABLE REF_BAD (
  PUBMED number(10) NOT NULL,
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PRIMARY KEY (PUBMED)
);

--
-- Table: REF_UNLINK
--;

CREATE SEQUENCE sq_REF_UNLINK_REF_UNLINK_NO;

CREATE TABLE REF_UNLINK (
  REF_UNLINK_NO number(10) NOT NULL,
  PUBMED number(10),
  TAB_NAME varchar2(30) NOT NULL,
  PRIMARY_KEY varchar2(40) NOT NULL,
  REFERENCE_NO number(10) NOT NULL,
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PRIMARY KEY (REF_UNLINK_NO),
  CONSTRAINT u_REF_UNLINK_RU_UK UNIQUE (REFERENCE_NO, TAB_NAME, PRIMARY_KEY)
);

--
-- Table: REF_URL
--;

CREATE SEQUENCE sq_REF_URL_REFERENCE_NO;

CREATE TABLE REF_URL (
  REFERENCE_NO number(10) NOT NULL,
  URL_NO number(10) NOT NULL,
  PRIMARY KEY (REFERENCE_NO)
);

--
-- Table: RELATED_REF
--;

CREATE SEQUENCE sq_RELATED_REF_REFERENCE_NO;

CREATE TABLE RELATED_REF (
  REFERENCE_NO number(10) NOT NULL,
  RELATED_REF_NO number(10) NOT NULL,
  PUB_TYPE varchar2(40) NOT NULL,
  DESCRIPTION varchar2(240),
  PRIMARY KEY (REFERENCE_NO)
);

--
-- Table: STATE
--;

CREATE SEQUENCE sq_STATE_ABBREV;

CREATE TABLE STATE (
  ABBREV varchar2(2) NOT NULL,
  NAME varchar2(40) NOT NULL,
  COUNTRY varchar2(20) NOT NULL,
  PRIMARY KEY (ABBREV)
);

--
-- Table: STOCK_CENTER
--;

CREATE SEQUENCE sq_STOCK_CENTER_ID;

CREATE TABLE STOCK_CENTER (
  ID number(38) NOT NULL,
  STRAIN_NAME varchar2(200) NOT NULL,
  STRAIN_DESCRIPTION varchar2(500),
  SPECIES varchar2(100),
  STRAIN_TYPE varchar2(100),
  PHENOTYPE varchar2(100),
  GENOTYPE varchar2(500),
  MUTAGENESIS_METHOD varchar2(100),
  PLASMID varchar2(100),
  PARENTAL_STRAIN varchar2(50),
  PUBMEDID varchar2(50),
  INTERNAL_DB_ID varchar2(50),
  KEYWORDS varchar2(200),
  OBTAINED_FROM varchar2(100),
  OBTAINED_ON date,
  STRAIN_COMMENTS varchar2(500),
  OTHER_REFERENCES varchar2(200),
  CREATED_BY varchar2(20) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  DATE_CREATED date,
  STRAIN_VERIFICATION varchar2(250),
  OBTAINED_AS varchar2(100),
  IS_AVAILABLE char(1),
  DATE_MODIFIED date,
  GENOTYPE_ID number(38),
  DBXREF_ID number(38),
  SYSTEMATIC_NAME varchar2(200),
  MUTANT_TYPE number(10),
  PRIMARY KEY (ID)
);

--
-- Table: STOCK_CENTER_INVENTORY
--;

CREATE SEQUENCE sq_STOCK_CENTER_INVENTORY_ID;

CREATE TABLE STOCK_CENTER_INVENTORY (
  ID number(38) NOT NULL,
  LOCATION varchar2(300),
  OBTAINED_AS varchar2(150),
  STORAGE_DATE date,
  STORED_FROM varchar2(150),
  STORED_AS varchar2(300),
  NO_OF_VIALS number(38),
  COLOR varchar2(50),
  DATE_OF_VIABILITY_TEST date,
  VIABILITY_TEST_RESULTS varchar2(200),
  VIABILITY_TEST_PERFORMED_BY varchar2(50),
  DATE_TRANSFERRRD_TO_LN date,
  DATE_OF_STRAIN_PLATING date,
  PLATING_RESULTS varchar2(200),
  STORAGE_COMMENTS varchar2(250),
  OTHER_COMMENTS_AND_FEEDBACK varchar2(350),
  STRAIN_ID number(38) NOT NULL,
  STRAIN_VERIFICATION varchar2(300),
  CREATED_BY varchar2(20) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  STORED_BY varchar2(25),
  DATE_MODIFIED date,
  PRIMARY KEY (ID)
);

--
-- Table: STRAIN_CHAR_CVTERM
--;

CREATE SEQUENCE sq_STRAIN_CHAR_CVTERM_STRAIN_C;

CREATE TABLE STRAIN_CHAR_CVTERM (
  STRAIN_CHAR_CVTERM_ID number(11) NOT NULL,
  STRAIN_ID number(10) NOT NULL,
  CVTERM_ID number(10) NOT NULL,
  PRIMARY KEY (STRAIN_CHAR_CVTERM_ID),
  CONSTRAINT u_STRAIN_CHAR_CVTERM_U_STRAIN_ UNIQUE (CVTERM_ID, STRAIN_ID)
);

--
-- Table: STRAIN_GENE_LINK
--;

CREATE SEQUENCE sq_STRAIN_GENE_LINK_STRAIN_ID;

CREATE TABLE STRAIN_GENE_LINK (
  STRAIN_ID number(38) NOT NULL,
  FEATURE_ID number(38) NOT NULL,
  PRIMARY KEY (STRAIN_ID)
);

--
-- Table: STRAIN_SYNONYM
--;

CREATE SEQUENCE sq_STRAIN_SYNONYM_STRAIN_SYNON;

CREATE TABLE STRAIN_SYNONYM (
  STRAIN_SYNONYM_ID number(11) NOT NULL,
  SYNONYM_ID number(10) NOT NULL,
  STRAIN_ID number(10) NOT NULL,
  PRIMARY KEY (STRAIN_SYNONYM_ID),
  CONSTRAINT u_STRAIN_SYNONYM_U_STRAIN_SYNO UNIQUE (SYNONYM_ID, STRAIN_ID)
);

--
-- Table: TAXONOMY
--;

CREATE SEQUENCE sq_TAXONOMY_TAXON_ID;

CREATE TABLE TAXONOMY (
  TAXON_ID number(10) NOT NULL,
  TAX_TERM varchar2(240) NOT NULL,
  IS_DEFAULT_DISPLAY varchar2(1) NOT NULL,
  COMMON_NAME varchar2(240),
  RANK varchar2(20),
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  PRIMARY KEY (TAXON_ID),
  CONSTRAINT u_TAXONOMY_TAX_TERM_UK UNIQUE (TAX_TERM)
);

--
-- Table: TAX_HIERARCHY
--;

CREATE SEQUENCE sq_TAX_HIERARCHY_PARENT_ID;

CREATE TABLE TAX_HIERARCHY (
  PARENT_ID number(10) NOT NULL,
  CHILD_ID number(10) NOT NULL,
  GENERATION number(2) NOT NULL,
  PRIMARY KEY (PARENT_ID)
);

--
-- Table: TAX_SYNONYM
--;

CREATE SEQUENCE sq_TAX_SYNONYM_TAX_SYNONYM_NO;

CREATE TABLE TAX_SYNONYM (
  TAX_SYNONYM_NO number(10) NOT NULL,
  TAX_SYNONYM varchar2(240) NOT NULL,
  TAXON_ID number(10) NOT NULL,
  PRIMARY KEY (TAX_SYNONYM_NO)
);

--
-- Table: TEMPLATE_URL
--;

CREATE SEQUENCE sq_TEMPLATE_URL_TEMPLATE_URL_N;

CREATE TABLE TEMPLATE_URL (
  TEMPLATE_URL_NO number(10) NOT NULL,
  TEMPLATE_URL varchar2(480) NOT NULL,
  SOURCE varchar2(40) NOT NULL,
  DESCRIPTION varchar2(240),
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PRIMARY KEY (TEMPLATE_URL_NO),
  CONSTRAINT u_TEMPLATE_URL_TU_TEMPLATE_URL UNIQUE (TEMPLATE_URL)
);

--
-- Table: TMP_ENTREZ_JOURNAL
--;

CREATE TABLE TMP_ENTREZ_JOURNAL (
  ENTREZID number(38),
  JOURNALTITLE varchar2(350),
  ISSN varchar2(10),
  MEDABBR varchar2(100),
  ISOABBR varchar2(100)
);

--
-- Table: UPDATE_LOG
--;

CREATE SEQUENCE sq_UPDATE_LOG_ULOG_NO;

CREATE TABLE UPDATE_LOG (
  ULOG_NO number(10) NOT NULL,
  TAB_NAME varchar2(30) NOT NULL,
  COL_NAME varchar2(30) NOT NULL,
  PRIMARY_KEY varchar2(40) NOT NULL,
  OLD_VALUE varchar2(4000),
  NEW_VALUE varchar2(4000) NOT NULL,
  IS_PUBLIC varchar2(1) DEFAULT 'N' NOT NULL,
  DESCRIPTION varchar2(240),
  DATE_MODIFIED date DEFAULT SYSDATE NOT NULL,
  MODIFIED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PRIMARY KEY (ULOG_NO)
);

--
-- Table: URL
--;

CREATE SEQUENCE sq_URL_URL_NO;

CREATE TABLE URL (
  URL_NO number(10) NOT NULL,
  URL varchar2(480) NOT NULL,
  URL_TYPE varchar2(40) NOT NULL,
  WWW_NAME varchar2(100),
  DATE_CREATED date DEFAULT SYSDATE NOT NULL,
  CREATED_BY varchar2(12) DEFAULT SUBSTR(USER,1,12) NOT NULL,
  PRIMARY KEY (URL_NO),
  CONSTRAINT URL_TYPE_UK UNIQUE (URL, URL_TYPE)
);

CREATE VIEW REFERENCE_CITATION_MATCHER AS
SELECT j.full_name || '|' || r.year|| '|' || r.volume|| '|' || r.page || '|' ||  '|' || r.reference_no as reference
      FROM reference r
INNER JOIN JOURNAL j
        ON j.journal_no = r.journal_no
     WHERE page not like '%-%'
     UNION
    SELECT j.full_name || '|' || r.year|| '|' || r.volume|| '|' || substr(page,1, instr(page, '-')-1) || '|' ||  '|' || r.reference_no as reference
      FROM reference r
INNER JOIN JOURNAL j
        ON j.journal_no = r.journal_no
     WHERE page like '%-%';

CREATE VIEW TMP AS
select gp1.gene_product_no 
from gene_product gp1, gene_product gp2 
where lower(gp1.gene_product) = lower(gp2.gene_product) 
and gp1.gene_product_no != gp2.gene_product_no;

CREATE VIEW GOANNOTATIONDATE AS
select locus_no as locus_no, 
date_created as date_locus_curated, 
GOID as GOID
from GO_LOCUS_GOEV;

CREATE VIEW FEATURE AS
(
SELECT NULL AS FEATURE_NO, NULL AS FEATURE_NAME, NULL AS CHROMOSOME, NULL AS START_COORD, NULL AS STOP_COORD, NULL AS STRAND, NULL AS IS_ON_PMAP, NULL AS LOCUS_NO, NULL AS BRIEF_ID, NULL AS DATE_MODIFIED, NULL AS DATE_CREATED, NULL AS CREATED_BY, NULL AS FEATURE_VERSION, NULL AS FRAME
FROM DUAL);

ALTER TABLE ABSTRACT ADD CONSTRAINT ABSTRACT_REFERENCE_NO_fk FOREIGN KEY (REFERENCE_NO) REFERENCES REFERENCE (REFERENCE_NO) ON DELETE CASCADE;

ALTER TABLE ASSOCIATE ADD CONSTRAINT ASSOCIATE_ASSOCIATE_NO_fk FOREIGN KEY (ASSOCIATE_NO) REFERENCES COLLEAGUE (COLLEAGUE_NO) ON DELETE CASCADE;

ALTER TABLE ASSOCIATE ADD CONSTRAINT ASSOCIATE_COLLEAGUE_NO_fk FOREIGN KEY (COLLEAGUE_NO) REFERENCES COLLEAGUE (COLLEAGUE_NO) ON DELETE CASCADE;

ALTER TABLE AUTHOR_EDITOR ADD CONSTRAINT AUTHOR_EDITOR_AUTHOR_NO_fk FOREIGN KEY (AUTHOR_NO) REFERENCES AUTHOR (AUTHOR_NO) ON DELETE CASCADE;

ALTER TABLE AUTHOR_EDITOR ADD CONSTRAINT AUTHOR_EDITOR_REFERENCE_NO_fk FOREIGN KEY (REFERENCE_NO) REFERENCES REFERENCE (REFERENCE_NO) ON DELETE CASCADE;

ALTER TABLE COLLEAGUE_REMARK ADD CONSTRAINT COLLEAGUE_REMARK_COLLEAGUE_NO_ FOREIGN KEY (COLLEAGUE_NO) REFERENCES COLLEAGUE (COLLEAGUE_NO) ON DELETE CASCADE;

ALTER TABLE COLL_CN ADD CONSTRAINT COLL_CN_COLLEAGUE_NO_fk FOREIGN KEY (COLLEAGUE_NO) REFERENCES COLLEAGUE (COLLEAGUE_NO) ON DELETE CASCADE;

ALTER TABLE COLL_CN ADD CONSTRAINT COLL_CN_CURATOR_NOTE_NO_fk FOREIGN KEY (CURATOR_NOTE_NO) REFERENCES CURATOR_NOTE (CURATOR_NOTE_NO) ON DELETE CASCADE;

ALTER TABLE COLL_EMAIL ADD CONSTRAINT COLL_EMAIL_EMAIL_NO_fk FOREIGN KEY (EMAIL_NO) REFERENCES EMAIL (EMAIL_NO) ON DELETE CASCADE;

ALTER TABLE COLL_EMAIL ADD CONSTRAINT COLL_EMAIL_COLLEAGUE_NO_fk FOREIGN KEY (COLLEAGUE_NO) REFERENCES COLLEAGUE (COLLEAGUE_NO) ON DELETE CASCADE;

ALTER TABLE COLL_KEYWORD ADD CONSTRAINT COLL_KEYWORD_KEYWORD_NO_fk FOREIGN KEY (KEYWORD_NO) REFERENCES KEYWORD (KEYWORD_NO) ON DELETE CASCADE;

ALTER TABLE COLL_KEYWORD ADD CONSTRAINT COLL_KEYWORD_COLLEAGUE_NO_fk FOREIGN KEY (COLLEAGUE_NO) REFERENCES COLLEAGUE (COLLEAGUE_NO) ON DELETE CASCADE;

ALTER TABLE COLL_LOCUS ADD CONSTRAINT COLL_LOCUS_COLLEAGUE_NO_fk FOREIGN KEY (COLLEAGUE_NO) REFERENCES COLLEAGUE (COLLEAGUE_NO) ON DELETE CASCADE;

ALTER TABLE COLL_PARA ADD CONSTRAINT COLL_PARA_COLLEAGUE_NO_fk FOREIGN KEY (COLLEAGUE_NO) REFERENCES COLLEAGUE (COLLEAGUE_NO) ON DELETE CASCADE;

ALTER TABLE COLL_PARA ADD CONSTRAINT COLL_PARA_PARAGRAPH_NO_fk FOREIGN KEY (PARAGRAPH_NO) REFERENCES PARAGRAPH (PARAGRAPH_NO) ON DELETE CASCADE;

ALTER TABLE COLL_PHONE ADD CONSTRAINT COLL_PHONE_PHONE_NO_fk FOREIGN KEY (PHONE_NO) REFERENCES PHONE (PHONE_NO) ON DELETE CASCADE;

ALTER TABLE COLL_PHONE ADD CONSTRAINT COLL_PHONE_COLLEAGUE_NO_fk FOREIGN KEY (COLLEAGUE_NO) REFERENCES COLLEAGUE (COLLEAGUE_NO) ON DELETE CASCADE;

ALTER TABLE COLL_URL ADD CONSTRAINT COLL_URL_URL_NO_fk FOREIGN KEY (URL_NO) REFERENCES URL (URL_NO) ON DELETE CASCADE;

ALTER TABLE COLL_URL ADD CONSTRAINT COLL_URL_COLLEAGUE_NO_fk FOREIGN KEY (COLLEAGUE_NO) REFERENCES COLLEAGUE (COLLEAGUE_NO) ON DELETE CASCADE;

ALTER TABLE DICTYBASEID ADD CONSTRAINT DICTYBASEID_CURATOR_NOTE_NO_fk FOREIGN KEY (CURATOR_NOTE_NO) REFERENCES CURATOR_NOTE (CURATOR_NOTE_NO) ;

ALTER TABLE FEATURE_EXPRESSION_IMAGES ADD CONSTRAINT FEATURE_EXPRESSION_IMAGES_DICT FOREIGN KEY (DICTYBASEID) REFERENCES DICTYBASEID (DICTYBASEID) ;

ALTER TABLE FEAT_CN ADD CONSTRAINT FEAT_CN_CURATOR_NOTE_NO_fk FOREIGN KEY (CURATOR_NOTE_NO) REFERENCES CURATOR_NOTE (CURATOR_NOTE_NO) ON DELETE CASCADE;

ALTER TABLE FEAT_GENE_INFO ADD CONSTRAINT FEAT_GENE_INFO_REFERENCE_NO_fk FOREIGN KEY (REFERENCE_NO) REFERENCES REFERENCE (REFERENCE_NO) ON DELETE CASCADE;

ALTER TABLE FEAT_PHENO ADD CONSTRAINT FEAT_PHENO_PHENOTYPE_NO_fk FOREIGN KEY (PHENOTYPE_NO) REFERENCES PHENOTYPE (PHENOTYPE_NO) ON DELETE CASCADE;

ALTER TABLE GO_ANNOTATION_WITH_FROM ADD CONSTRAINT GO_ANNOTATION_WITH_FROM_BLAST_ FOREIGN KEY (BLAST_ID) REFERENCES BLAST_INFORMATION (ID) ;

ALTER TABLE GO_FEAT_GOEV ADD CONSTRAINT GO_FEAT_GOEV_GO_EVIDENCE_NO_fk FOREIGN KEY (GO_EVIDENCE_NO) REFERENCES GO_EVIDENCE (GO_EVIDENCE_NO) ON DELETE CASCADE;

ALTER TABLE GO_FEAT_GOEV ADD CONSTRAINT GO_FEAT_GOEV_GOID_fk FOREIGN KEY (GOID) REFERENCES GO (GOID) ON DELETE CASCADE;

ALTER TABLE GO_GOSYN ADD CONSTRAINT GO_GOSYN_GO_SYNONYM_NO_fk FOREIGN KEY (GO_SYNONYM_NO) REFERENCES GO_SYNONYM (GO_SYNONYM_NO) ON DELETE CASCADE;

ALTER TABLE GO_GOSYN ADD CONSTRAINT GO_GOSYN_GOID_fk FOREIGN KEY (GOID) REFERENCES GO (GOID) ON DELETE CASCADE;

ALTER TABLE GO_LOCUS_GOEV ADD CONSTRAINT GO_LOCUS_GOEV_WITH_FROM_fk FOREIGN KEY (WITH_FROM) REFERENCES GO_ANNOTATION_WITH_FROM (ID) ;

ALTER TABLE GO_LOCUS_GOEV ADD CONSTRAINT GO_LOCUS_GOEV_GOID_fk FOREIGN KEY (GOID) REFERENCES GO (GOID) ON DELETE CASCADE;

ALTER TABLE GO_LOCUS_GOEV ADD CONSTRAINT GO_LOCUS_GOEV_GO_EVIDENCE_NO_f FOREIGN KEY (GO_EVIDENCE_NO) REFERENCES GO_EVIDENCE (GO_EVIDENCE_NO) ON DELETE CASCADE;

ALTER TABLE GO_PATH ADD CONSTRAINT GO_PATH_ANCESTOR_GOID_fk FOREIGN KEY (ANCESTOR_GOID) REFERENCES GO (GOID) ;

ALTER TABLE GO_PATH ADD CONSTRAINT GO_PATH_CHILD_GOID_fk FOREIGN KEY (CHILD_GOID) REFERENCES GO (GOID) ;

ALTER TABLE JOURNAL ADD CONSTRAINT JOURNAL_URL_NO_fk FOREIGN KEY (URL_NO) REFERENCES URL (URL_NO) ;

ALTER TABLE LOCUS_CN ADD CONSTRAINT LOCUS_CN_CURATOR_NOTE_NO_fk FOREIGN KEY (CURATOR_NOTE_NO) REFERENCES CURATOR_NOTE (CURATOR_NOTE_NO) ON DELETE CASCADE;

ALTER TABLE LOCUS_GENE_INFO ADD CONSTRAINT LOCUS_GENE_INFO_REFERENCE_NO_f FOREIGN KEY (REFERENCE_NO) REFERENCES REFERENCE (REFERENCE_NO) ON DELETE CASCADE;

ALTER TABLE LOCUS_GP ADD CONSTRAINT LOCUS_GP_GENE_PRODUCT_NO_fk FOREIGN KEY (GENE_PRODUCT_NO) REFERENCES GENE_PRODUCT (GENE_PRODUCT_NO) ON DELETE CASCADE;

ALTER TABLE LOCUS_PHENO ADD CONSTRAINT LOCUS_PHENO_PHENOTYPE_NO_fk FOREIGN KEY (PHENOTYPE_NO) REFERENCES PHENOTYPE (PHENOTYPE_NO) ON DELETE CASCADE;

ALTER TABLE NOTE_LINK ADD CONSTRAINT NOTE_LINK_NOTE_NO_fk FOREIGN KEY (NOTE_NO) REFERENCES NOTE (NOTE_NO) ON DELETE CASCADE;

ALTER TABLE PDB_ALIGNMENT ADD CONSTRAINT PDB_ALIGNMENT_QUERY_SEQ_NO_fk FOREIGN KEY (QUERY_SEQ_NO) REFERENCES PDB_SEQUENCE (PDB_SEQUENCE_NO) ;

ALTER TABLE PDB_ALIGNMENT ADD CONSTRAINT PDB_ALIGNMENT_TARGET_SEQ_NO_fk FOREIGN KEY (TARGET_SEQ_NO) REFERENCES PDB_SEQUENCE (PDB_SEQUENCE_NO) ;

ALTER TABLE PI ADD CONSTRAINT PI_PI_NO_fk FOREIGN KEY (PI_NO) REFERENCES COLLEAGUE (COLLEAGUE_NO) ON DELETE CASCADE;

ALTER TABLE PI ADD CONSTRAINT PI_COLLEAGUE_NO_fk FOREIGN KEY (COLLEAGUE_NO) REFERENCES COLLEAGUE (COLLEAGUE_NO) ON DELETE CASCADE;

ALTER TABLE PLASMID_INVENTORY ADD CONSTRAINT PLASMID_INVENTORY_PLASMID_ID_f FOREIGN KEY (PLASMID_ID) REFERENCES PLASMID (ID) ;

ALTER TABLE PUBLICATION_TYPE ADD CONSTRAINT PUBLICATION_TYPE_REFERENCE_NO_ FOREIGN KEY (REFERENCE_NO) REFERENCES REFERENCE (REFERENCE_NO) ON DELETE CASCADE;

ALTER TABLE REFERENCE ADD CONSTRAINT REFERENCE_JOURNAL_NO_fk FOREIGN KEY (JOURNAL_NO) REFERENCES JOURNAL (JOURNAL_NO) ;

ALTER TABLE REFERENCE ADD CONSTRAINT REFERENCE_BOOK_NO_fk FOREIGN KEY (BOOK_NO) REFERENCES BOOK (BOOK_NO) ;

ALTER TABLE REFLINK ADD CONSTRAINT REFLINK_REFERENCE_NO_fk FOREIGN KEY (REFERENCE_NO) REFERENCES REFERENCE (REFERENCE_NO) ON DELETE CASCADE;

ALTER TABLE REF_UNLINK ADD CONSTRAINT REF_UNLINK_REFERENCE_NO_fk FOREIGN KEY (REFERENCE_NO) REFERENCES REFERENCE (REFERENCE_NO) ON DELETE CASCADE;

ALTER TABLE REF_URL ADD CONSTRAINT REF_URL_URL_NO_fk FOREIGN KEY (URL_NO) REFERENCES URL (URL_NO) ON DELETE CASCADE;

ALTER TABLE REF_URL ADD CONSTRAINT REF_URL_REFERENCE_NO_fk FOREIGN KEY (REFERENCE_NO) REFERENCES REFERENCE (REFERENCE_NO) ON DELETE CASCADE;

ALTER TABLE RELATED_REF ADD CONSTRAINT RELATED_REF_REFERENCE_NO_fk FOREIGN KEY (REFERENCE_NO) REFERENCES REFERENCE (REFERENCE_NO) ON DELETE CASCADE;

ALTER TABLE RELATED_REF ADD CONSTRAINT RELATED_REF_RELATED_REF_NO_fk FOREIGN KEY (RELATED_REF_NO) REFERENCES REFERENCE (REFERENCE_NO) ON DELETE CASCADE;

ALTER TABLE STOCK_CENTER_INVENTORY ADD CONSTRAINT STOCK_CENTER_INVENTORY_STRAIN_ FOREIGN KEY (STRAIN_ID) REFERENCES STOCK_CENTER (ID) ;

ALTER TABLE STRAIN_CHAR_CVTERM ADD CONSTRAINT STRAIN_CHAR_CVTERM_STRAIN_ID_f FOREIGN KEY (STRAIN_ID) REFERENCES STOCK_CENTER (ID) ON DELETE CASCADE;

ALTER TABLE STRAIN_GENE_LINK ADD CONSTRAINT STRAIN_GENE_LINK_STRAIN_ID_fk FOREIGN KEY (STRAIN_ID) REFERENCES STOCK_CENTER (ID) ;

ALTER TABLE STRAIN_SYNONYM ADD CONSTRAINT STRAIN_SYNONYM_STRAIN_ID_fk FOREIGN KEY (STRAIN_ID) REFERENCES STOCK_CENTER (ID) ON DELETE CASCADE;

ALTER TABLE TAX_HIERARCHY ADD CONSTRAINT TAX_HIERARCHY_CHILD_ID_fk FOREIGN KEY (CHILD_ID) REFERENCES TAXONOMY (TAXON_ID) ON DELETE CASCADE;

ALTER TABLE TAX_HIERARCHY ADD CONSTRAINT TAX_HIERARCHY_PARENT_ID_fk FOREIGN KEY (PARENT_ID) REFERENCES TAXONOMY (TAXON_ID) ON DELETE CASCADE;

ALTER TABLE TAX_SYNONYM ADD CONSTRAINT TAX_SYNONYM_TAXON_ID_fk FOREIGN KEY (TAXON_ID) REFERENCES TAXONOMY (TAXON_ID) ON DELETE CASCADE;

CREATE OR REPLACE TRIGGER ai_ASSOCIATE_COLLEAGUE_NO
BEFORE INSERT ON ASSOCIATE
FOR EACH ROW WHEN (
 new.COLLEAGUE_NO IS NULL OR new.COLLEAGUE_NO = 0
)
BEGIN
 SELECT sq_ASSOCIATE_COLLEAGUE_NO.nextval
 INTO :new.COLLEAGUE_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_AUTHOR_AUTHOR_NO
BEFORE INSERT ON AUTHOR
FOR EACH ROW WHEN (
 new.AUTHOR_NO IS NULL OR new.AUTHOR_NO = 0
)
BEGIN
 SELECT sq_AUTHOR_AUTHOR_NO.nextval
 INTO :new.AUTHOR_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_AUTHOR_EDITOR_AUTHOR_NO
BEFORE INSERT ON AUTHOR_EDITOR
FOR EACH ROW WHEN (
 new.AUTHOR_NO IS NULL OR new.AUTHOR_NO = 0
)
BEGIN
 SELECT sq_AUTHOR_EDITOR_AUTHOR_NO.nextval
 INTO :new.AUTHOR_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_BLAST_INFORMATION_ID
BEFORE INSERT ON BLAST_INFORMATION
FOR EACH ROW WHEN (
 new.ID IS NULL OR new.ID = 0
)
BEGIN
 SELECT sq_BLAST_INFORMATION_ID.nextval
 INTO :new.ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_BOOK_BOOK_NO
BEFORE INSERT ON BOOK
FOR EACH ROW WHEN (
 new.BOOK_NO IS NULL OR new.BOOK_NO = 0
)
BEGIN
 SELECT sq_BOOK_BOOK_NO.nextval
 INTO :new.BOOK_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_CODE_CODE_NO
BEFORE INSERT ON CODE
FOR EACH ROW WHEN (
 new.CODE_NO IS NULL OR new.CODE_NO = 0
)
BEGIN
 SELECT sq_CODE_CODE_NO.nextval
 INTO :new.CODE_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_COLLEAGUE_COLLEAGUE_NO
BEFORE INSERT ON COLLEAGUE
FOR EACH ROW WHEN (
 new.COLLEAGUE_NO IS NULL OR new.COLLEAGUE_NO = 0
)
BEGIN
 SELECT sq_COLLEAGUE_COLLEAGUE_NO.nextval
 INTO :new.COLLEAGUE_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_COLLEAGUE_REMARK_REMARK_NO
BEFORE INSERT ON COLLEAGUE_REMARK
FOR EACH ROW WHEN (
 new.REMARK_NO IS NULL OR new.REMARK_NO = 0
)
BEGIN
 SELECT sq_COLLEAGUE_REMARK_REMARK_NO.nextval
 INTO :new.REMARK_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_COLL_CN_COLLEAGUE_NO
BEFORE INSERT ON COLL_CN
FOR EACH ROW WHEN (
 new.COLLEAGUE_NO IS NULL OR new.COLLEAGUE_NO = 0
)
BEGIN
 SELECT sq_COLL_CN_COLLEAGUE_NO.nextval
 INTO :new.COLLEAGUE_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_COLL_EMAIL_COLLEAGUE_NO
BEFORE INSERT ON COLL_EMAIL
FOR EACH ROW WHEN (
 new.COLLEAGUE_NO IS NULL OR new.COLLEAGUE_NO = 0
)
BEGIN
 SELECT sq_COLL_EMAIL_COLLEAGUE_NO.nextval
 INTO :new.COLLEAGUE_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_COLL_KEYWORD_COLLEAGUE_NO
BEFORE INSERT ON COLL_KEYWORD
FOR EACH ROW WHEN (
 new.COLLEAGUE_NO IS NULL OR new.COLLEAGUE_NO = 0
)
BEGIN
 SELECT sq_COLL_KEYWORD_COLLEAGUE_NO.nextval
 INTO :new.COLLEAGUE_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_COLL_LOCUS_COLLEAGUE_NO
BEFORE INSERT ON COLL_LOCUS
FOR EACH ROW WHEN (
 new.COLLEAGUE_NO IS NULL OR new.COLLEAGUE_NO = 0
)
BEGIN
 SELECT sq_COLL_LOCUS_COLLEAGUE_NO.nextval
 INTO :new.COLLEAGUE_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_COLL_PARA_COLLEAGUE_NO
BEFORE INSERT ON COLL_PARA
FOR EACH ROW WHEN (
 new.COLLEAGUE_NO IS NULL OR new.COLLEAGUE_NO = 0
)
BEGIN
 SELECT sq_COLL_PARA_COLLEAGUE_NO.nextval
 INTO :new.COLLEAGUE_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_COLL_PHONE_COLLEAGUE_NO
BEFORE INSERT ON COLL_PHONE
FOR EACH ROW WHEN (
 new.COLLEAGUE_NO IS NULL OR new.COLLEAGUE_NO = 0
)
BEGIN
 SELECT sq_COLL_PHONE_COLLEAGUE_NO.nextval
 INTO :new.COLLEAGUE_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_COLL_URL_COLLEAGUE_NO
BEFORE INSERT ON COLL_URL
FOR EACH ROW WHEN (
 new.COLLEAGUE_NO IS NULL OR new.COLLEAGUE_NO = 0
)
BEGIN
 SELECT sq_COLL_URL_COLLEAGUE_NO.nextval
 INTO :new.COLLEAGUE_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_COMMUNITY_ANNOTATION_COMMUN
BEFORE INSERT ON COMMUNITY_ANNOTATION
FOR EACH ROW WHEN (
 new.COMMUNITY_ANNOTATION_NO IS NULL OR new.COMMUNITY_ANNOTATION_NO = 0
)
BEGIN
 SELECT sq_COMMUNITY_ANNOTATION_COMMUN.nextval
 INTO :new.COMMUNITY_ANNOTATION_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_CURATOR_NOTE_CURATOR_NOTE_N
BEFORE INSERT ON CURATOR_NOTE
FOR EACH ROW WHEN (
 new.CURATOR_NOTE_NO IS NULL OR new.CURATOR_NOTE_NO = 0
)
BEGIN
 SELECT sq_CURATOR_NOTE_CURATOR_NOTE_N.nextval
 INTO :new.CURATOR_NOTE_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_DBUSER_USERID
BEFORE INSERT ON DBUSER
FOR EACH ROW WHEN (
 new.USERID IS NULL OR new.USERID = 0
)
BEGIN
 SELECT sq_DBUSER_USERID.nextval
 INTO :new.USERID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_DELETE_LOG_DLOG_NO
BEFORE INSERT ON DELETE_LOG
FOR EACH ROW WHEN (
 new.DLOG_NO IS NULL OR new.DLOG_NO = 0
)
BEGIN
 SELECT sq_DELETE_LOG_DLOG_NO.nextval
 INTO :new.DLOG_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_DICTYBASEID_DICTYBASEID_NO
BEFORE INSERT ON DICTYBASEID
FOR EACH ROW WHEN (
 new.DICTYBASEID_NO IS NULL OR new.DICTYBASEID_NO = 0
)
BEGIN
 SELECT sq_DICTYBASEID_DICTYBASEID_NO.nextval
 INTO :new.DICTYBASEID_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_EMAIL_EMAIL_NO
BEFORE INSERT ON EMAIL
FOR EACH ROW WHEN (
 new.EMAIL_NO IS NULL OR new.EMAIL_NO = 0
)
BEGIN
 SELECT sq_EMAIL_EMAIL_NO.nextval
 INTO :new.EMAIL_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_FEATURE_EXPRESSION_IMAGES_D
BEFORE INSERT ON FEATURE_EXPRESSION_IMAGES
FOR EACH ROW WHEN (
 new.DICTYBASEID IS NULL OR new.DICTYBASEID = 0
)
BEGIN
 SELECT sq_FEATURE_EXPRESSION_IMAGES_D.nextval
 INTO :new.DICTYBASEID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_FEAT_CN_FEATURE_NO
BEFORE INSERT ON FEAT_CN
FOR EACH ROW WHEN (
 new.FEATURE_NO IS NULL OR new.FEATURE_NO = 0
)
BEGIN
 SELECT sq_FEAT_CN_FEATURE_NO.nextval
 INTO :new.FEATURE_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_FEAT_GENE_INFO_FEATURE_NO
BEFORE INSERT ON FEAT_GENE_INFO
FOR EACH ROW WHEN (
 new.FEATURE_NO IS NULL OR new.FEATURE_NO = 0
)
BEGIN
 SELECT sq_FEAT_GENE_INFO_FEATURE_NO.nextval
 INTO :new.FEATURE_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_FEAT_PHENO_FEATURE_NO
BEFORE INSERT ON FEAT_PHENO
FOR EACH ROW WHEN (
 new.FEATURE_NO IS NULL OR new.FEATURE_NO = 0
)
BEGIN
 SELECT sq_FEAT_PHENO_FEATURE_NO.nextval
 INTO :new.FEATURE_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_GENE_PRODUCT_GENE_PRODUCT_N
BEFORE INSERT ON GENE_PRODUCT
FOR EACH ROW WHEN (
 new.GENE_PRODUCT_NO IS NULL OR new.GENE_PRODUCT_NO = 0
)
BEGIN
 SELECT sq_GENE_PRODUCT_GENE_PRODUCT_N.nextval
 INTO :new.GENE_PRODUCT_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_GO_GOID
BEFORE INSERT ON GO
FOR EACH ROW WHEN (
 new.GOID IS NULL OR new.GOID = 0
)
BEGIN
 SELECT sq_GO_GOID.nextval
 INTO :new.GOID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_GO_ANNOTATION_WITH_FROM_ID
BEFORE INSERT ON GO_ANNOTATION_WITH_FROM
FOR EACH ROW WHEN (
 new.ID IS NULL OR new.ID = 0
)
BEGIN
 SELECT sq_GO_ANNOTATION_WITH_FROM_ID.nextval
 INTO :new.ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_GO_EVIDENCE_GO_EVIDENCE_NO
BEFORE INSERT ON GO_EVIDENCE
FOR EACH ROW WHEN (
 new.GO_EVIDENCE_NO IS NULL OR new.GO_EVIDENCE_NO = 0
)
BEGIN
 SELECT sq_GO_EVIDENCE_GO_EVIDENCE_NO.nextval
 INTO :new.GO_EVIDENCE_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_GO_FEAT_GOEV_GOID
BEFORE INSERT ON GO_FEAT_GOEV
FOR EACH ROW WHEN (
 new.GOID IS NULL OR new.GOID = 0
)
BEGIN
 SELECT sq_GO_FEAT_GOEV_GOID.nextval
 INTO :new.GOID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_GO_GOSYN_GOID
BEFORE INSERT ON GO_GOSYN
FOR EACH ROW WHEN (
 new.GOID IS NULL OR new.GOID = 0
)
BEGIN
 SELECT sq_GO_GOSYN_GOID.nextval
 INTO :new.GOID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_GO_LOCUS_EXCLUDE_GOID
BEFORE INSERT ON GO_LOCUS_EXCLUDE
FOR EACH ROW WHEN (
 new.GOID IS NULL OR new.GOID = 0
)
BEGIN
 SELECT sq_GO_LOCUS_EXCLUDE_GOID.nextval
 INTO :new.GOID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_GO_LOCUS_GOEV_GOID
BEFORE INSERT ON GO_LOCUS_GOEV
FOR EACH ROW WHEN (
 new.GOID IS NULL OR new.GOID = 0
)
BEGIN
 SELECT sq_GO_LOCUS_GOEV_GOID.nextval
 INTO :new.GOID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_GO_PATH_GO_PATH_NO
BEFORE INSERT ON GO_PATH
FOR EACH ROW WHEN (
 new.GO_PATH_NO IS NULL OR new.GO_PATH_NO = 0
)
BEGIN
 SELECT sq_GO_PATH_GO_PATH_NO.nextval
 INTO :new.GO_PATH_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_GO_SYNONYM_GO_SYNONYM_NO
BEFORE INSERT ON GO_SYNONYM
FOR EACH ROW WHEN (
 new.GO_SYNONYM_NO IS NULL OR new.GO_SYNONYM_NO = 0
)
BEGIN
 SELECT sq_GO_SYNONYM_GO_SYNONYM_NO.nextval
 INTO :new.GO_SYNONYM_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_INSERTIONAL_MUTANTS_DICTYBA
BEFORE INSERT ON INSERTIONAL_MUTANTS
FOR EACH ROW WHEN (
 new.DICTYBASEID IS NULL OR new.DICTYBASEID = 0
)
BEGIN
 SELECT sq_INSERTIONAL_MUTANTS_DICTYBA.nextval
 INTO :new.DICTYBASEID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_INTERACTION_DICTYBASEID_1
BEFORE INSERT ON INTERACTION
FOR EACH ROW WHEN (
 new.DICTYBASEID_1 IS NULL OR new.DICTYBASEID_1 = 0
)
BEGIN
 SELECT sq_INTERACTION_DICTYBASEID_1.nextval
 INTO :new.DICTYBASEID_1
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_IN_SITU_EXPRESSION_PATTERN_
BEFORE INSERT ON IN_SITU_EXPRESSION_PATTERN
FOR EACH ROW WHEN (
 new.DICTYBASEID IS NULL OR new.DICTYBASEID = 0
)
BEGIN
 SELECT sq_IN_SITU_EXPRESSION_PATTERN_.nextval
 INTO :new.DICTYBASEID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_JOURNAL_JOURNAL_NO
BEFORE INSERT ON JOURNAL
FOR EACH ROW WHEN (
 new.JOURNAL_NO IS NULL OR new.JOURNAL_NO = 0
)
BEGIN
 SELECT sq_JOURNAL_JOURNAL_NO.nextval
 INTO :new.JOURNAL_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_KEYWORD_KEYWORD_NO
BEFORE INSERT ON KEYWORD
FOR EACH ROW WHEN (
 new.KEYWORD_NO IS NULL OR new.KEYWORD_NO = 0
)
BEGIN
 SELECT sq_KEYWORD_KEYWORD_NO.nextval
 INTO :new.KEYWORD_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_LOCUS_CN_LOCUS_NO
BEFORE INSERT ON LOCUS_CN
FOR EACH ROW WHEN (
 new.LOCUS_NO IS NULL OR new.LOCUS_NO = 0
)
BEGIN
 SELECT sq_LOCUS_CN_LOCUS_NO.nextval
 INTO :new.LOCUS_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_LOCUS_GENE_INFO_LOCUS_NO
BEFORE INSERT ON LOCUS_GENE_INFO
FOR EACH ROW WHEN (
 new.LOCUS_NO IS NULL OR new.LOCUS_NO = 0
)
BEGIN
 SELECT sq_LOCUS_GENE_INFO_LOCUS_NO.nextval
 INTO :new.LOCUS_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_NOTE_NOTE_NO
BEFORE INSERT ON NOTE
FOR EACH ROW WHEN (
 new.NOTE_NO IS NULL OR new.NOTE_NO = 0
)
BEGIN
 SELECT sq_NOTE_NOTE_NO.nextval
 INTO :new.NOTE_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_NOTE_LINK_NOTE_LINK_NO
BEFORE INSERT ON NOTE_LINK
FOR EACH ROW WHEN (
 new.NOTE_LINK_NO IS NULL OR new.NOTE_LINK_NO = 0
)
BEGIN
 SELECT sq_NOTE_LINK_NOTE_LINK_NO.nextval
 INTO :new.NOTE_LINK_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_PARAGRAPH_PARAGRAPH_NO
BEFORE INSERT ON PARAGRAPH
FOR EACH ROW WHEN (
 new.PARAGRAPH_NO IS NULL OR new.PARAGRAPH_NO = 0
)
BEGIN
 SELECT sq_PARAGRAPH_PARAGRAPH_NO.nextval
 INTO :new.PARAGRAPH_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_PATHWAY_PATHWAY_ID
BEFORE INSERT ON PATHWAY
FOR EACH ROW WHEN (
 new.PATHWAY_ID IS NULL OR new.PATHWAY_ID = 0
)
BEGIN
 SELECT sq_PATHWAY_PATHWAY_ID.nextval
 INTO :new.PATHWAY_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_PDB_ALIGNMENT_PDB_ALIGNMENT
BEFORE INSERT ON PDB_ALIGNMENT
FOR EACH ROW WHEN (
 new.PDB_ALIGNMENT_NO IS NULL OR new.PDB_ALIGNMENT_NO = 0
)
BEGIN
 SELECT sq_PDB_ALIGNMENT_PDB_ALIGNMENT.nextval
 INTO :new.PDB_ALIGNMENT_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_PDB_SEQUENCE_PDB_SEQUENCE_N
BEFORE INSERT ON PDB_SEQUENCE
FOR EACH ROW WHEN (
 new.PDB_SEQUENCE_NO IS NULL OR new.PDB_SEQUENCE_NO = 0
)
BEGIN
 SELECT sq_PDB_SEQUENCE_PDB_SEQUENCE_N.nextval
 INTO :new.PDB_SEQUENCE_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_PHENOTYPE_PHENOTYPE_NO
BEFORE INSERT ON PHENOTYPE
FOR EACH ROW WHEN (
 new.PHENOTYPE_NO IS NULL OR new.PHENOTYPE_NO = 0
)
BEGIN
 SELECT sq_PHENOTYPE_PHENOTYPE_NO.nextval
 INTO :new.PHENOTYPE_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_PHONE_PHONE_NO
BEFORE INSERT ON PHONE
FOR EACH ROW WHEN (
 new.PHONE_NO IS NULL OR new.PHONE_NO = 0
)
BEGIN
 SELECT sq_PHONE_PHONE_NO.nextval
 INTO :new.PHONE_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_PI_COLLEAGUE_NO
BEFORE INSERT ON PI
FOR EACH ROW WHEN (
 new.COLLEAGUE_NO IS NULL OR new.COLLEAGUE_NO = 0
)
BEGIN
 SELECT sq_PI_COLLEAGUE_NO.nextval
 INTO :new.COLLEAGUE_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_PLASMID_ID
BEFORE INSERT ON PLASMID
FOR EACH ROW WHEN (
 new.ID IS NULL OR new.ID = 0
)
BEGIN
 SELECT sq_PLASMID_ID.nextval
 INTO :new.ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_PLASMID_INVENTORY_ID
BEFORE INSERT ON PLASMID_INVENTORY
FOR EACH ROW WHEN (
 new.ID IS NULL OR new.ID = 0
)
BEGIN
 SELECT sq_PLASMID_INVENTORY_ID.nextval
 INTO :new.ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_PUBLICATION_TYPE_REFERENCE_
BEFORE INSERT ON PUBLICATION_TYPE
FOR EACH ROW WHEN (
 new.REFERENCE_NO IS NULL OR new.REFERENCE_NO = 0
)
BEGIN
 SELECT sq_PUBLICATION_TYPE_REFERENCE_.nextval
 INTO :new.REFERENCE_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_REFERENCE_REFERENCE_NO
BEFORE INSERT ON REFERENCE
FOR EACH ROW WHEN (
 new.REFERENCE_NO IS NULL OR new.REFERENCE_NO = 0
)
BEGIN
 SELECT sq_REFERENCE_REFERENCE_NO.nextval
 INTO :new.REFERENCE_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_REFLINK_REFLINK_NO
BEFORE INSERT ON REFLINK
FOR EACH ROW WHEN (
 new.REFLINK_NO IS NULL OR new.REFLINK_NO = 0
)
BEGIN
 SELECT sq_REFLINK_REFLINK_NO.nextval
 INTO :new.REFLINK_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_REF_BAD_PUBMED
BEFORE INSERT ON REF_BAD
FOR EACH ROW WHEN (
 new.PUBMED IS NULL OR new.PUBMED = 0
)
BEGIN
 SELECT sq_REF_BAD_PUBMED.nextval
 INTO :new.PUBMED
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_REF_UNLINK_REF_UNLINK_NO
BEFORE INSERT ON REF_UNLINK
FOR EACH ROW WHEN (
 new.REF_UNLINK_NO IS NULL OR new.REF_UNLINK_NO = 0
)
BEGIN
 SELECT sq_REF_UNLINK_REF_UNLINK_NO.nextval
 INTO :new.REF_UNLINK_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_REF_URL_REFERENCE_NO
BEFORE INSERT ON REF_URL
FOR EACH ROW WHEN (
 new.REFERENCE_NO IS NULL OR new.REFERENCE_NO = 0
)
BEGIN
 SELECT sq_REF_URL_REFERENCE_NO.nextval
 INTO :new.REFERENCE_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_RELATED_REF_REFERENCE_NO
BEFORE INSERT ON RELATED_REF
FOR EACH ROW WHEN (
 new.REFERENCE_NO IS NULL OR new.REFERENCE_NO = 0
)
BEGIN
 SELECT sq_RELATED_REF_REFERENCE_NO.nextval
 INTO :new.REFERENCE_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_STATE_ABBREV
BEFORE INSERT ON STATE
FOR EACH ROW WHEN (
 new.ABBREV IS NULL OR new.ABBREV = 0
)
BEGIN
 SELECT sq_STATE_ABBREV.nextval
 INTO :new.ABBREV
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_STOCK_CENTER_ID
BEFORE INSERT ON STOCK_CENTER
FOR EACH ROW WHEN (
 new.ID IS NULL OR new.ID = 0
)
BEGIN
 SELECT sq_STOCK_CENTER_ID.nextval
 INTO :new.ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_STOCK_CENTER_INVENTORY_ID
BEFORE INSERT ON STOCK_CENTER_INVENTORY
FOR EACH ROW WHEN (
 new.ID IS NULL OR new.ID = 0
)
BEGIN
 SELECT sq_STOCK_CENTER_INVENTORY_ID.nextval
 INTO :new.ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_STRAIN_CHAR_CVTERM_STRAIN_C
BEFORE INSERT ON STRAIN_CHAR_CVTERM
FOR EACH ROW WHEN (
 new.STRAIN_CHAR_CVTERM_ID IS NULL OR new.STRAIN_CHAR_CVTERM_ID = 0
)
BEGIN
 SELECT sq_STRAIN_CHAR_CVTERM_STRAIN_C.nextval
 INTO :new.STRAIN_CHAR_CVTERM_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_STRAIN_GENE_LINK_STRAIN_ID
BEFORE INSERT ON STRAIN_GENE_LINK
FOR EACH ROW WHEN (
 new.STRAIN_ID IS NULL OR new.STRAIN_ID = 0
)
BEGIN
 SELECT sq_STRAIN_GENE_LINK_STRAIN_ID.nextval
 INTO :new.STRAIN_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_STRAIN_SYNONYM_STRAIN_SYNON
BEFORE INSERT ON STRAIN_SYNONYM
FOR EACH ROW WHEN (
 new.STRAIN_SYNONYM_ID IS NULL OR new.STRAIN_SYNONYM_ID = 0
)
BEGIN
 SELECT sq_STRAIN_SYNONYM_STRAIN_SYNON.nextval
 INTO :new.STRAIN_SYNONYM_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_TAXONOMY_TAXON_ID
BEFORE INSERT ON TAXONOMY
FOR EACH ROW WHEN (
 new.TAXON_ID IS NULL OR new.TAXON_ID = 0
)
BEGIN
 SELECT sq_TAXONOMY_TAXON_ID.nextval
 INTO :new.TAXON_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_TAX_HIERARCHY_PARENT_ID
BEFORE INSERT ON TAX_HIERARCHY
FOR EACH ROW WHEN (
 new.PARENT_ID IS NULL OR new.PARENT_ID = 0
)
BEGIN
 SELECT sq_TAX_HIERARCHY_PARENT_ID.nextval
 INTO :new.PARENT_ID
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_TAX_SYNONYM_TAX_SYNONYM_NO
BEFORE INSERT ON TAX_SYNONYM
FOR EACH ROW WHEN (
 new.TAX_SYNONYM_NO IS NULL OR new.TAX_SYNONYM_NO = 0
)
BEGIN
 SELECT sq_TAX_SYNONYM_TAX_SYNONYM_NO.nextval
 INTO :new.TAX_SYNONYM_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_TEMPLATE_URL_TEMPLATE_URL_N
BEFORE INSERT ON TEMPLATE_URL
FOR EACH ROW WHEN (
 new.TEMPLATE_URL_NO IS NULL OR new.TEMPLATE_URL_NO = 0
)
BEGIN
 SELECT sq_TEMPLATE_URL_TEMPLATE_URL_N.nextval
 INTO :new.TEMPLATE_URL_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_UPDATE_LOG_ULOG_NO
BEFORE INSERT ON UPDATE_LOG
FOR EACH ROW WHEN (
 new.ULOG_NO IS NULL OR new.ULOG_NO = 0
)
BEGIN
 SELECT sq_UPDATE_LOG_ULOG_NO.nextval
 INTO :new.ULOG_NO
 FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ai_URL_URL_NO
BEFORE INSERT ON URL
FOR EACH ROW WHEN (
 new.URL_NO IS NULL OR new.URL_NO = 0
)
BEGIN
 SELECT sq_URL_URL_NO.nextval
 INTO :new.URL_NO
 FROM dual;
END;
/

